
finalProject_HTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d40c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001238  0800d5a0  0800d5a0  0000e5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7d8  0800e7d8  000101f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e7d8  0800e7d8  0000f7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7e0  0800e7e0  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7e0  0800e7e0  0000f7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e7e4  0800e7e4  0000f7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e7e8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101f4  2**0
                  CONTENTS
 10 .bss          00004cb4  200001f4  200001f4  000101f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ea8  20004ea8  000101f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000200bd  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004794  00000000  00000000  000302e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cf0  00000000  00000000  00034a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001652  00000000  00000000  00036768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002596d  00000000  00000000  00037dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020843  00000000  00000000  0005d727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0bb2  00000000  00000000  0007df6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015eb1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008bec  00000000  00000000  0015eb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0016774c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d584 	.word	0x0800d584

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800d584 	.word	0x0800d584

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <spi1_communication>:
//	return chTemp;
//}

extern SPI_HandleTypeDef hspi1;
uint8_t spi1_communication(uint8_t send_char)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
    uint8_t receive_char = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73bb      	strb	r3, [r7, #14]
    HAL_StatusTypeDef status;

    status = HAL_SPI_TransmitReceive(&hspi1, &send_char, &receive_char, 1, 10);  // timeout 10ms
 8000ee2:	f107 020e 	add.w	r2, r7, #14
 8000ee6:	1df9      	adds	r1, r7, #7
 8000ee8:	230a      	movs	r3, #10
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <spi1_communication+0x38>)
 8000ef0:	f005 fd0b 	bl	800690a <HAL_SPI_TransmitReceive>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <spi1_communication+0x2e>
        return receive_char;
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	e000      	b.n	8000f04 <spi1_communication+0x30>
    } else {
        return 0;  // lỗi
 8000f02:	2300      	movs	r3, #0
    }
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200002bc 	.word	0x200002bc

08000f10 <lcd_write_byte>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_byte(uint8_t chByte, uint8_t chCmd)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
    if (chCmd) {
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d006      	beq.n	8000f34 <lcd_write_byte+0x24>
        LCD_DC_H();
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f2c:	480d      	ldr	r0, [pc, #52]	@ (8000f64 <lcd_write_byte+0x54>)
 8000f2e:	f004 fe0f 	bl	8005b50 <HAL_GPIO_WritePin>
 8000f32:	e005      	b.n	8000f40 <lcd_write_byte+0x30>
    } else {
        LCD_DC_L();
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f3a:	480a      	ldr	r0, [pc, #40]	@ (8000f64 <lcd_write_byte+0x54>)
 8000f3c:	f004 fe08 	bl	8005b50 <HAL_GPIO_WritePin>
    }

    LCD_CS_L();
 8000f40:	2200      	movs	r2, #0
 8000f42:	2180      	movs	r1, #128	@ 0x80
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <lcd_write_byte+0x54>)
 8000f46:	f004 fe03 	bl	8005b50 <HAL_GPIO_WritePin>
    spi1_communication(chByte);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffc1 	bl	8000ed4 <spi1_communication>
    LCD_CS_H();
 8000f52:	2201      	movs	r2, #1
 8000f54:	2180      	movs	r1, #128	@ 0x80
 8000f56:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <lcd_write_byte+0x54>)
 8000f58:	f004 fdfa 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40020400 	.word	0x40020400

08000f68 <lcd_write_word>:
parameter:
  chByte : send data
  chCmd  : command or data
******************************************************************************/
void lcd_write_word(uint16_t hwData)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
    LCD_DC_H();
 8000f72:	2201      	movs	r2, #1
 8000f74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f78:	480e      	ldr	r0, [pc, #56]	@ (8000fb4 <lcd_write_word+0x4c>)
 8000f7a:	f004 fde9 	bl	8005b50 <HAL_GPIO_WritePin>
    LCD_CS_L();
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <lcd_write_word+0x4c>)
 8000f84:	f004 fde4 	bl	8005b50 <HAL_GPIO_WritePin>
    spi1_communication(hwData >> 8);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff9f 	bl	8000ed4 <spi1_communication>
    spi1_communication(hwData & 0xFF);
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff9a 	bl	8000ed4 <spi1_communication>
    LCD_CS_H();
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2180      	movs	r1, #128	@ 0x80
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <lcd_write_word+0x4c>)
 8000fa6:	f004 fdd3 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <lcd_write_command>:
parameter:
     chByte : send data
		 chCmd  : command or data
******************************************************************************/
void lcd_write_command(uint8_t chRegister, uint8_t chValue)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	lcd_write_byte(chRegister, LCD_CMD);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff9f 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(chValue, LCD_DATA);
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff9a 	bl	8000f10 <lcd_write_byte>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <delay_ms>:
/******************************************************************************
Function Name  : delay
			parameter: ms
******************************************************************************/
void delay_ms(uint32_t ms)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint32_t j=5000;
 8000fec:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ff0:	60fb      	str	r3, [r7, #12]
	for(;ms>2;ms--)
 8000ff2:	e008      	b.n	8001006 <delay_ms+0x22>
		for(;j>2;j--){
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d8f9      	bhi.n	8000ff4 <delay_ms+0x10>
	for(;ms>2;ms--)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d8f6      	bhi.n	8000ffa <delay_ms+0x16>

		}
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <lcd_init>:
/******************************************************************************
Function Name  : initials lcd control pin
			parameter:
******************************************************************************/
void lcd_init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  //lcd_ctrl_port_init();
	LCD_RST_H();
 8001020:	2201      	movs	r2, #1
 8001022:	2104      	movs	r1, #4
 8001024:	4880      	ldr	r0, [pc, #512]	@ (8001228 <lcd_init+0x20c>)
 8001026:	f004 fd93 	bl	8005b50 <HAL_GPIO_WritePin>
  //Sspi_init();

	LCD_CS_H();
 800102a:	2201      	movs	r2, #1
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	487e      	ldr	r0, [pc, #504]	@ (8001228 <lcd_init+0x20c>)
 8001030:	f004 fd8e 	bl	8005b50 <HAL_GPIO_WritePin>
	LCD_BKL_H();
 8001034:	2201      	movs	r2, #1
 8001036:	2140      	movs	r1, #64	@ 0x40
 8001038:	487b      	ldr	r0, [pc, #492]	@ (8001228 <lcd_init+0x20c>)
 800103a:	f004 fd89 	bl	8005b50 <HAL_GPIO_WritePin>
#ifdef 	ST7789_DEVICE
	LCD_RST_H();
 800103e:	2201      	movs	r2, #1
 8001040:	2104      	movs	r1, #4
 8001042:	4879      	ldr	r0, [pc, #484]	@ (8001228 <lcd_init+0x20c>)
 8001044:	f004 fd84 	bl	8005b50 <HAL_GPIO_WritePin>
	delay_ms(5);
 8001048:	2005      	movs	r0, #5
 800104a:	f7ff ffcb 	bl	8000fe4 <delay_ms>
	LCD_RST_L();
 800104e:	2200      	movs	r2, #0
 8001050:	2104      	movs	r1, #4
 8001052:	4875      	ldr	r0, [pc, #468]	@ (8001228 <lcd_init+0x20c>)
 8001054:	f004 fd7c 	bl	8005b50 <HAL_GPIO_WritePin>
	delay_ms(5);
 8001058:	2005      	movs	r0, #5
 800105a:	f7ff ffc3 	bl	8000fe4 <delay_ms>
	LCD_RST_H();
 800105e:	2201      	movs	r2, #1
 8001060:	2104      	movs	r1, #4
 8001062:	4871      	ldr	r0, [pc, #452]	@ (8001228 <lcd_init+0x20c>)
 8001064:	f004 fd74 	bl	8005b50 <HAL_GPIO_WritePin>
	delay_ms(5);
 8001068:	2005      	movs	r0, #5
 800106a:	f7ff ffbb 	bl	8000fe4 <delay_ms>
	LCD_CS_H();
 800106e:	2201      	movs	r2, #1
 8001070:	2180      	movs	r1, #128	@ 0x80
 8001072:	486d      	ldr	r0, [pc, #436]	@ (8001228 <lcd_init+0x20c>)
 8001074:	f004 fd6c 	bl	8005b50 <HAL_GPIO_WritePin>
	lcd_write_command(0x09,0x3F);
	lcd_write_byte(0x20, LCD_CMD);


#elif defined ST7789_DEVICE
	lcd_write_byte(0x11,LCD_CMD);
 8001078:	2100      	movs	r1, #0
 800107a:	2011      	movs	r0, #17
 800107c:	f7ff ff48 	bl	8000f10 <lcd_write_byte>
	delay_ms(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f7ff ffaf 	bl	8000fe4 <delay_ms>
	lcd_write_command(0x36,0x00);
 8001086:	2100      	movs	r1, #0
 8001088:	2036      	movs	r0, #54	@ 0x36
 800108a:	f7ff ff95 	bl	8000fb8 <lcd_write_command>
	lcd_write_command(0x3a,0x05);
 800108e:	2105      	movs	r1, #5
 8001090:	203a      	movs	r0, #58	@ 0x3a
 8001092:	f7ff ff91 	bl	8000fb8 <lcd_write_command>
	lcd_write_byte(0xb2,LCD_CMD);
 8001096:	2100      	movs	r1, #0
 8001098:	20b2      	movs	r0, #178	@ 0xb2
 800109a:	f7ff ff39 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 800109e:	2101      	movs	r1, #1
 80010a0:	200c      	movs	r0, #12
 80010a2:	f7ff ff35 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x0c,LCD_DATA);
 80010a6:	2101      	movs	r1, #1
 80010a8:	200c      	movs	r0, #12
 80010aa:	f7ff ff31 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80010ae:	2101      	movs	r1, #1
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff ff2d 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 80010b6:	2101      	movs	r1, #1
 80010b8:	2033      	movs	r0, #51	@ 0x33
 80010ba:	f7ff ff29 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x33,LCD_DATA);
 80010be:	2101      	movs	r1, #1
 80010c0:	2033      	movs	r0, #51	@ 0x33
 80010c2:	f7ff ff25 	bl	8000f10 <lcd_write_byte>
	lcd_write_command(0xb7,0x35);
 80010c6:	2135      	movs	r1, #53	@ 0x35
 80010c8:	20b7      	movs	r0, #183	@ 0xb7
 80010ca:	f7ff ff75 	bl	8000fb8 <lcd_write_command>
	lcd_write_command(0xbb,0x28);
 80010ce:	2128      	movs	r1, #40	@ 0x28
 80010d0:	20bb      	movs	r0, #187	@ 0xbb
 80010d2:	f7ff ff71 	bl	8000fb8 <lcd_write_command>
	lcd_write_command(0xc0,0x3c);
 80010d6:	213c      	movs	r1, #60	@ 0x3c
 80010d8:	20c0      	movs	r0, #192	@ 0xc0
 80010da:	f7ff ff6d 	bl	8000fb8 <lcd_write_command>
	lcd_write_command(0xc2,0x01);
 80010de:	2101      	movs	r1, #1
 80010e0:	20c2      	movs	r0, #194	@ 0xc2
 80010e2:	f7ff ff69 	bl	8000fb8 <lcd_write_command>
	lcd_write_command(0xc3,0x0b);
 80010e6:	210b      	movs	r1, #11
 80010e8:	20c3      	movs	r0, #195	@ 0xc3
 80010ea:	f7ff ff65 	bl	8000fb8 <lcd_write_command>
	lcd_write_command(0xc4,0x20);
 80010ee:	2120      	movs	r1, #32
 80010f0:	20c4      	movs	r0, #196	@ 0xc4
 80010f2:	f7ff ff61 	bl	8000fb8 <lcd_write_command>
	lcd_write_command(0xc6,0x0f);
 80010f6:	210f      	movs	r1, #15
 80010f8:	20c6      	movs	r0, #198	@ 0xc6
 80010fa:	f7ff ff5d 	bl	8000fb8 <lcd_write_command>
	lcd_write_byte(0xD0,LCD_CMD);
 80010fe:	2100      	movs	r1, #0
 8001100:	20d0      	movs	r0, #208	@ 0xd0
 8001102:	f7ff ff05 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0xa4,LCD_DATA);
 8001106:	2101      	movs	r1, #1
 8001108:	20a4      	movs	r0, #164	@ 0xa4
 800110a:	f7ff ff01 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0xa1,LCD_DATA);
 800110e:	2101      	movs	r1, #1
 8001110:	20a1      	movs	r0, #161	@ 0xa1
 8001112:	f7ff fefd 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0xe0,LCD_CMD);
 8001116:	2100      	movs	r1, #0
 8001118:	20e0      	movs	r0, #224	@ 0xe0
 800111a:	f7ff fef9 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 800111e:	2101      	movs	r1, #1
 8001120:	20d0      	movs	r0, #208	@ 0xd0
 8001122:	f7ff fef5 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 8001126:	2101      	movs	r1, #1
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff fef1 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x08,LCD_DATA);
 800112e:	2101      	movs	r1, #1
 8001130:	2008      	movs	r0, #8
 8001132:	f7ff feed 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x0f,LCD_DATA);
 8001136:	2101      	movs	r1, #1
 8001138:	200f      	movs	r0, #15
 800113a:	f7ff fee9 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 800113e:	2101      	movs	r1, #1
 8001140:	2011      	movs	r0, #17
 8001142:	f7ff fee5 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x2a,LCD_DATA);
 8001146:	2101      	movs	r1, #1
 8001148:	202a      	movs	r0, #42	@ 0x2a
 800114a:	f7ff fee1 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x36,LCD_DATA);
 800114e:	2101      	movs	r1, #1
 8001150:	2036      	movs	r0, #54	@ 0x36
 8001152:	f7ff fedd 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x55,LCD_DATA);
 8001156:	2101      	movs	r1, #1
 8001158:	2055      	movs	r0, #85	@ 0x55
 800115a:	f7ff fed9 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x44,LCD_DATA);
 800115e:	2101      	movs	r1, #1
 8001160:	2044      	movs	r0, #68	@ 0x44
 8001162:	f7ff fed5 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x3a,LCD_DATA);
 8001166:	2101      	movs	r1, #1
 8001168:	203a      	movs	r0, #58	@ 0x3a
 800116a:	f7ff fed1 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 800116e:	2101      	movs	r1, #1
 8001170:	200b      	movs	r0, #11
 8001172:	f7ff fecd 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x06,LCD_DATA);
 8001176:	2101      	movs	r1, #1
 8001178:	2006      	movs	r0, #6
 800117a:	f7ff fec9 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x11,LCD_DATA);
 800117e:	2101      	movs	r1, #1
 8001180:	2011      	movs	r0, #17
 8001182:	f7ff fec5 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x20,LCD_DATA);
 8001186:	2101      	movs	r1, #1
 8001188:	2020      	movs	r0, #32
 800118a:	f7ff fec1 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0xe1,LCD_CMD);
 800118e:	2100      	movs	r1, #0
 8001190:	20e1      	movs	r0, #225	@ 0xe1
 8001192:	f7ff febd 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0xd0,LCD_DATA);
 8001196:	2101      	movs	r1, #1
 8001198:	20d0      	movs	r0, #208	@ 0xd0
 800119a:	f7ff feb9 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x01,LCD_DATA);
 800119e:	2101      	movs	r1, #1
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff feb5 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x07,LCD_DATA);
 80011a6:	2101      	movs	r1, #1
 80011a8:	2007      	movs	r0, #7
 80011aa:	f7ff feb1 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x0a,LCD_DATA);
 80011ae:	2101      	movs	r1, #1
 80011b0:	200a      	movs	r0, #10
 80011b2:	f7ff fead 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x0b,LCD_DATA);
 80011b6:	2101      	movs	r1, #1
 80011b8:	200b      	movs	r0, #11
 80011ba:	f7ff fea9 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x18,LCD_DATA);
 80011be:	2101      	movs	r1, #1
 80011c0:	2018      	movs	r0, #24
 80011c2:	f7ff fea5 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x34,LCD_DATA);
 80011c6:	2101      	movs	r1, #1
 80011c8:	2034      	movs	r0, #52	@ 0x34
 80011ca:	f7ff fea1 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x43,LCD_DATA);
 80011ce:	2101      	movs	r1, #1
 80011d0:	2043      	movs	r0, #67	@ 0x43
 80011d2:	f7ff fe9d 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x4a,LCD_DATA);
 80011d6:	2101      	movs	r1, #1
 80011d8:	204a      	movs	r0, #74	@ 0x4a
 80011da:	f7ff fe99 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x2b,LCD_DATA);
 80011de:	2101      	movs	r1, #1
 80011e0:	202b      	movs	r0, #43	@ 0x2b
 80011e2:	f7ff fe95 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x1b,LCD_DATA);
 80011e6:	2101      	movs	r1, #1
 80011e8:	201b      	movs	r0, #27
 80011ea:	f7ff fe91 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x1c,LCD_DATA);
 80011ee:	2101      	movs	r1, #1
 80011f0:	201c      	movs	r0, #28
 80011f2:	f7ff fe8d 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x22,LCD_DATA);
 80011f6:	2101      	movs	r1, #1
 80011f8:	2022      	movs	r0, #34	@ 0x22
 80011fa:	f7ff fe89 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x1f,LCD_DATA);
 80011fe:	2101      	movs	r1, #1
 8001200:	201f      	movs	r0, #31
 8001202:	f7ff fe85 	bl	8000f10 <lcd_write_byte>
	//lcd_write_byte(0x21, LCD_CMD);
	lcd_write_byte(0x29,LCD_CMD);
 8001206:	2100      	movs	r1, #0
 8001208:	2029      	movs	r0, #41	@ 0x29
 800120a:	f7ff fe81 	bl	8000f10 <lcd_write_byte>
	lcd_write_command(0x51,0xff);
 800120e:	21ff      	movs	r1, #255	@ 0xff
 8001210:	2051      	movs	r0, #81	@ 0x51
 8001212:	f7ff fed1 	bl	8000fb8 <lcd_write_command>
	lcd_write_command(0x55,0xB0);
 8001216:	21b0      	movs	r1, #176	@ 0xb0
 8001218:	2055      	movs	r0, #85	@ 0x55
 800121a:	f7ff fecd 	bl	8000fb8 <lcd_write_command>
#endif

	lcd_clear_screen(BLACK);
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f804 	bl	800122c <lcd_clear_screen>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020400 	.word	0x40020400

0800122c <lcd_clear_screen>:
//	}
//	LCD_CS_H();
//}

void lcd_clear_screen(uint16_t hwColor)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001232:	af00      	add	r7, sp, #0
 8001234:	4602      	mov	r2, r0
 8001236:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800123a:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 800123e:	801a      	strh	r2, [r3, #0]
    uint32_t wCount = LCD_WIDTH * LCD_HEIGHT;
 8001240:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001244:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    uint8_t color_buf[512]; // Smaller buffer, e.g., 256 pixels (512 bytes)
    uint16_t buf_size = sizeof(color_buf) / 2;
 8001248:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800124c:	f8a7 320a 	strh.w	r3, [r7, #522]	@ 0x20a

    // Fill small buffer
    for (uint16_t i = 0; i < buf_size * 2; i += 2) {
 8001250:	2300      	movs	r3, #0
 8001252:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 8001256:	e021      	b.n	800129c <lcd_clear_screen+0x70>
        color_buf[i] = hwColor >> 8;
 8001258:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800125c:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b29a      	uxth	r2, r3
 8001266:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 800126a:	b2d1      	uxtb	r1, r2
 800126c:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001270:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8001274:	54d1      	strb	r1, [r2, r3]
        color_buf[i + 1] = hwColor & 0xFF;
 8001276:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 800127a:	3301      	adds	r3, #1
 800127c:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001280:	f2a2 2212 	subw	r2, r2, #530	@ 0x212
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	b2d1      	uxtb	r1, r2
 8001288:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800128c:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 8001290:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < buf_size * 2; i += 2) {
 8001292:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8001296:	3302      	adds	r3, #2
 8001298:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216
 800129c:	f8b7 2216 	ldrh.w	r2, [r7, #534]	@ 0x216
 80012a0:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dbd6      	blt.n	8001258 <lcd_clear_screen+0x2c>

#ifdef HX8347D_DEVICE
    lcd_set_cursor(0, 0);
    lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
    lcd_write_byte(0x2A, LCD_CMD);
 80012aa:	2100      	movs	r1, #0
 80012ac:	202a      	movs	r0, #42	@ 0x2a
 80012ae:	f7ff fe2f 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte(0x00, LCD_DATA);
 80012b2:	2101      	movs	r1, #1
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff fe2b 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte(0x00, LCD_DATA);
 80012ba:	2101      	movs	r1, #1
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fe27 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte(0x00, LCD_DATA);
 80012c2:	2101      	movs	r1, #1
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fe23 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte((LCD_WIDTH - 1) & 0xFF, LCD_DATA);
 80012ca:	2101      	movs	r1, #1
 80012cc:	20ef      	movs	r0, #239	@ 0xef
 80012ce:	f7ff fe1f 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte(0x2B, LCD_CMD);
 80012d2:	2100      	movs	r1, #0
 80012d4:	202b      	movs	r0, #43	@ 0x2b
 80012d6:	f7ff fe1b 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte(0x00, LCD_DATA);
 80012da:	2101      	movs	r1, #1
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fe17 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte(0x00, LCD_DATA);
 80012e2:	2101      	movs	r1, #1
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fe13 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte(((LCD_HEIGHT - 1) >> 8) & 0xFF, LCD_DATA);
 80012ea:	2101      	movs	r1, #1
 80012ec:	2001      	movs	r0, #1
 80012ee:	f7ff fe0f 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte((LCD_HEIGHT - 1) & 0xFF, LCD_DATA);
 80012f2:	2101      	movs	r1, #1
 80012f4:	203f      	movs	r0, #63	@ 0x3f
 80012f6:	f7ff fe0b 	bl	8000f10 <lcd_write_byte>
    lcd_write_byte(0x2C, LCD_CMD);
 80012fa:	2100      	movs	r1, #0
 80012fc:	202c      	movs	r0, #44	@ 0x2c
 80012fe:	f7ff fe07 	bl	8000f10 <lcd_write_byte>
#endif

    LCD_CS_L();
 8001302:	2200      	movs	r2, #0
 8001304:	2180      	movs	r1, #128	@ 0x80
 8001306:	481d      	ldr	r0, [pc, #116]	@ (800137c <lcd_clear_screen+0x150>)
 8001308:	f004 fc22 	bl	8005b50 <HAL_GPIO_WritePin>
    LCD_DC_H();
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001312:	481a      	ldr	r0, [pc, #104]	@ (800137c <lcd_clear_screen+0x150>)
 8001314:	f004 fc1c 	bl	8005b50 <HAL_GPIO_WritePin>
    // Send buffer multiple times to cover entire screen
    for (uint32_t i = 0; i < wCount; i += buf_size) {
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800131e:	e01d      	b.n	800135c <lcd_clear_screen+0x130>
        uint16_t remaining = (wCount - i) > buf_size ? buf_size : (wCount - i);
 8001320:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8001324:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8001328:	1ad2      	subs	r2, r2, r3
 800132a:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 800132e:	4293      	cmp	r3, r2
 8001330:	bf28      	it	cs
 8001332:	4613      	movcs	r3, r2
 8001334:	f8a7 3208 	strh.w	r3, [r7, #520]	@ 0x208
        HAL_SPI_Transmit(&hspi1, color_buf, remaining * 2, HAL_MAX_DELAY);
 8001338:	f8b7 3208 	ldrh.w	r3, [r7, #520]	@ 0x208
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	b29a      	uxth	r2, r3
 8001340:	f107 0108 	add.w	r1, r7, #8
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	480d      	ldr	r0, [pc, #52]	@ (8001380 <lcd_clear_screen+0x154>)
 800134a:	f005 f99a 	bl	8006682 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < wCount; i += buf_size) {
 800134e:	f8b7 320a 	ldrh.w	r3, [r7, #522]	@ 0x20a
 8001352:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001356:	4413      	add	r3, r2
 8001358:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800135c:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001360:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001364:	429a      	cmp	r2, r3
 8001366:	d3db      	bcc.n	8001320 <lcd_clear_screen+0xf4>
    }
    LCD_CS_H();
 8001368:	2201      	movs	r2, #1
 800136a:	2180      	movs	r1, #128	@ 0x80
 800136c:	4803      	ldr	r0, [pc, #12]	@ (800137c <lcd_clear_screen+0x150>)
 800136e:	f004 fbef 	bl	8005b50 <HAL_GPIO_WritePin>
}
 8001372:	bf00      	nop
 8001374:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40020400 	.word	0x40020400
 8001380:	200002bc 	.word	0x200002bc

08001384 <lcd_set_cursor>:
			parameter:
				 hwXpos: x axis position
				 hwYpos: y axis position
******************************************************************************/
void lcd_set_cursor(uint16_t hwXpos, uint16_t hwYpos)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	460a      	mov	r2, r1
 800138e:	80fb      	strh	r3, [r7, #6]
 8001390:	4613      	mov	r3, r2
 8001392:	80bb      	strh	r3, [r7, #4]
	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	2bef      	cmp	r3, #239	@ 0xef
 8001398:	d824      	bhi.n	80013e4 <lcd_set_cursor+0x60>
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013a0:	d220      	bcs.n	80013e4 <lcd_set_cursor+0x60>
	lcd_write_command(0x02, hwXpos >> 8);
	lcd_write_command(0x03, hwXpos & 0xFF);
	lcd_write_command(0x06, hwYpos >> 8);
	lcd_write_command(0x07, hwYpos & 0xFF);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 80013a2:	2100      	movs	r1, #0
 80013a4:	202a      	movs	r0, #42	@ 0x2a
 80013a6:	f7ff fdb3 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 80013aa:	2101      	movs	r1, #1
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff fdaf 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(hwXpos,LCD_DATA);
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2101      	movs	r1, #1
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fda9 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x2B,LCD_CMD);
 80013be:	2100      	movs	r1, #0
 80013c0:	202b      	movs	r0, #43	@ 0x2b
 80013c2:	f7ff fda5 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte((hwYpos>>8)&0xff,LCD_DATA);
 80013c6:	88bb      	ldrh	r3, [r7, #4]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2101      	movs	r1, #1
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fd9d 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(hwYpos&0xff,LCD_DATA);
 80013d6:	88bb      	ldrh	r3, [r7, #4]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2101      	movs	r1, #1
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fd97 	bl	8000f10 <lcd_write_byte>
 80013e2:	e000      	b.n	80013e6 <lcd_set_cursor+0x62>
		return;
 80013e4:	bf00      	nop
#endif
}
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <lcd_display_char>:
void lcd_display_char(	 uint16_t hwXpos,
                         uint16_t hwYpos,
                         uint8_t chChr,
                         uint8_t chSize,
                         uint16_t hwColor)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4604      	mov	r4, r0
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4623      	mov	r3, r4
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	4603      	mov	r3, r0
 8001400:	80bb      	strh	r3, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	70fb      	strb	r3, [r7, #3]
 8001406:	4613      	mov	r3, r2
 8001408:	70bb      	strb	r3, [r7, #2]
	uint8_t i, j, chTemp;
	uint16_t hwYpos0 = hwYpos, hwColorVal = 0;
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	817b      	strh	r3, [r7, #10]
 800140e:	2300      	movs	r3, #0
 8001410:	813b      	strh	r3, [r7, #8]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	2bef      	cmp	r3, #239	@ 0xef
 8001416:	f200 8095 	bhi.w	8001544 <lcd_display_char+0x158>
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001420:	f080 8090 	bcs.w	8001544 <lcd_display_char+0x158>
		return;
	}
#ifdef HX8347D_DEVICE

#elif defined ST7789_DEVICE
	lcd_write_byte(0x2A,LCD_CMD);
 8001424:	2100      	movs	r1, #0
 8001426:	202a      	movs	r0, #42	@ 0x2a
 8001428:	f7ff fd72 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x00,LCD_DATA);
 800142c:	2101      	movs	r1, #1
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff fd6e 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(hwXpos,LCD_DATA);
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2101      	movs	r1, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fd68 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte((hwXpos) >> 8,LCD_DATA);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2101      	movs	r1, #1
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fd60 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte((hwXpos) & 0xFF,LCD_DATA);
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2101      	movs	r1, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fd5a 	bl	8000f10 <lcd_write_byte>

	lcd_write_byte(0x2B,LCD_CMD);
 800145c:	2100      	movs	r1, #0
 800145e:	202b      	movs	r0, #43	@ 0x2b
 8001460:	f7ff fd56 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(hwYpos >> 8,LCD_DATA);
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	0a1b      	lsrs	r3, r3, #8
 8001468:	b29b      	uxth	r3, r3
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2101      	movs	r1, #1
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fd4e 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(hwYpos & 0xFF,LCD_DATA);
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fd48 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte((hwYpos) >> 8,LCD_DATA);
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b29b      	uxth	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fd40 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte((hwYpos) & 0xFF,LCD_DATA);
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2101      	movs	r1, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd3a 	bl	8000f10 <lcd_write_byte>
	lcd_write_byte(0x2C, LCD_CMD);
 800149c:	2100      	movs	r1, #0
 800149e:	202c      	movs	r0, #44	@ 0x2c
 80014a0:	f7ff fd36 	bl	8000f10 <lcd_write_byte>
#endif
    for (i = 0; i < chSize; i ++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e047      	b.n	800153a <lcd_display_char+0x14e>
				if (FONT_1206 == chSize) {
 80014aa:	78bb      	ldrb	r3, [r7, #2]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d10d      	bne.n	80014cc <lcd_display_char+0xe0>
					chTemp = c_chFont1206[chChr - 0x20][i];
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	f1a3 0220 	sub.w	r2, r3, #32
 80014b6:	7bf9      	ldrb	r1, [r7, #15]
 80014b8:	4824      	ldr	r0, [pc, #144]	@ (800154c <lcd_display_char+0x160>)
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4403      	add	r3, r0
 80014c4:	440b      	add	r3, r1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	737b      	strb	r3, [r7, #13]
 80014ca:	e00c      	b.n	80014e6 <lcd_display_char+0xfa>
				}
				else if (FONT_1608 == chSize) {
 80014cc:	78bb      	ldrb	r3, [r7, #2]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d109      	bne.n	80014e6 <lcd_display_char+0xfa>
					chTemp = c_chFont1608[chChr - 0x20][i];
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f1a3 0220 	sub.w	r2, r3, #32
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	491d      	ldr	r1, [pc, #116]	@ (8001550 <lcd_display_char+0x164>)
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	440a      	add	r2, r1
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	737b      	strb	r3, [r7, #13]
				}
        for (j = 0; j < 8; j ++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	73bb      	strb	r3, [r7, #14]
 80014ea:	e020      	b.n	800152e <lcd_display_char+0x142>
					if (chTemp & 0x80) {
 80014ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da07      	bge.n	8001504 <lcd_display_char+0x118>
						hwColorVal = hwColor;
 80014f4:	8c3b      	ldrh	r3, [r7, #32]
 80014f6:	813b      	strh	r3, [r7, #8]
						lcd_draw_dot(hwXpos, hwYpos, hwColorVal);
 80014f8:	893a      	ldrh	r2, [r7, #8]
 80014fa:	88b9      	ldrh	r1, [r7, #4]
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f874 	bl	80015ec <lcd_draw_dot>
					}
					chTemp <<= 1;
 8001504:	7b7b      	ldrb	r3, [r7, #13]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	737b      	strb	r3, [r7, #13]
					hwYpos ++;
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	3301      	adds	r3, #1
 800150e:	80bb      	strh	r3, [r7, #4]
					if ((hwYpos - hwYpos0) == chSize) {
 8001510:	88ba      	ldrh	r2, [r7, #4]
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	1ad2      	subs	r2, r2, r3
 8001516:	78bb      	ldrb	r3, [r7, #2]
 8001518:	429a      	cmp	r2, r3
 800151a:	d105      	bne.n	8001528 <lcd_display_char+0x13c>
						hwYpos = hwYpos0;
 800151c:	897b      	ldrh	r3, [r7, #10]
 800151e:	80bb      	strh	r3, [r7, #4]
						hwXpos ++;
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	3301      	adds	r3, #1
 8001524:	80fb      	strh	r3, [r7, #6]
						break;
 8001526:	e005      	b.n	8001534 <lcd_display_char+0x148>
        for (j = 0; j < 8; j ++) {
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	3301      	adds	r3, #1
 800152c:	73bb      	strb	r3, [r7, #14]
 800152e:	7bbb      	ldrb	r3, [r7, #14]
 8001530:	2b07      	cmp	r3, #7
 8001532:	d9db      	bls.n	80014ec <lcd_display_char+0x100>
    for (i = 0; i < chSize; i ++) {
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	3301      	adds	r3, #1
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	78bb      	ldrb	r3, [r7, #2]
 800153e:	429a      	cmp	r2, r3
 8001540:	d3b3      	bcc.n	80014aa <lcd_display_char+0xbe>
 8001542:	e000      	b.n	8001546 <lcd_display_char+0x15a>
		return;
 8001544:	bf00      	nop
					}
				}
    }
}
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	0800d900 	.word	0x0800d900
 8001550:	0800dd74 	.word	0x0800dd74

08001554 <lcd_display_string>:
			  hwColor: string color
******************************************************************************/
void lcd_display_string(	uint16_t hwXpos,uint16_t hwYpos,
													const uint8_t *pchString,
													uint8_t chSize,uint16_t hwColor)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b087      	sub	sp, #28
 8001558:	af02      	add	r7, sp, #8
 800155a:	60ba      	str	r2, [r7, #8]
 800155c:	461a      	mov	r2, r3
 800155e:	4603      	mov	r3, r0
 8001560:	81fb      	strh	r3, [r7, #14]
 8001562:	460b      	mov	r3, r1
 8001564:	81bb      	strh	r3, [r7, #12]
 8001566:	4613      	mov	r3, r2
 8001568:	71fb      	strb	r3, [r7, #7]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	2bef      	cmp	r3, #239	@ 0xef
 800156e:	d839      	bhi.n	80015e4 <lcd_display_string+0x90>
 8001570:	89bb      	ldrh	r3, [r7, #12]
 8001572:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001576:	d235      	bcs.n	80015e4 <lcd_display_string+0x90>
		return;
	}

    while (*pchString != '\0') {
 8001578:	e02f      	b.n	80015da <lcd_display_string+0x86>
        if (hwXpos > (LCD_WIDTH - chSize / 2)) {
 800157a:	89fa      	ldrh	r2, [r7, #14]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001586:	429a      	cmp	r2, r3
 8001588:	dd13      	ble.n	80015b2 <lcd_display_string+0x5e>
					hwXpos = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	81fb      	strh	r3, [r7, #14]
					hwYpos += chSize;
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	b29a      	uxth	r2, r3
 8001592:	89bb      	ldrh	r3, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	81bb      	strh	r3, [r7, #12]
					if (hwYpos > (LCD_HEIGHT - chSize)) {
 8001598:	89ba      	ldrh	r2, [r7, #12]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80015a0:	429a      	cmp	r2, r3
 80015a2:	dd06      	ble.n	80015b2 <lcd_display_string+0x5e>
						hwYpos = hwXpos = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	81fb      	strh	r3, [r7, #14]
 80015a8:	89fb      	ldrh	r3, [r7, #14]
 80015aa:	81bb      	strh	r3, [r7, #12]
						lcd_clear_screen(0x00);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fe3d 	bl	800122c <lcd_clear_screen>
					}
				}

        lcd_display_char(hwXpos, hwYpos, (uint8_t)*pchString, chSize, hwColor);
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	79fc      	ldrb	r4, [r7, #7]
 80015b8:	89b9      	ldrh	r1, [r7, #12]
 80015ba:	89f8      	ldrh	r0, [r7, #14]
 80015bc:	8c3b      	ldrh	r3, [r7, #32]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4623      	mov	r3, r4
 80015c2:	f7ff ff13 	bl	80013ec <lcd_display_char>
        hwXpos += chSize / 2;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	4413      	add	r3, r2
 80015d2:	81fb      	strh	r3, [r7, #14]
        pchString ++;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
    while (*pchString != '\0') {
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1cb      	bne.n	800157a <lcd_display_string+0x26>
 80015e2:	e000      	b.n	80015e6 <lcd_display_string+0x92>
		return;
 80015e4:	bf00      	nop
    }
}
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd90      	pop	{r4, r7, pc}

080015ec <lcd_draw_dot>:
				 hwXpos: x axis position
				 hwYpos: y axis position
				hwColor:	dot color
******************************************************************************/
void lcd_draw_dot(uint16_t hwXpos, uint16_t hwYpos, uint16_t hwColor)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
 80015f6:	460b      	mov	r3, r1
 80015f8:	80bb      	strh	r3, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	807b      	strh	r3, [r7, #2]
	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	2bef      	cmp	r3, #239	@ 0xef
 8001602:	d812      	bhi.n	800162a <lcd_draw_dot+0x3e>
 8001604:	88bb      	ldrh	r3, [r7, #4]
 8001606:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800160a:	d20e      	bcs.n	800162a <lcd_draw_dot+0x3e>
		return;
	}
	lcd_set_cursor(hwXpos, hwYpos);
 800160c:	88ba      	ldrh	r2, [r7, #4]
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff feb6 	bl	8001384 <lcd_set_cursor>
#ifdef HX8347D_DEVICE
	lcd_write_byte(0x22, LCD_CMD);
#elif defined ST7789_DEVICE
	lcd_write_byte(0x2C, LCD_CMD);
 8001618:	2100      	movs	r1, #0
 800161a:	202c      	movs	r0, #44	@ 0x2c
 800161c:	f7ff fc78 	bl	8000f10 <lcd_write_byte>
#endif
	lcd_write_word(hwColor);
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fca0 	bl	8000f68 <lcd_write_word>
 8001628:	e000      	b.n	800162c <lcd_draw_dot+0x40>
		return;
 800162a:	bf00      	nop

}
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <lcd_draw_line>:
				hwColor: line color
******************************************************************************/
void lcd_draw_line(		uint16_t hwXpos0, uint16_t hwYpos0,
                      uint16_t hwXpos1, uint16_t hwYpos1,
                      uint16_t hwColor)
{
 8001632:	b590      	push	{r4, r7, lr}
 8001634:	b08b      	sub	sp, #44	@ 0x2c
 8001636:	af00      	add	r7, sp, #0
 8001638:	4604      	mov	r4, r0
 800163a:	4608      	mov	r0, r1
 800163c:	4611      	mov	r1, r2
 800163e:	461a      	mov	r2, r3
 8001640:	4623      	mov	r3, r4
 8001642:	80fb      	strh	r3, [r7, #6]
 8001644:	4603      	mov	r3, r0
 8001646:	80bb      	strh	r3, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	803b      	strh	r3, [r7, #0]
	int x = hwXpos1 - hwXpos0;
 8001650:	887a      	ldrh	r2, [r7, #2]
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	623b      	str	r3, [r7, #32]
	int y = hwYpos1 - hwYpos0;
 8001658:	883a      	ldrh	r2, [r7, #0]
 800165a:	88bb      	ldrh	r3, [r7, #4]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	61fb      	str	r3, [r7, #28]
	int dx = abs(x), sx = hwXpos0 < hwXpos1 ? 1 : -1;
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	2b00      	cmp	r3, #0
 8001664:	bfb8      	it	lt
 8001666:	425b      	neglt	r3, r3
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	429a      	cmp	r2, r3
 8001670:	d201      	bcs.n	8001676 <lcd_draw_line+0x44>
 8001672:	2301      	movs	r3, #1
 8001674:	e001      	b.n	800167a <lcd_draw_line+0x48>
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	617b      	str	r3, [r7, #20]
	int dy = -abs(y), sy = hwYpos0 < hwYpos1 ? 1 : -1;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b00      	cmp	r3, #0
 8001680:	bfb8      	it	lt
 8001682:	425b      	neglt	r3, r3
 8001684:	425b      	negs	r3, r3
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	88ba      	ldrh	r2, [r7, #4]
 800168a:	883b      	ldrh	r3, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d201      	bcs.n	8001694 <lcd_draw_line+0x62>
 8001690:	2301      	movs	r3, #1
 8001692:	e001      	b.n	8001698 <lcd_draw_line+0x66>
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	60fb      	str	r3, [r7, #12]
	int err = dx + dy, e2;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4413      	add	r3, r2
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24

	if (hwXpos0 >= LCD_WIDTH || hwYpos0 >= LCD_HEIGHT || hwXpos1 >= LCD_WIDTH || hwYpos1 >= LCD_HEIGHT) {
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2bef      	cmp	r3, #239	@ 0xef
 80016a6:	d836      	bhi.n	8001716 <lcd_draw_line+0xe4>
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80016ae:	d232      	bcs.n	8001716 <lcd_draw_line+0xe4>
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	2bef      	cmp	r3, #239	@ 0xef
 80016b4:	d82f      	bhi.n	8001716 <lcd_draw_line+0xe4>
 80016b6:	883b      	ldrh	r3, [r7, #0]
 80016b8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80016bc:	d22b      	bcs.n	8001716 <lcd_draw_line+0xe4>
		return;
	}

    for (;;){
        lcd_draw_dot(hwXpos0, hwYpos0 , hwColor);
 80016be:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80016c0:	88b9      	ldrh	r1, [r7, #4]
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff91 	bl	80015ec <lcd_draw_dot>
        e2 = 2 * err;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) {
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	db0c      	blt.n	80016f2 <lcd_draw_line+0xc0>
            if (hwXpos0 == hwXpos1) break;
 80016d8:	88fa      	ldrh	r2, [r7, #6]
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d01c      	beq.n	800171a <lcd_draw_line+0xe8>
            err += dy; hwXpos0 += sx;
 80016e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4413      	add	r3, r2
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	4413      	add	r3, r2
 80016f0:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 <= dx) {
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dce1      	bgt.n	80016be <lcd_draw_line+0x8c>
            if (hwYpos0 == hwYpos1) break;
 80016fa:	88ba      	ldrh	r2, [r7, #4]
 80016fc:	883b      	ldrh	r3, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d00d      	beq.n	800171e <lcd_draw_line+0xec>
            err += dx; hwYpos0 += sy;
 8001702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	4413      	add	r3, r2
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	b29a      	uxth	r2, r3
 800170e:	88bb      	ldrh	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	80bb      	strh	r3, [r7, #4]
        lcd_draw_dot(hwXpos0, hwYpos0 , hwColor);
 8001714:	e7d3      	b.n	80016be <lcd_draw_line+0x8c>
		return;
 8001716:	bf00      	nop
 8001718:	e002      	b.n	8001720 <lcd_draw_line+0xee>
            if (hwXpos0 == hwXpos1) break;
 800171a:	bf00      	nop
 800171c:	e000      	b.n	8001720 <lcd_draw_line+0xee>
            if (hwYpos0 == hwYpos1) break;
 800171e:	bf00      	nop
        }
    }
}
 8001720:	372c      	adds	r7, #44	@ 0x2c
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}

08001726 <lcd_draw_circle>:
			 hwRadius: circle radius
				hwColor: cirlce color
******************************************************************************/
void lcd_draw_circle(		uint16_t hwXpos, uint16_t hwYpos,
                        uint16_t hwRadius,uint16_t hwColor)
{
 8001726:	b590      	push	{r4, r7, lr}
 8001728:	b087      	sub	sp, #28
 800172a:	af00      	add	r7, sp, #0
 800172c:	4604      	mov	r4, r0
 800172e:	4608      	mov	r0, r1
 8001730:	4611      	mov	r1, r2
 8001732:	461a      	mov	r2, r3
 8001734:	4623      	mov	r3, r4
 8001736:	80fb      	strh	r3, [r7, #6]
 8001738:	4603      	mov	r3, r0
 800173a:	80bb      	strh	r3, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	803b      	strh	r3, [r7, #0]
	int x = -hwRadius, y = 0, err = 2 - 2 * hwRadius, e2;
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	425b      	negs	r3, r3
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	887b      	ldrh	r3, [r7, #2]
 8001750:	f1c3 0301 	rsb	r3, r3, #1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	2bef      	cmp	r3, #239	@ 0xef
 800175c:	d866      	bhi.n	800182c <lcd_draw_circle+0x106>
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001764:	d262      	bcs.n	800182c <lcd_draw_circle+0x106>
		return;
	}

    do {
        lcd_draw_dot(hwXpos - x, hwYpos + y, hwColor);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	b29b      	uxth	r3, r3
 800176a:	88fa      	ldrh	r2, [r7, #6]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	b298      	uxth	r0, r3
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	b29a      	uxth	r2, r3
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	b29b      	uxth	r3, r3
 800177a:	883a      	ldrh	r2, [r7, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff ff35 	bl	80015ec <lcd_draw_dot>
        lcd_draw_dot(hwXpos + x, hwYpos + y, hwColor);
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	b29a      	uxth	r2, r3
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	4413      	add	r3, r2
 800178a:	b298      	uxth	r0, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	b29a      	uxth	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	b29b      	uxth	r3, r3
 8001796:	883a      	ldrh	r2, [r7, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff ff27 	bl	80015ec <lcd_draw_dot>
        lcd_draw_dot(hwXpos + x, hwYpos - y, hwColor);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4413      	add	r3, r2
 80017a6:	b298      	uxth	r0, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	883a      	ldrh	r2, [r7, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff ff19 	bl	80015ec <lcd_draw_dot>
        lcd_draw_dot(hwXpos - x, hwYpos - y, hwColor);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	88fa      	ldrh	r2, [r7, #6]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	b298      	uxth	r0, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	88ba      	ldrh	r2, [r7, #4]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	883a      	ldrh	r2, [r7, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff ff0b 	bl	80015ec <lcd_draw_dot>
        e2 = err;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	429a      	cmp	r2, r3
 80017e0:	dc13      	bgt.n	800180a <lcd_draw_circle+0xe4>
            err += ++ y * 2 + 1;
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	3301      	adds	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	3301      	adds	r3, #1
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4413      	add	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) e2 = 0;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	425b      	negs	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d105      	bne.n	800180a <lcd_draw_circle+0xe4>
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	429a      	cmp	r2, r3
 8001804:	dc01      	bgt.n	800180a <lcd_draw_circle+0xe4>
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
        }
        if(e2 > x) err += ++ x * 2 + 1;
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	429a      	cmp	r2, r3
 8001810:	dd08      	ble.n	8001824 <lcd_draw_circle+0xfe>
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	3301      	adds	r3, #1
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
    } while(x <= 0);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dd9d      	ble.n	8001766 <lcd_draw_circle+0x40>
 800182a:	e000      	b.n	800182e <lcd_draw_circle+0x108>
		return;
 800182c:	bf00      	nop
}
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd90      	pop	{r4, r7, pc}

08001834 <lcd_fill_rect>:
			  hwColor: rectangle color
******************************************************************************/
void lcd_fill_rect(uint16_t hwXpos,
                   uint16_t hwYpos, uint16_t hwWidth,
                   uint16_t hwHeight,uint16_t hwColor)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	4604      	mov	r4, r0
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4623      	mov	r3, r4
 8001844:	80fb      	strh	r3, [r7, #6]
 8001846:	4603      	mov	r3, r0
 8001848:	80bb      	strh	r3, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	807b      	strh	r3, [r7, #2]
 800184e:	4613      	mov	r3, r2
 8001850:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2bef      	cmp	r3, #239	@ 0xef
 8001856:	d824      	bhi.n	80018a2 <lcd_fill_rect+0x6e>
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800185e:	d220      	bcs.n	80018a2 <lcd_fill_rect+0x6e>
		return;
	}

	for(i = 0; i < hwHeight; i ++){
 8001860:	2300      	movs	r3, #0
 8001862:	81fb      	strh	r3, [r7, #14]
 8001864:	e018      	b.n	8001898 <lcd_fill_rect+0x64>
		for(j = 0; j < hwWidth; j ++){
 8001866:	2300      	movs	r3, #0
 8001868:	81bb      	strh	r3, [r7, #12]
 800186a:	e00e      	b.n	800188a <lcd_fill_rect+0x56>
			lcd_draw_dot(hwXpos + j, hwYpos + i, hwColor);
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	89bb      	ldrh	r3, [r7, #12]
 8001870:	4413      	add	r3, r2
 8001872:	b298      	uxth	r0, r3
 8001874:	88ba      	ldrh	r2, [r7, #4]
 8001876:	89fb      	ldrh	r3, [r7, #14]
 8001878:	4413      	add	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	8c3a      	ldrh	r2, [r7, #32]
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff feb4 	bl	80015ec <lcd_draw_dot>
		for(j = 0; j < hwWidth; j ++){
 8001884:	89bb      	ldrh	r3, [r7, #12]
 8001886:	3301      	adds	r3, #1
 8001888:	81bb      	strh	r3, [r7, #12]
 800188a:	89ba      	ldrh	r2, [r7, #12]
 800188c:	887b      	ldrh	r3, [r7, #2]
 800188e:	429a      	cmp	r2, r3
 8001890:	d3ec      	bcc.n	800186c <lcd_fill_rect+0x38>
	for(i = 0; i < hwHeight; i ++){
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	3301      	adds	r3, #1
 8001896:	81fb      	strh	r3, [r7, #14]
 8001898:	89fa      	ldrh	r2, [r7, #14]
 800189a:	883b      	ldrh	r3, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d3e2      	bcc.n	8001866 <lcd_fill_rect+0x32>
 80018a0:	e000      	b.n	80018a4 <lcd_fill_rect+0x70>
		return;
 80018a2:	bf00      	nop
		}
	}
}
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <lcd_draw_v_line>:
			 hwHeight: line height
			  hwColor: vertical linc color
******************************************************************************/
void lcd_draw_v_line(		uint16_t hwXpos,uint16_t hwYpos,
                        uint16_t hwHeight,uint16_t hwColor)
{
 80018aa:	b590      	push	{r4, r7, lr}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4604      	mov	r4, r0
 80018b2:	4608      	mov	r0, r1
 80018b4:	4611      	mov	r1, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	4623      	mov	r3, r4
 80018ba:	80fb      	strh	r3, [r7, #6]
 80018bc:	4603      	mov	r3, r0
 80018be:	80bb      	strh	r3, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	803b      	strh	r3, [r7, #0]
	uint16_t i, y1 = MIN(hwYpos + hwHeight, LCD_HEIGHT - 1);
 80018c8:	88ba      	ldrh	r2, [r7, #4]
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	4413      	add	r3, r2
 80018ce:	f240 123f 	movw	r2, #319	@ 0x13f
 80018d2:	4293      	cmp	r3, r2
 80018d4:	bfa8      	it	ge
 80018d6:	4613      	movge	r3, r2
 80018d8:	81bb      	strh	r3, [r7, #12]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	2bef      	cmp	r3, #239	@ 0xef
 80018de:	d814      	bhi.n	800190a <lcd_draw_v_line+0x60>
 80018e0:	88bb      	ldrh	r3, [r7, #4]
 80018e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80018e6:	d210      	bcs.n	800190a <lcd_draw_v_line+0x60>
		return;
	}

    for (i = hwYpos; i < y1; i ++) {
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	81fb      	strh	r3, [r7, #14]
 80018ec:	e008      	b.n	8001900 <lcd_draw_v_line+0x56>
        lcd_draw_dot(hwXpos, i, hwColor);
 80018ee:	883a      	ldrh	r2, [r7, #0]
 80018f0:	89f9      	ldrh	r1, [r7, #14]
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fe79 	bl	80015ec <lcd_draw_dot>
    for (i = hwYpos; i < y1; i ++) {
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	3301      	adds	r3, #1
 80018fe:	81fb      	strh	r3, [r7, #14]
 8001900:	89fa      	ldrh	r2, [r7, #14]
 8001902:	89bb      	ldrh	r3, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3f2      	bcc.n	80018ee <lcd_draw_v_line+0x44>
 8001908:	e000      	b.n	800190c <lcd_draw_v_line+0x62>
		return;
 800190a:	bf00      	nop
    }
}
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bd90      	pop	{r4, r7, pc}

08001912 <lcd_draw_h_line>:
			  hwWidth: line width
			  hwColor: horizonal linc color
******************************************************************************/
void lcd_draw_h_line(		uint16_t hwXpos, uint16_t hwYpos,
                        uint16_t hwWidth,uint16_t hwColor)
{
 8001912:	b590      	push	{r4, r7, lr}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	4604      	mov	r4, r0
 800191a:	4608      	mov	r0, r1
 800191c:	4611      	mov	r1, r2
 800191e:	461a      	mov	r2, r3
 8001920:	4623      	mov	r3, r4
 8001922:	80fb      	strh	r3, [r7, #6]
 8001924:	4603      	mov	r3, r0
 8001926:	80bb      	strh	r3, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
 800192c:	4613      	mov	r3, r2
 800192e:	803b      	strh	r3, [r7, #0]
	uint16_t i, x1 = MIN(hwXpos + hwWidth, LCD_WIDTH - 1);
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	4413      	add	r3, r2
 8001936:	2bef      	cmp	r3, #239	@ 0xef
 8001938:	bfa8      	it	ge
 800193a:	23ef      	movge	r3, #239	@ 0xef
 800193c:	81bb      	strh	r3, [r7, #12]

	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	2bef      	cmp	r3, #239	@ 0xef
 8001942:	d814      	bhi.n	800196e <lcd_draw_h_line+0x5c>
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800194a:	d210      	bcs.n	800196e <lcd_draw_h_line+0x5c>
		return;
	}

    for (i = hwXpos; i < x1; i ++) {
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	81fb      	strh	r3, [r7, #14]
 8001950:	e008      	b.n	8001964 <lcd_draw_h_line+0x52>
        lcd_draw_dot(i, hwYpos, hwColor);
 8001952:	883a      	ldrh	r2, [r7, #0]
 8001954:	88b9      	ldrh	r1, [r7, #4]
 8001956:	89fb      	ldrh	r3, [r7, #14]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe47 	bl	80015ec <lcd_draw_dot>
    for (i = hwXpos; i < x1; i ++) {
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	3301      	adds	r3, #1
 8001962:	81fb      	strh	r3, [r7, #14]
 8001964:	89fa      	ldrh	r2, [r7, #14]
 8001966:	89bb      	ldrh	r3, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d3f2      	bcc.n	8001952 <lcd_draw_h_line+0x40>
 800196c:	e000      	b.n	8001970 <lcd_draw_h_line+0x5e>
		return;
 800196e:	bf00      	nop
    }
}
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}

08001976 <lcd_draw_rect>:
			  hwColor: rectangle color
******************************************************************************/
void lcd_draw_rect(		uint16_t hwXpos,
                      uint16_t hwYpos,uint16_t hwWidth,
                      uint16_t hwHeight,uint16_t hwColor)
{
 8001976:	b590      	push	{r4, r7, lr}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	4604      	mov	r4, r0
 800197e:	4608      	mov	r0, r1
 8001980:	4611      	mov	r1, r2
 8001982:	461a      	mov	r2, r3
 8001984:	4623      	mov	r3, r4
 8001986:	80fb      	strh	r3, [r7, #6]
 8001988:	4603      	mov	r3, r0
 800198a:	80bb      	strh	r3, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	803b      	strh	r3, [r7, #0]
	if (hwXpos >= LCD_WIDTH || hwYpos >= LCD_HEIGHT) {
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	2bef      	cmp	r3, #239	@ 0xef
 8001998:	d824      	bhi.n	80019e4 <lcd_draw_rect+0x6e>
 800199a:	88bb      	ldrh	r3, [r7, #4]
 800199c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80019a0:	d220      	bcs.n	80019e4 <lcd_draw_rect+0x6e>
		return;
	}

	lcd_draw_h_line(hwXpos, hwYpos, hwWidth, hwColor);
 80019a2:	8b3b      	ldrh	r3, [r7, #24]
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	88b9      	ldrh	r1, [r7, #4]
 80019a8:	88f8      	ldrh	r0, [r7, #6]
 80019aa:	f7ff ffb2 	bl	8001912 <lcd_draw_h_line>
	lcd_draw_h_line(hwXpos, hwYpos + hwHeight, hwWidth, hwColor);
 80019ae:	88ba      	ldrh	r2, [r7, #4]
 80019b0:	883b      	ldrh	r3, [r7, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	b299      	uxth	r1, r3
 80019b6:	8b3b      	ldrh	r3, [r7, #24]
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	88f8      	ldrh	r0, [r7, #6]
 80019bc:	f7ff ffa9 	bl	8001912 <lcd_draw_h_line>
	lcd_draw_v_line(hwXpos, hwYpos, hwHeight, hwColor);
 80019c0:	8b3b      	ldrh	r3, [r7, #24]
 80019c2:	883a      	ldrh	r2, [r7, #0]
 80019c4:	88b9      	ldrh	r1, [r7, #4]
 80019c6:	88f8      	ldrh	r0, [r7, #6]
 80019c8:	f7ff ff6f 	bl	80018aa <lcd_draw_v_line>
	lcd_draw_v_line(hwXpos + hwWidth, hwYpos, hwHeight + 1, hwColor);
 80019cc:	88fa      	ldrh	r2, [r7, #6]
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	4413      	add	r3, r2
 80019d2:	b298      	uxth	r0, r3
 80019d4:	883b      	ldrh	r3, [r7, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	8b3b      	ldrh	r3, [r7, #24]
 80019dc:	88b9      	ldrh	r1, [r7, #4]
 80019de:	f7ff ff64 	bl	80018aa <lcd_draw_v_line>
 80019e2:	e000      	b.n	80019e6 <lcd_draw_rect+0x70>
		return;
 80019e4:	bf00      	nop
}
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd90      	pop	{r4, r7, pc}

080019ec <vPortSuppressTicksAndSleep>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN VPORT_SUPPORT_TICKS_AND_SLEEP */
__weak void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  // Generated when configUSE_TICKLESS_IDLE == 2.
  // Function called in tasks.c (in portTASK_FUNCTION).
  // TO BE COMPLETED or TO BE REPLACED by a user one, overriding that weak one.
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4907      	ldr	r1, [pc, #28]	@ (8001a38 <__NVIC_EnableIRQ+0x38>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db12      	blt.n	8001a74 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	490a      	ldr	r1, [pc, #40]	@ (8001a80 <__NVIC_DisableIRQ+0x44>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	3320      	adds	r3, #32
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a68:	f3bf 8f4f 	dsb	sy
}
 8001a6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a6e:	f3bf 8f6f 	isb	sy
}
 8001a72:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <lcd_set_rotation>:
/* USER CODE BEGIN PFP */
void ProcessMenuTouch(void);
void drawZones(void);
// Rotate LCD
void lcd_set_rotation(uint8_t mode)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    switch(mode) {
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d817      	bhi.n	8001ac4 <lcd_set_rotation+0x40>
 8001a94:	a201      	add	r2, pc, #4	@ (adr r2, 8001a9c <lcd_set_rotation+0x18>)
 8001a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9a:	bf00      	nop
 8001a9c:	08001aad 	.word	0x08001aad
 8001aa0:	08001ab3 	.word	0x08001ab3
 8001aa4:	08001ab9 	.word	0x08001ab9
 8001aa8:	08001abf 	.word	0x08001abf
        case 0: val = MADCTL_PORTRAIT;      break;
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e00a      	b.n	8001ac8 <lcd_set_rotation+0x44>
        case 1: val = MADCTL_LANDSCAPE;     break;
 8001ab2:	2360      	movs	r3, #96	@ 0x60
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e007      	b.n	8001ac8 <lcd_set_rotation+0x44>
        case 2: val = MADCTL_INV_PORTRAIT;  break;
 8001ab8:	23c0      	movs	r3, #192	@ 0xc0
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e004      	b.n	8001ac8 <lcd_set_rotation+0x44>
        case 3: val = MADCTL_INV_LANDSCAPE; break;
 8001abe:	23a0      	movs	r3, #160	@ 0xa0
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	e001      	b.n	8001ac8 <lcd_set_rotation+0x44>
        default: val = MADCTL_PORTRAIT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
    }
    lcd_write_command(0x36, val);
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	4619      	mov	r1, r3
 8001acc:	2036      	movs	r0, #54	@ 0x36
 8001ace:	f7ff fa73 	bl	8000fb8 <lcd_write_command>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop

08001adc <Draw_BaseScreen>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// -----------LCD Display ------------------------------------------
//######################################################################
void Draw_BaseScreen(void)
{
 8001adc:	b590      	push	{r4, r7, lr}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af02      	add	r7, sp, #8
│              └───────────────┘               │
│                                              │
└──────────────────────────────────────────────┘
 * */

    lcd_clear_screen(0xFFFF);    // Clear entire screen to white
 8001ae2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ae6:	f7ff fba1 	bl	800122c <lcd_clear_screen>
    lcd_display_string(30, 30, (uint8_t *)"DO AN: TH HE THONG NHUNG", FONT_1608, 0x001F);
 8001aea:	231f      	movs	r3, #31
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2310      	movs	r3, #16
 8001af0:	4a2e      	ldr	r2, [pc, #184]	@ (8001bac <Draw_BaseScreen+0xd0>)
 8001af2:	211e      	movs	r1, #30
 8001af4:	201e      	movs	r0, #30
 8001af6:	f7ff fd2d 	bl	8001554 <lcd_display_string>
    lcd_display_string(88, 56, (uint8_t *)"Nhom: 13", FONT_1608, 0x001F);
 8001afa:	231f      	movs	r3, #31
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2310      	movs	r3, #16
 8001b00:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb0 <Draw_BaseScreen+0xd4>)
 8001b02:	2138      	movs	r1, #56	@ 0x38
 8001b04:	2058      	movs	r0, #88	@ 0x58
 8001b06:	f7ff fd25 	bl	8001554 <lcd_display_string>
    lcd_draw_h_line(0, 82, SCREEN_W, 0x001F);
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	22f0      	movs	r2, #240	@ 0xf0
 8001b0e:	2152      	movs	r1, #82	@ 0x52
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fefe 	bl	8001912 <lcd_draw_h_line>
    lcd_display_string(20, 92, (uint8_t *)"Thanh vien:", FONT_1608, 0x001F);
 8001b16:	231f      	movs	r3, #31
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <Draw_BaseScreen+0xd8>)
 8001b1e:	215c      	movs	r1, #92	@ 0x5c
 8001b20:	2014      	movs	r0, #20
 8001b22:	f7ff fd17 	bl	8001554 <lcd_display_string>
    lcd_display_string(20, 112, (uint8_t *)"Vo Thanh Nhan   22200114", FONT_1608, 0x001F);
 8001b26:	231f      	movs	r3, #31
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	4a22      	ldr	r2, [pc, #136]	@ (8001bb8 <Draw_BaseScreen+0xdc>)
 8001b2e:	2170      	movs	r1, #112	@ 0x70
 8001b30:	2014      	movs	r0, #20
 8001b32:	f7ff fd0f 	bl	8001554 <lcd_display_string>
    lcd_display_string(20, 132, (uint8_t *)"Le Tien Thang   22200144", FONT_1608, 0x001F);
 8001b36:	231f      	movs	r3, #31
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bbc <Draw_BaseScreen+0xe0>)
 8001b3e:	2184      	movs	r1, #132	@ 0x84
 8001b40:	2014      	movs	r0, #20
 8001b42:	f7ff fd07 	bl	8001554 <lcd_display_string>
    lcd_display_string(20, 152, (uint8_t *)"Lam Minh Quan   22200131", FONT_1608, 0x001F);
 8001b46:	231f      	movs	r3, #31
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc0 <Draw_BaseScreen+0xe4>)
 8001b4e:	2198      	movs	r1, #152	@ 0x98
 8001b50:	2014      	movs	r0, #20
 8001b52:	f7ff fcff 	bl	8001554 <lcd_display_string>
    lcd_draw_h_line(0, 178, SCREEN_W, 0x001F);
 8001b56:	231f      	movs	r3, #31
 8001b58:	22f0      	movs	r2, #240	@ 0xf0
 8001b5a:	21b2      	movs	r1, #178	@ 0xb2
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fed8 	bl	8001912 <lcd_draw_h_line>
    lcd_display_string(20, 200, (uint8_t *)"Nhan [NEXT] de tiep tuc...", FONT_1608, 0x001F);
 8001b62:	231f      	movs	r3, #31
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2310      	movs	r3, #16
 8001b68:	4a16      	ldr	r2, [pc, #88]	@ (8001bc4 <Draw_BaseScreen+0xe8>)
 8001b6a:	21c8      	movs	r1, #200	@ 0xc8
 8001b6c:	2014      	movs	r0, #20
 8001b6e:	f7ff fcf1 	bl	8001554 <lcd_display_string>

    //Draw NEXT button centered at bottom
    const uint16_t btnX = 80;
 8001b72:	2350      	movs	r3, #80	@ 0x50
 8001b74:	80fb      	strh	r3, [r7, #6]
    const uint16_t btnY = 250;
 8001b76:	23fa      	movs	r3, #250	@ 0xfa
 8001b78:	80bb      	strh	r3, [r7, #4]
    const uint16_t btnW = 80;
 8001b7a:	2350      	movs	r3, #80	@ 0x50
 8001b7c:	807b      	strh	r3, [r7, #2]
    const uint16_t btnH = 40;
 8001b7e:	2328      	movs	r3, #40	@ 0x28
 8001b80:	803b      	strh	r3, [r7, #0]
    // Draw blue border for NEXT box
    lcd_draw_rect(btnX, btnY, btnW, btnH, 0x001F);
 8001b82:	883b      	ldrh	r3, [r7, #0]
 8001b84:	887a      	ldrh	r2, [r7, #2]
 8001b86:	88b9      	ldrh	r1, [r7, #4]
 8001b88:	88f8      	ldrh	r0, [r7, #6]
 8001b8a:	241f      	movs	r4, #31
 8001b8c:	9400      	str	r4, [sp, #0]
 8001b8e:	f7ff fef2 	bl	8001976 <lcd_draw_rect>
    lcd_display_string(104, 262, (uint8_t *)"NEXT", FONT_1608, 0x001F);
 8001b92:	231f      	movs	r3, #31
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2310      	movs	r3, #16
 8001b98:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc8 <Draw_BaseScreen+0xec>)
 8001b9a:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001b9e:	2068      	movs	r0, #104	@ 0x68
 8001ba0:	f7ff fcd8 	bl	8001554 <lcd_display_string>
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd90      	pop	{r4, r7, pc}
 8001bac:	0800d624 	.word	0x0800d624
 8001bb0:	0800d640 	.word	0x0800d640
 8001bb4:	0800d64c 	.word	0x0800d64c
 8001bb8:	0800d658 	.word	0x0800d658
 8001bbc:	0800d674 	.word	0x0800d674
 8001bc0:	0800d690 	.word	0x0800d690
 8001bc4:	0800d6ac 	.word	0x0800d6ac
 8001bc8:	0800d6c8 	.word	0x0800d6c8

08001bcc <ShowMainMenu>:
void ShowMainMenu(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af02      	add	r7, sp, #8
│                          └──────────┘  │
└────────────────────────────────────────┘

 * */
    // 1) Clear background
    lcd_clear_screen(BLUE);
 8001bd2:	201f      	movs	r0, #31
 8001bd4:	f7ff fb2a 	bl	800122c <lcd_clear_screen>

    // 2) Draw group info box
    lcd_fill_rect(GROUP_BOX_X, GROUP_BOX_Y,
 8001bd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	231e      	movs	r3, #30
 8001be0:	2291      	movs	r2, #145	@ 0x91
 8001be2:	210a      	movs	r1, #10
 8001be4:	200a      	movs	r0, #10
 8001be6:	f7ff fe25 	bl	8001834 <lcd_fill_rect>
                  GROUP_BOX_W, GROUP_BOX_H,
                  WHITE);
    lcd_display_string(GROUP_BOX_X + 5,
 8001bea:	2300      	movs	r3, #0
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2310      	movs	r3, #16
 8001bf0:	4a5e      	ldr	r2, [pc, #376]	@ (8001d6c <ShowMainMenu+0x1a0>)
 8001bf2:	2112      	movs	r1, #18
 8001bf4:	200f      	movs	r0, #15
 8001bf6:	f7ff fcad 	bl	8001554 <lcd_display_string>
                       (uint8_t *)" Nhom: [nhom 13]",
                       FONT_1608,
                       BLACK);

    // 3) Draw Zone 0 (LED task)
    if (FLAG_LED)
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001d70 <ShowMainMenu+0x1a4>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <ShowMainMenu+0x4c>
        lcd_fill_rect(ZONE0_X1, ZONE0_Y1, ZONE_W, ZONE_H, GREEN);
 8001c04:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2346      	movs	r3, #70	@ 0x46
 8001c0c:	225a      	movs	r2, #90	@ 0x5a
 8001c0e:	2132      	movs	r1, #50	@ 0x32
 8001c10:	2014      	movs	r0, #20
 8001c12:	f7ff fe0f 	bl	8001834 <lcd_fill_rect>
 8001c16:	e008      	b.n	8001c2a <ShowMainMenu+0x5e>
    else
        lcd_fill_rect(ZONE0_X1, ZONE0_Y1, ZONE_W, ZONE_H, WHITE);
 8001c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2346      	movs	r3, #70	@ 0x46
 8001c20:	225a      	movs	r2, #90	@ 0x5a
 8001c22:	2132      	movs	r1, #50	@ 0x32
 8001c24:	2014      	movs	r0, #20
 8001c26:	f7ff fe05 	bl	8001834 <lcd_fill_rect>
    lcd_display_string(ZONE0_X1 + 10,
                       ZONE0_Y1 + 25,
                       (uint8_t *)"Task 02-1",
                       FONT_1608,
                       FLAG_LED ? WHITE : BLACK);
 8001c2a:	4b51      	ldr	r3, [pc, #324]	@ (8001d70 <ShowMainMenu+0x1a4>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b2db      	uxtb	r3, r3
    lcd_display_string(ZONE0_X1 + 10,
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <ShowMainMenu+0x6e>
 8001c34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c38:	e000      	b.n	8001c3c <ShowMainMenu+0x70>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2310      	movs	r3, #16
 8001c40:	4a4c      	ldr	r2, [pc, #304]	@ (8001d74 <ShowMainMenu+0x1a8>)
 8001c42:	214b      	movs	r1, #75	@ 0x4b
 8001c44:	201e      	movs	r0, #30
 8001c46:	f7ff fc85 	bl	8001554 <lcd_display_string>

    // 4) Draw Zone 1 (CAN task)
    if (FLAG_CAN)
 8001c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001d78 <ShowMainMenu+0x1ac>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d009      	beq.n	8001c68 <ShowMainMenu+0x9c>
        lcd_fill_rect(ZONE1_X1, ZONE1_Y1, ZONE_W, ZONE_H, GREEN);
 8001c54:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2346      	movs	r3, #70	@ 0x46
 8001c5c:	225a      	movs	r2, #90	@ 0x5a
 8001c5e:	2132      	movs	r1, #50	@ 0x32
 8001c60:	2082      	movs	r0, #130	@ 0x82
 8001c62:	f7ff fde7 	bl	8001834 <lcd_fill_rect>
 8001c66:	e008      	b.n	8001c7a <ShowMainMenu+0xae>
    else
        lcd_fill_rect(ZONE1_X1, ZONE1_Y1, ZONE_W, ZONE_H, WHITE);
 8001c68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2346      	movs	r3, #70	@ 0x46
 8001c70:	225a      	movs	r2, #90	@ 0x5a
 8001c72:	2132      	movs	r1, #50	@ 0x32
 8001c74:	2082      	movs	r0, #130	@ 0x82
 8001c76:	f7ff fddd 	bl	8001834 <lcd_fill_rect>
    lcd_display_string(ZONE1_X1 + 10,
                       ZONE1_Y1 + 25,
                       (uint8_t *)"Task 02-2",
                       FONT_1608,
                       FLAG_CAN ? WHITE : BLACK);
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d78 <ShowMainMenu+0x1ac>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
    lcd_display_string(ZONE1_X1 + 10,
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <ShowMainMenu+0xbe>
 8001c84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c88:	e000      	b.n	8001c8c <ShowMainMenu+0xc0>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2310      	movs	r3, #16
 8001c90:	4a3a      	ldr	r2, [pc, #232]	@ (8001d7c <ShowMainMenu+0x1b0>)
 8001c92:	214b      	movs	r1, #75	@ 0x4b
 8001c94:	208c      	movs	r0, #140	@ 0x8c
 8001c96:	f7ff fc5d 	bl	8001554 <lcd_display_string>

    // 5) Draw Zone 2 (Disp CAN task)
    if (FLAG_Disp)
 8001c9a:	4b39      	ldr	r3, [pc, #228]	@ (8001d80 <ShowMainMenu+0x1b4>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <ShowMainMenu+0xec>
        lcd_fill_rect(ZONE2_X1, ZONE2_Y1, ZONE_W, ZONE_H, GREEN);
 8001ca4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2346      	movs	r3, #70	@ 0x46
 8001cac:	225a      	movs	r2, #90	@ 0x5a
 8001cae:	218c      	movs	r1, #140	@ 0x8c
 8001cb0:	2014      	movs	r0, #20
 8001cb2:	f7ff fdbf 	bl	8001834 <lcd_fill_rect>
 8001cb6:	e008      	b.n	8001cca <ShowMainMenu+0xfe>
    else
        lcd_fill_rect(ZONE2_X1, ZONE2_Y1, ZONE_W, ZONE_H, WHITE);
 8001cb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2346      	movs	r3, #70	@ 0x46
 8001cc0:	225a      	movs	r2, #90	@ 0x5a
 8001cc2:	218c      	movs	r1, #140	@ 0x8c
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	f7ff fdb5 	bl	8001834 <lcd_fill_rect>
    lcd_display_string(ZONE2_X1 + 10,
                       ZONE2_Y1 + 25,
                       (uint8_t *)"Task 02-3",
                       FONT_1608,
                       FLAG_Disp ? WHITE : BLACK);
 8001cca:	4b2d      	ldr	r3, [pc, #180]	@ (8001d80 <ShowMainMenu+0x1b4>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b2db      	uxtb	r3, r3
    lcd_display_string(ZONE2_X1 + 10,
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <ShowMainMenu+0x10e>
 8001cd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001cd8:	e000      	b.n	8001cdc <ShowMainMenu+0x110>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2310      	movs	r3, #16
 8001ce0:	4a28      	ldr	r2, [pc, #160]	@ (8001d84 <ShowMainMenu+0x1b8>)
 8001ce2:	21a5      	movs	r1, #165	@ 0xa5
 8001ce4:	201e      	movs	r0, #30
 8001ce6:	f7ff fc35 	bl	8001554 <lcd_display_string>

    // 6) Draw Zone 3 (DAC task)
    if (FLAG_DAC)
 8001cea:	4b27      	ldr	r3, [pc, #156]	@ (8001d88 <ShowMainMenu+0x1bc>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <ShowMainMenu+0x13c>
        lcd_fill_rect(ZONE3_X1, ZONE3_Y1, ZONE_W, ZONE_H, GREEN);
 8001cf4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2346      	movs	r3, #70	@ 0x46
 8001cfc:	225a      	movs	r2, #90	@ 0x5a
 8001cfe:	218c      	movs	r1, #140	@ 0x8c
 8001d00:	2082      	movs	r0, #130	@ 0x82
 8001d02:	f7ff fd97 	bl	8001834 <lcd_fill_rect>
 8001d06:	e008      	b.n	8001d1a <ShowMainMenu+0x14e>
    else
        lcd_fill_rect(ZONE3_X1, ZONE3_Y1, ZONE_W, ZONE_H, WHITE);
 8001d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2346      	movs	r3, #70	@ 0x46
 8001d10:	225a      	movs	r2, #90	@ 0x5a
 8001d12:	218c      	movs	r1, #140	@ 0x8c
 8001d14:	2082      	movs	r0, #130	@ 0x82
 8001d16:	f7ff fd8d 	bl	8001834 <lcd_fill_rect>
    lcd_display_string(ZONE3_X1 + 10,
                       ZONE3_Y1 + 25,
                       (uint8_t *)"Task 02-4",
                       FONT_1608,
                       FLAG_DAC ? WHITE : BLACK);
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <ShowMainMenu+0x1bc>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
    lcd_display_string(ZONE3_X1 + 10,
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <ShowMainMenu+0x15e>
 8001d24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d28:	e000      	b.n	8001d2c <ShowMainMenu+0x160>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2310      	movs	r3, #16
 8001d30:	4a16      	ldr	r2, [pc, #88]	@ (8001d8c <ShowMainMenu+0x1c0>)
 8001d32:	21a5      	movs	r1, #165	@ 0xa5
 8001d34:	208c      	movs	r0, #140	@ 0x8c
 8001d36:	f7ff fc0d 	bl	8001554 <lcd_display_string>

    // 7) Draw Back button
    lcd_fill_rect(BACK_X, BACK_Y, BACK_W, BACK_H, WHITE);
 8001d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	231e      	movs	r3, #30
 8001d42:	2246      	movs	r2, #70	@ 0x46
 8001d44:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001d48:	20a0      	movs	r0, #160	@ 0xa0
 8001d4a:	f7ff fd73 	bl	8001834 <lcd_fill_rect>
    lcd_display_string(BACK_X + 10,
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2310      	movs	r3, #16
 8001d54:	4a0e      	ldr	r2, [pc, #56]	@ (8001d90 <ShowMainMenu+0x1c4>)
 8001d56:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001d5a:	20aa      	movs	r0, #170	@ 0xaa
 8001d5c:	f7ff fbfa 	bl	8001554 <lcd_display_string>
                       (uint8_t *)"[Back]",
                       FONT_1608,
                       BLACK);

    // Delay to allow other tasks to run
    osDelay(1);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f006 f81f 	bl	8007da4 <osDelay>
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	0800d6d0 	.word	0x0800d6d0
 8001d70:	2000037a 	.word	0x2000037a
 8001d74:	0800d6e4 	.word	0x0800d6e4
 8001d78:	2000037b 	.word	0x2000037b
 8001d7c:	0800d6f0 	.word	0x0800d6f0
 8001d80:	2000037c 	.word	0x2000037c
 8001d84:	0800d6fc 	.word	0x0800d6fc
 8001d88:	2000037d 	.word	0x2000037d
 8001d8c:	0800d708 	.word	0x0800d708
 8001d90:	0800d714 	.word	0x0800d714

08001d94 <Draw_Task02_3_Screen>:

void Draw_Task02_3_Screen(const uint8_t *buf)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	@ 0x38
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	6078      	str	r0, [r7, #4]
    char text[32];
    uint8_t groupId = buf[0];
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    float temperature;
    memcpy(&temperature, &buf[1], sizeof(float));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3301      	adds	r3, #1
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60bb      	str	r3, [r7, #8]
    // Clear screen to white
    lcd_clear_screen(0xFFFF);
 8001dac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001db0:	f7ff fa3c 	bl	800122c <lcd_clear_screen>
    lcd_display_string(60, 10, (uint8_t *)"TASK 02-3", FONT_1608, 0x0000);
 8001db4:	2300      	movs	r3, #0
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2310      	movs	r3, #16
 8001dba:	4a21      	ldr	r2, [pc, #132]	@ (8001e40 <Draw_Task02_3_Screen+0xac>)
 8001dbc:	210a      	movs	r1, #10
 8001dbe:	203c      	movs	r0, #60	@ 0x3c
 8001dc0:	f7ff fbc8 	bl	8001554 <lcd_display_string>
    lcd_draw_rect(20, 50, 200, 150, 0x001F);  // Blue border
 8001dc4:	231f      	movs	r3, #31
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2396      	movs	r3, #150	@ 0x96
 8001dca:	22c8      	movs	r2, #200	@ 0xc8
 8001dcc:	2132      	movs	r1, #50	@ 0x32
 8001dce:	2014      	movs	r0, #20
 8001dd0:	f7ff fdd1 	bl	8001976 <lcd_draw_rect>
    snprintf(text, sizeof(text), "Nhom: %02d", groupId);
 8001dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dd8:	f107 000c 	add.w	r0, r7, #12
 8001ddc:	4a19      	ldr	r2, [pc, #100]	@ (8001e44 <Draw_Task02_3_Screen+0xb0>)
 8001dde:	2120      	movs	r1, #32
 8001de0:	f009 fa8a 	bl	800b2f8 <sniprintf>
    lcd_display_string(30, 75, (uint8_t *)text, FONT_1608, 0x001F);
 8001de4:	f107 020c 	add.w	r2, r7, #12
 8001de8:	231f      	movs	r3, #31
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2310      	movs	r3, #16
 8001dee:	214b      	movs	r1, #75	@ 0x4b
 8001df0:	201e      	movs	r0, #30
 8001df2:	f7ff fbaf 	bl	8001554 <lcd_display_string>
    snprintf(text, sizeof(text), "Temp: %.1f C", temperature);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fba5 	bl	8000548 <__aeabi_f2d>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	f107 000c 	add.w	r0, r7, #12
 8001e06:	e9cd 2300 	strd	r2, r3, [sp]
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e48 <Draw_Task02_3_Screen+0xb4>)
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	f009 fa73 	bl	800b2f8 <sniprintf>
    lcd_display_string(30, 110, (uint8_t *)text, FONT_1608, 0x001F);
 8001e12:	f107 020c 	add.w	r2, r7, #12
 8001e16:	231f      	movs	r3, #31
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	216e      	movs	r1, #110	@ 0x6e
 8001e1e:	201e      	movs	r0, #30
 8001e20:	f7ff fb98 	bl	8001554 <lcd_display_string>
    lcd_display_string(40, 220, (uint8_t *)"(3 s) Returning...", FONT_1608, 0x7BEF);
 8001e24:	f647 33ef 	movw	r3, #31727	@ 0x7bef
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2310      	movs	r3, #16
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <Draw_Task02_3_Screen+0xb8>)
 8001e2e:	21dc      	movs	r1, #220	@ 0xdc
 8001e30:	2028      	movs	r0, #40	@ 0x28
 8001e32:	f7ff fb8f 	bl	8001554 <lcd_display_string>
}
 8001e36:	bf00      	nop
 8001e38:	3730      	adds	r7, #48	@ 0x30
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	0800d71c 	.word	0x0800d71c
 8001e44:	0800d728 	.word	0x0800d728
 8001e48:	0800d734 	.word	0x0800d734
 8001e4c:	0800d744 	.word	0x0800d744

08001e50 <UpdateZoneDisplay>:
// ---------------------------------------------------------------------

// -----------Touch Processor ------------------------------------------
//######################################################################
void UpdateZoneDisplay(uint8_t idx,uint16_t x, uint16_t y, const char *label, volatile bool *flagPtr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	81bb      	strh	r3, [r7, #12]
 8001e60:	4613      	mov	r3, r2
 8001e62:	817b      	strh	r3, [r7, #10]
    // Set the flag based on zoneActive[idx]
    *flagPtr = zoneActive[idx];
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	4a17      	ldr	r2, [pc, #92]	@ (8001ec4 <UpdateZoneDisplay+0x74>)
 8001e68:	5cd2      	ldrb	r2, [r2, r3]
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	701a      	strb	r2, [r3, #0]
    // Fill the zone rectangle: green if active, white if not
    lcd_fill_rect(x, y, ZONE_W, ZONE_H, zoneActive[idx] ? GREEN : WHITE);
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	4a14      	ldr	r2, [pc, #80]	@ (8001ec4 <UpdateZoneDisplay+0x74>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <UpdateZoneDisplay+0x2e>
 8001e78:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e7c:	e001      	b.n	8001e82 <UpdateZoneDisplay+0x32>
 8001e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e82:	8979      	ldrh	r1, [r7, #10]
 8001e84:	89b8      	ldrh	r0, [r7, #12]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2346      	movs	r3, #70	@ 0x46
 8001e8a:	225a      	movs	r2, #90	@ 0x5a
 8001e8c:	f7ff fcd2 	bl	8001834 <lcd_fill_rect>
    uint16_t fg = zoneActive[idx] ? WHITE : BLACK;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec4 <UpdateZoneDisplay+0x74>)
 8001e94:	5cd3      	ldrb	r3, [r2, r3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <UpdateZoneDisplay+0x50>
 8001e9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e9e:	e000      	b.n	8001ea2 <UpdateZoneDisplay+0x52>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	82fb      	strh	r3, [r7, #22]
    lcd_display_string(x + 10, y + 25, (uint8_t *)label, FONT_1608, fg);
 8001ea4:	89bb      	ldrh	r3, [r7, #12]
 8001ea6:	330a      	adds	r3, #10
 8001ea8:	b298      	uxth	r0, r3
 8001eaa:	897b      	ldrh	r3, [r7, #10]
 8001eac:	3319      	adds	r3, #25
 8001eae:	b299      	uxth	r1, r3
 8001eb0:	8afb      	ldrh	r3, [r7, #22]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2310      	movs	r3, #16
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	f7ff fb4c 	bl	8001554 <lcd_display_string>
}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000374 	.word	0x20000374

08001ec8 <toggleZone>:

void toggleZone(uint8_t idx)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b096      	sub	sp, #88	@ 0x58
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
    if (idx>=4) return;
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d863      	bhi.n	8001fa0 <toggleZone+0xd8>
    zoneActive[idx] = !zoneActive[idx];
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4a33      	ldr	r2, [pc, #204]	@ (8001fa8 <toggleZone+0xe0>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f083 0301 	eor.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f002 0201 	and.w	r2, r2, #1
 8001ef6:	b2d1      	uxtb	r1, r2
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa8 <toggleZone+0xe0>)
 8001efa:	54d1      	strb	r1, [r2, r3]
    switch (idx)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d82e      	bhi.n	8001f60 <toggleZone+0x98>
 8001f02:	a201      	add	r2, pc, #4	@ (adr r2, 8001f08 <toggleZone+0x40>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f19 	.word	0x08001f19
 8001f0c:	08001f2b 	.word	0x08001f2b
 8001f10:	08001f3d 	.word	0x08001f3d
 8001f14:	08001f4f 	.word	0x08001f4f
    {
        case 0:
            UpdateZoneDisplay(0, ZONE0_X1, ZONE0_Y1, "Task 02-1", &FLAG_LED);
 8001f18:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <toggleZone+0xe4>)
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <toggleZone+0xe8>)
 8001f1e:	2232      	movs	r2, #50	@ 0x32
 8001f20:	2114      	movs	r1, #20
 8001f22:	2000      	movs	r0, #0
 8001f24:	f7ff ff94 	bl	8001e50 <UpdateZoneDisplay>

            break;
 8001f28:	e01b      	b.n	8001f62 <toggleZone+0x9a>
        case 1:
            UpdateZoneDisplay(1, ZONE1_X1, ZONE1_Y1, "Task 02-2", &FLAG_CAN);
 8001f2a:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <toggleZone+0xec>)
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4b22      	ldr	r3, [pc, #136]	@ (8001fb8 <toggleZone+0xf0>)
 8001f30:	2232      	movs	r2, #50	@ 0x32
 8001f32:	2182      	movs	r1, #130	@ 0x82
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff ff8b 	bl	8001e50 <UpdateZoneDisplay>
            break;
 8001f3a:	e012      	b.n	8001f62 <toggleZone+0x9a>
        case 2:
            UpdateZoneDisplay(2, ZONE2_X1, ZONE2_Y1, "Task 02-3", &FLAG_Disp);
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <toggleZone+0xf4>)
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <toggleZone+0xf8>)
 8001f42:	228c      	movs	r2, #140	@ 0x8c
 8001f44:	2114      	movs	r1, #20
 8001f46:	2002      	movs	r0, #2
 8001f48:	f7ff ff82 	bl	8001e50 <UpdateZoneDisplay>
            break;
 8001f4c:	e009      	b.n	8001f62 <toggleZone+0x9a>
        case 3:
            UpdateZoneDisplay(3, ZONE3_X1, ZONE3_Y1, "Task 02-4", &FLAG_DAC);
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <toggleZone+0xfc>)
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <toggleZone+0x100>)
 8001f54:	228c      	movs	r2, #140	@ 0x8c
 8001f56:	2182      	movs	r1, #130	@ 0x82
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f7ff ff79 	bl	8001e50 <UpdateZoneDisplay>
            break;
 8001f5e:	e000      	b.n	8001f62 <toggleZone+0x9a>
        default:
            break;
 8001f60:	bf00      	nop
    }

    // debug UART
    char msg[64];
    int len = snprintf(msg,sizeof(msg),"%s %s\r\n",zoneNames[idx], zoneActive[idx]?"ON":"OFF");
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4a19      	ldr	r2, [pc, #100]	@ (8001fcc <toggleZone+0x104>)
 8001f66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	490e      	ldr	r1, [pc, #56]	@ (8001fa8 <toggleZone+0xe0>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <toggleZone+0xb0>
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <toggleZone+0x108>)
 8001f76:	e000      	b.n	8001f7a <toggleZone+0xb2>
 8001f78:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <toggleZone+0x10c>)
 8001f7a:	f107 000c 	add.w	r0, r7, #12
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <toggleZone+0x110>)
 8001f84:	2140      	movs	r1, #64	@ 0x40
 8001f86:	f009 f9b7 	bl	800b2f8 <sniprintf>
 8001f8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
    HAL_UART_Transmit(&huart4,(uint8_t*)msg,len,HAL_MAX_DELAY);
 8001f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f107 010c 	add.w	r1, r7, #12
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295
 8001f98:	4810      	ldr	r0, [pc, #64]	@ (8001fdc <toggleZone+0x114>)
 8001f9a:	f005 fa27 	bl	80073ec <HAL_UART_Transmit>
 8001f9e:	e000      	b.n	8001fa2 <toggleZone+0xda>
    if (idx>=4) return;
 8001fa0:	bf00      	nop
}
 8001fa2:	3750      	adds	r7, #80	@ 0x50
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000374 	.word	0x20000374
 8001fac:	2000037a 	.word	0x2000037a
 8001fb0:	0800d6e4 	.word	0x0800d6e4
 8001fb4:	2000037b 	.word	0x2000037b
 8001fb8:	0800d6f0 	.word	0x0800d6f0
 8001fbc:	2000037c 	.word	0x2000037c
 8001fc0:	0800d6fc 	.word	0x0800d6fc
 8001fc4:	2000037d 	.word	0x2000037d
 8001fc8:	0800d708 	.word	0x0800d708
 8001fcc:	2000000c 	.word	0x2000000c
 8001fd0:	0800d758 	.word	0x0800d758
 8001fd4:	0800d75c 	.word	0x0800d75c
 8001fd8:	0800d760 	.word	0x0800d760
 8001fdc:	20000314 	.word	0x20000314

08001fe0 <readInternalTempRaw>:
// ---------------------------------------------------------------------


// -----------Chip's Temperature----------------------------------------
//######################################################################
uint16_t readInternalTempRaw(void){ // Read ADC
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  HAL_ADC_Start(&hadc1);
 8001fe6:	480a      	ldr	r0, [pc, #40]	@ (8002010 <readInternalTempRaw+0x30>)
 8001fe8:	f001 ffb0 	bl	8003f4c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	4807      	ldr	r0, [pc, #28]	@ (8002010 <readInternalTempRaw+0x30>)
 8001ff2:	f002 f8b0 	bl	8004156 <HAL_ADC_PollForConversion>
  uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8001ff6:	4806      	ldr	r0, [pc, #24]	@ (8002010 <readInternalTempRaw+0x30>)
 8001ff8:	f002 f938 	bl	800426c <HAL_ADC_GetValue>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	80fb      	strh	r3, [r7, #6]
  HAL_ADC_Stop(&hadc1);
 8002000:	4803      	ldr	r0, [pc, #12]	@ (8002010 <readInternalTempRaw+0x30>)
 8002002:	f002 f875 	bl	80040f0 <HAL_ADC_Stop>
  return raw;
 8002006:	88fb      	ldrh	r3, [r7, #6]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000210 	.word	0x20000210

08002014 <getChipTemperature>:
float getChipTemperature(void){ //converting adc to temp
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  uint16_t raw = readInternalTempRaw();
 800201a:	f7ff ffe1 	bl	8001fe0 <readInternalTempRaw>
 800201e:	4603      	mov	r3, r0
 8002020:	80fb      	strh	r3, [r7, #6]
  uint16_t cal30  = * (uint16_t*)0x1FFF7A2C;
 8002022:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <getChipTemperature+0x54>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	80bb      	strh	r3, [r7, #4]
  uint16_t cal110 = * (uint16_t*)0x1FFF7A2E;
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <getChipTemperature+0x58>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	807b      	strh	r3, [r7, #2]
  return ((float)(raw - cal30) * 80.0f) / (float)(cal110 - cal30) + 30.0f;
 800202e:	88fa      	ldrh	r2, [r7, #6]
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002070 <getChipTemperature+0x5c>
 8002040:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002044:	887a      	ldrh	r2, [r7, #2]
 8002046:	88bb      	ldrh	r3, [r7, #4]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002056:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800205a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800205e:	eeb0 0a67 	vmov.f32	s0, s15
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	1fff7a2c 	.word	0x1fff7a2c
 800206c:	1fff7a2e 	.word	0x1fff7a2e
 8002070:	42a00000 	.word	0x42a00000

08002074 <storeLastCan>:
// -----------CAN Protocol ---------------------------------------------
//######################################################################
uint8_t lastCanBuf[8];
int    lastCanLen;

void storeLastCan(uint8_t *buf,int len){
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  memcpy(lastCanBuf,buf,len);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4804      	ldr	r0, [pc, #16]	@ (8002098 <storeLastCan+0x24>)
 8002086:	f009 fa30 	bl	800b4ea <memcpy>
  lastCanLen = len;
 800208a:	4a04      	ldr	r2, [pc, #16]	@ (800209c <storeLastCan+0x28>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6013      	str	r3, [r2, #0]
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000390 	.word	0x20000390
 800209c:	20000398 	.word	0x20000398

080020a0 <getLastCan>:
void getLastCan(uint8_t *buf,int *len){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  memcpy(buf,lastCanBuf,lastCanLen);
 80020aa:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <getLastCan+0x28>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4906      	ldr	r1, [pc, #24]	@ (80020cc <getLastCan+0x2c>)
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f009 fa19 	bl	800b4ea <memcpy>
  *len = lastCanLen;
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <getLastCan+0x28>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	601a      	str	r2, [r3, #0]
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000398 	.word	0x20000398
 80020cc:	20000390 	.word	0x20000390

080020d0 <DWT_Delay_Init>:

// ------------Install the tone for the DAC-----------------------------
//######################################################################

static void DWT_Delay_Init(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
    // Enable DWT counter for microsecond delays
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <DWT_Delay_Init+0x38>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <DWT_Delay_Init+0x1c>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <DWT_Delay_Init+0x38>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a08      	ldr	r2, [pc, #32]	@ (8002108 <DWT_Delay_Init+0x38>)
 80020e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ea:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80020ec:	4b07      	ldr	r3, [pc, #28]	@ (800210c <DWT_Delay_Init+0x3c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	605a      	str	r2, [r3, #4]
    DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <DWT_Delay_Init+0x3c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a05      	ldr	r2, [pc, #20]	@ (800210c <DWT_Delay_Init+0x3c>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6013      	str	r3, [r2, #0]
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000edf0 	.word	0xe000edf0
 800210c:	e0001000 	.word	0xe0001000

08002110 <DWT_Delay_us>:

static void DWT_Delay_us(uint32_t microseconds)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    // Busy‐wait for the specified number of microseconds
    uint32_t start  = DWT->CYCCNT;
 8002118:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <DWT_Delay_us+0x40>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = (SystemCoreClock / 1000000U) * microseconds;
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <DWT_Delay_us+0x44>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <DWT_Delay_us+0x48>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0c9a      	lsrs	r2, r3, #18
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 8002132:	bf00      	nop
 8002134:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <DWT_Delay_us+0x40>)
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	429a      	cmp	r2, r3
 8002140:	d8f8      	bhi.n	8002134 <DWT_Delay_us+0x24>
}
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e0001000 	.word	0xe0001000
 8002154:	2000001c 	.word	0x2000001c
 8002158:	431bde83 	.word	0x431bde83

0800215c <playToneDAC>:

static void playToneDAC(uint16_t noteFreq, uint32_t durationMs)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	80fb      	strh	r3, [r7, #6]
    // Generate a square wave on DAC1 channel 2 (PA5) at the specified frequency
    if (noteFreq == 0)
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d106      	bne.n	800217c <playToneDAC+0x20>
    {
        // Silence if frequency is zero
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 800216e:	2300      	movs	r3, #0
 8002170:	2200      	movs	r2, #0
 8002172:	2110      	movs	r1, #16
 8002174:	481d      	ldr	r0, [pc, #116]	@ (80021ec <playToneDAC+0x90>)
 8002176:	f003 fab4 	bl	80056e2 <HAL_DAC_SetValue>
        return;
 800217a:	e033      	b.n	80021e4 <playToneDAC+0x88>
    }

    // Calculate half‐period in microseconds
    uint32_t half_us = 500000U / noteFreq;
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <playToneDAC+0x94>)
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	613b      	str	r3, [r7, #16]
    uint32_t t0      = HAL_GetTick();
 8002186:	f001 fe91 	bl	8003eac <HAL_GetTick>
 800218a:	60f8      	str	r0, [r7, #12]
    uint32_t elapsed = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

    while (elapsed < durationMs)
 8002190:	e01c      	b.n	80021cc <playToneDAC+0x70>
    {
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095);
 8002192:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002196:	2200      	movs	r2, #0
 8002198:	2110      	movs	r1, #16
 800219a:	4814      	ldr	r0, [pc, #80]	@ (80021ec <playToneDAC+0x90>)
 800219c:	f003 faa1 	bl	80056e2 <HAL_DAC_SetValue>
        DWT_Delay_us(half_us);
 80021a0:	6938      	ldr	r0, [r7, #16]
 80021a2:	f7ff ffb5 	bl	8002110 <DWT_Delay_us>

        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80021a6:	2300      	movs	r3, #0
 80021a8:	2200      	movs	r2, #0
 80021aa:	2110      	movs	r1, #16
 80021ac:	480f      	ldr	r0, [pc, #60]	@ (80021ec <playToneDAC+0x90>)
 80021ae:	f003 fa98 	bl	80056e2 <HAL_DAC_SetValue>
        DWT_Delay_us(half_us);
 80021b2:	6938      	ldr	r0, [r7, #16]
 80021b4:	f7ff ffac 	bl	8002110 <DWT_Delay_us>

        elapsed = HAL_GetTick() - t0;
 80021b8:	f001 fe78 	bl	8003eac <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
        if (elapsed >= durationMs) break;
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d204      	bcs.n	80021d6 <playToneDAC+0x7a>
    while (elapsed < durationMs)
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d3de      	bcc.n	8002192 <playToneDAC+0x36>
 80021d4:	e000      	b.n	80021d8 <playToneDAC+0x7c>
        if (elapsed >= durationMs) break;
 80021d6:	bf00      	nop
    }

    // Ensure DAC output is low at the end
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 80021d8:	2300      	movs	r3, #0
 80021da:	2200      	movs	r2, #0
 80021dc:	2110      	movs	r1, #16
 80021de:	4803      	ldr	r0, [pc, #12]	@ (80021ec <playToneDAC+0x90>)
 80021e0:	f003 fa7f 	bl	80056e2 <HAL_DAC_SetValue>
}
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200002a8 	.word	0x200002a8
 80021f0:	0007a120 	.word	0x0007a120

080021f4 <sleepMode_init>:


static void sleepMode_init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	@ 0x28
 80021f8:	af00      	add	r7, sp, #0
    HAL_SuspendTick();                         // pause HAL tick
 80021fa:	f001 f9fb 	bl	80035f4 <HAL_SuspendTick>

    SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk; // stop SysTick
 80021fe:	4b2f      	ldr	r3, [pc, #188]	@ (80022bc <sleepMode_init+0xc8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a2e      	ldr	r2, [pc, #184]	@ (80022bc <sleepMode_init+0xc8>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6013      	str	r3, [r2, #0]
    NVIC_DisableIRQ(SysTick_IRQn);
 800220a:	f04f 30ff 	mov.w	r0, #4294967295
 800220e:	f7ff fc15 	bl	8001a3c <__NVIC_DisableIRQ>

    // disable unused IRQs
    NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8002212:	2014      	movs	r0, #20
 8002214:	f7ff fc12 	bl	8001a3c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(CAN2_RX0_IRQn);
 8002218:	2040      	movs	r0, #64	@ 0x40
 800221a:	f7ff fc0f 	bl	8001a3c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA1_Stream1_IRQn);
 800221e:	200c      	movs	r0, #12
 8002220:	f7ff fc0c 	bl	8001a3c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(UART4_IRQn);
 8002224:	2034      	movs	r0, #52	@ 0x34
 8002226:	f7ff fc09 	bl	8001a3c <__NVIC_DisableIRQ>

    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);      // clear PB4 EXTI flag
 800222a:	4b25      	ldr	r3, [pc, #148]	@ (80022c0 <sleepMode_init+0xcc>)
 800222c:	2210      	movs	r2, #16
 800222e:	615a      	str	r2, [r3, #20]

    // disable CAN interrupts
    HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002230:	2102      	movs	r1, #2
 8002232:	4824      	ldr	r0, [pc, #144]	@ (80022c4 <sleepMode_init+0xd0>)
 8002234:	f002 fea4 	bl	8004f80 <HAL_CAN_DeactivateNotification>
    HAL_CAN_DeactivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002238:	2102      	movs	r1, #2
 800223a:	4823      	ldr	r0, [pc, #140]	@ (80022c8 <sleepMode_init+0xd4>)
 800223c:	f002 fea0 	bl	8004f80 <HAL_CAN_DeactivateNotification>

    // drain CAN2 FIFO0
    {
        CAN_RxHeaderTypeDef tmpHdr;
        uint8_t tmpBuf[8];
        while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0) {
 8002240:	e006      	b.n	8002250 <sleepMode_init+0x5c>
            HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &tmpHdr, tmpBuf);
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	f107 020c 	add.w	r2, r7, #12
 8002248:	2100      	movs	r1, #0
 800224a:	481f      	ldr	r0, [pc, #124]	@ (80022c8 <sleepMode_init+0xd4>)
 800224c:	f002 fd28 	bl	8004ca0 <HAL_CAN_GetRxMessage>
        while (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0) {
 8002250:	2100      	movs	r1, #0
 8002252:	481d      	ldr	r0, [pc, #116]	@ (80022c8 <sleepMode_init+0xd4>)
 8002254:	f002 fe46 	bl	8004ee4 <HAL_CAN_GetRxFifoFillLevel>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f1      	bne.n	8002242 <sleepMode_init+0x4e>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800225e:	b672      	cpsid	i
}
 8002260:	bf00      	nop
        }
    }

    __disable_irq();
    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002262:	2101      	movs	r1, #1
 8002264:	2000      	movs	r0, #0
 8002266:	f003 fcbf 	bl	8005be8 <HAL_PWR_EnterSLEEPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 800226a:	b662      	cpsie	i
}
 800226c:	bf00      	nop
    __enable_irq();

    // wake-up: restore ticks and IRQs
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800226e:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <sleepMode_init+0xc8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a12      	ldr	r2, [pc, #72]	@ (80022bc <sleepMode_init+0xc8>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(SysTick_IRQn);
 800227a:	f04f 30ff 	mov.w	r0, #4294967295
 800227e:	f7ff fbbf 	bl	8001a00 <__NVIC_EnableIRQ>
    HAL_ResumeTick();
 8002282:	f001 f9c9 	bl	8003618 <HAL_ResumeTick>

    NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002286:	2014      	movs	r0, #20
 8002288:	f7ff fbba 	bl	8001a00 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800228c:	2040      	movs	r0, #64	@ 0x40
 800228e:	f7ff fbb7 	bl	8001a00 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002292:	200c      	movs	r0, #12
 8002294:	f7ff fbb4 	bl	8001a00 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(UART4_IRQn);
 8002298:	2034      	movs	r0, #52	@ 0x34
 800229a:	f7ff fbb1 	bl	8001a00 <__NVIC_EnableIRQ>

    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800229e:	2102      	movs	r1, #2
 80022a0:	4808      	ldr	r0, [pc, #32]	@ (80022c4 <sleepMode_init+0xd0>)
 80022a2:	f002 fe47 	bl	8004f34 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80022a6:	2102      	movs	r1, #2
 80022a8:	4807      	ldr	r0, [pc, #28]	@ (80022c8 <sleepMode_init+0xd4>)
 80022aa:	f002 fe43 	bl	8004f34 <HAL_CAN_ActivateNotification>

    WKUP = 1;
 80022ae:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <sleepMode_init+0xd8>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
}
 80022b4:	bf00      	nop
 80022b6:	3728      	adds	r7, #40	@ 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	e000e010 	.word	0xe000e010
 80022c0:	40013c00 	.word	0x40013c00
 80022c4:	20000258 	.word	0x20000258
 80022c8:	20000280 	.word	0x20000280
 80022cc:	2000037e 	.word	0x2000037e

080022d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022d6:	f001 fdb3 	bl	8003e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022da:	f000 f88f 	bl	80023fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022de:	f000 fa91 	bl	8002804 <MX_GPIO_Init>
  MX_SPI1_Init();
 80022e2:	f000 fa2f 	bl	8002744 <MX_SPI1_Init>
  MX_CAN1_Init();
 80022e6:	f000 f945 	bl	8002574 <MX_CAN1_Init>
  MX_CAN2_Init();
 80022ea:	f000 f9a1 	bl	8002630 <MX_CAN2_Init>
  MX_DAC_Init();
 80022ee:	f000 f9ff 	bl	80026f0 <MX_DAC_Init>
  MX_UART4_Init();
 80022f2:	f000 fa5d 	bl	80027b0 <MX_UART4_Init>
  MX_ADC1_Init();
 80022f6:	f000 f8eb 	bl	80024d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80022fa:	f7fe fe8f 	bl	800101c <lcd_init>
  tp_init();
 80022fe:	f001 fae3 	bl	80038c8 <tp_init>
  tp_adjust();
 8002302:	f001 fbe5 	bl	8003ad0 <tp_adjust>
  tp_dialog();
 8002306:	f001 fc1d 	bl	8003b44 <tp_dialog>
  lcd_set_rotation(2);
 800230a:	2002      	movs	r0, #2
 800230c:	f7ff fbba 	bl	8001a84 <lcd_set_rotation>

  FLAG_Base = true;// Ensure Base screen shows first
 8002310:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <main+0xd4>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
  FLAG_Menu = false;
 8002316:	4b24      	ldr	r3, [pc, #144]	@ (80023a8 <main+0xd8>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]

  const char msg[] = "Project Start: \r\n";    // Send "project start" via UART for testing
 800231c:	4b23      	ldr	r3, [pc, #140]	@ (80023ac <main+0xdc>)
 800231e:	1d3c      	adds	r4, r7, #4
 8002320:	461d      	mov	r5, r3
 8002322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002326:	682b      	ldr	r3, [r5, #0]
 8002328:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800232a:	1d39      	adds	r1, r7, #4
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	2211      	movs	r2, #17
 8002332:	481f      	ldr	r0, [pc, #124]	@ (80023b0 <main+0xe0>)
 8002334:	f005 f85a 	bl	80073ec <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002338:	f005 fc58 	bl	8007bec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01_Display */
  Task01_DisplayHandle = osThreadNew(StartTask01_Display, NULL, &Task01_Display_attributes);
 800233c:	4a1d      	ldr	r2, [pc, #116]	@ (80023b4 <main+0xe4>)
 800233e:	2100      	movs	r1, #0
 8002340:	481d      	ldr	r0, [pc, #116]	@ (80023b8 <main+0xe8>)
 8002342:	f005 fc9d 	bl	8007c80 <osThreadNew>
 8002346:	4603      	mov	r3, r0
 8002348:	4a1c      	ldr	r2, [pc, #112]	@ (80023bc <main+0xec>)
 800234a:	6013      	str	r3, [r2, #0]

  /* creation of Task02_Touch */
  Task02_TouchHandle = osThreadNew(StartTask02_Touch, NULL, &Task02_Touch_attributes);
 800234c:	4a1c      	ldr	r2, [pc, #112]	@ (80023c0 <main+0xf0>)
 800234e:	2100      	movs	r1, #0
 8002350:	481c      	ldr	r0, [pc, #112]	@ (80023c4 <main+0xf4>)
 8002352:	f005 fc95 	bl	8007c80 <osThreadNew>
 8002356:	4603      	mov	r3, r0
 8002358:	4a1b      	ldr	r2, [pc, #108]	@ (80023c8 <main+0xf8>)
 800235a:	6013      	str	r3, [r2, #0]

  /* creation of Task_LED */
  Task_LEDHandle = osThreadNew(StartTask_LED, NULL, &Task_LED_attributes);
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <main+0xfc>)
 800235e:	2100      	movs	r1, #0
 8002360:	481b      	ldr	r0, [pc, #108]	@ (80023d0 <main+0x100>)
 8002362:	f005 fc8d 	bl	8007c80 <osThreadNew>
 8002366:	4603      	mov	r3, r0
 8002368:	4a1a      	ldr	r2, [pc, #104]	@ (80023d4 <main+0x104>)
 800236a:	6013      	str	r3, [r2, #0]

  /* creation of Task_CAN */
  Task_CANHandle = osThreadNew(StartTask_CAN, NULL, &Task_CAN_attributes);
 800236c:	4a1a      	ldr	r2, [pc, #104]	@ (80023d8 <main+0x108>)
 800236e:	2100      	movs	r1, #0
 8002370:	481a      	ldr	r0, [pc, #104]	@ (80023dc <main+0x10c>)
 8002372:	f005 fc85 	bl	8007c80 <osThreadNew>
 8002376:	4603      	mov	r3, r0
 8002378:	4a19      	ldr	r2, [pc, #100]	@ (80023e0 <main+0x110>)
 800237a:	6013      	str	r3, [r2, #0]

  /* creation of Task_DispCAN */
  Task_DispCANHandle = osThreadNew(StartTask_DispCAN, NULL, &Task_DispCAN_attributes);
 800237c:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <main+0x114>)
 800237e:	2100      	movs	r1, #0
 8002380:	4819      	ldr	r0, [pc, #100]	@ (80023e8 <main+0x118>)
 8002382:	f005 fc7d 	bl	8007c80 <osThreadNew>
 8002386:	4603      	mov	r3, r0
 8002388:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <main+0x11c>)
 800238a:	6013      	str	r3, [r2, #0]

  /* creation of Task_DAC */
  Task_DACHandle = osThreadNew(StartTask_DAC, NULL, &Task_DAC_attributes);
 800238c:	4a18      	ldr	r2, [pc, #96]	@ (80023f0 <main+0x120>)
 800238e:	2100      	movs	r1, #0
 8002390:	4818      	ldr	r0, [pc, #96]	@ (80023f4 <main+0x124>)
 8002392:	f005 fc75 	bl	8007c80 <osThreadNew>
 8002396:	4603      	mov	r3, r0
 8002398:	4a17      	ldr	r2, [pc, #92]	@ (80023f8 <main+0x128>)
 800239a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800239c:	f005 fc4a 	bl	8007c34 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <main+0xd0>
 80023a4:	20000008 	.word	0x20000008
 80023a8:	20000009 	.word	0x20000009
 80023ac:	0800d768 	.word	0x0800d768
 80023b0:	20000314 	.word	0x20000314
 80023b4:	0800e364 	.word	0x0800e364
 80023b8:	08002be5 	.word	0x08002be5
 80023bc:	2000035c 	.word	0x2000035c
 80023c0:	0800e388 	.word	0x0800e388
 80023c4:	08002cdd 	.word	0x08002cdd
 80023c8:	20000360 	.word	0x20000360
 80023cc:	0800e3ac 	.word	0x0800e3ac
 80023d0:	08002d55 	.word	0x08002d55
 80023d4:	20000364 	.word	0x20000364
 80023d8:	0800e3d0 	.word	0x0800e3d0
 80023dc:	08002d95 	.word	0x08002d95
 80023e0:	20000368 	.word	0x20000368
 80023e4:	0800e3f4 	.word	0x0800e3f4
 80023e8:	08002e25 	.word	0x08002e25
 80023ec:	2000036c 	.word	0x2000036c
 80023f0:	0800e418 	.word	0x0800e418
 80023f4:	08002ead 	.word	0x08002ead
 80023f8:	20000370 	.word	0x20000370

080023fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b094      	sub	sp, #80	@ 0x50
 8002400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002402:	f107 0320 	add.w	r3, r7, #32
 8002406:	2230      	movs	r2, #48	@ 0x30
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f008 ffed 	bl	800b3ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <SystemClock_Config+0xcc>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	4a27      	ldr	r2, [pc, #156]	@ (80024c8 <SystemClock_Config+0xcc>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002430:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <SystemClock_Config+0xcc>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800243c:	2300      	movs	r3, #0
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <SystemClock_Config+0xd0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a21      	ldr	r2, [pc, #132]	@ (80024cc <SystemClock_Config+0xd0>)
 8002446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <SystemClock_Config+0xd0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800245c:	2301      	movs	r3, #1
 800245e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002460:	2310      	movs	r3, #16
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002464:	2302      	movs	r3, #2
 8002466:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002468:	2300      	movs	r3, #0
 800246a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800246c:	2310      	movs	r3, #16
 800246e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 8002470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002474:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002476:	2302      	movs	r3, #2
 8002478:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800247a:	2304      	movs	r3, #4
 800247c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247e:	f107 0320 	add.w	r3, r7, #32
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fbea 	bl	8005c5c <HAL_RCC_OscConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800248e:	f000 fe12 	bl	80030b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002492:	230f      	movs	r3, #15
 8002494:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002496:	2302      	movs	r3, #2
 8002498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800249e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	2102      	movs	r1, #2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 fe4b 	bl	800614c <HAL_RCC_ClockConfig>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024bc:	f000 fdfb 	bl	80030b6 <Error_Handler>
  }
}
 80024c0:	bf00      	nop
 80024c2:	3750      	adds	r7, #80	@ 0x50
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40007000 	.word	0x40007000

080024d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024d6:	463b      	mov	r3, r7
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024e2:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <MX_ADC1_Init+0x98>)
 80024e4:	4a21      	ldr	r2, [pc, #132]	@ (800256c <MX_ADC1_Init+0x9c>)
 80024e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <MX_ADC1_Init+0x98>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <MX_ADC1_Init+0x98>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80024f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <MX_ADC1_Init+0x98>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <MX_ADC1_Init+0x98>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002500:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <MX_ADC1_Init+0x98>)
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002508:	4b17      	ldr	r3, [pc, #92]	@ (8002568 <MX_ADC1_Init+0x98>)
 800250a:	2200      	movs	r2, #0
 800250c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <MX_ADC1_Init+0x98>)
 8002510:	4a17      	ldr	r2, [pc, #92]	@ (8002570 <MX_ADC1_Init+0xa0>)
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <MX_ADC1_Init+0x98>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <MX_ADC1_Init+0x98>)
 800251c:	2201      	movs	r2, #1
 800251e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <MX_ADC1_Init+0x98>)
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <MX_ADC1_Init+0x98>)
 800252a:	2201      	movs	r2, #1
 800252c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800252e:	480e      	ldr	r0, [pc, #56]	@ (8002568 <MX_ADC1_Init+0x98>)
 8002530:	f001 fcc8 	bl	8003ec4 <HAL_ADC_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800253a:	f000 fdbc 	bl	80030b6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800253e:	2310      	movs	r3, #16
 8002540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002546:	2307      	movs	r3, #7
 8002548:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800254a:	463b      	mov	r3, r7
 800254c:	4619      	mov	r1, r3
 800254e:	4806      	ldr	r0, [pc, #24]	@ (8002568 <MX_ADC1_Init+0x98>)
 8002550:	f001 fe9a 	bl	8004288 <HAL_ADC_ConfigChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800255a:	f000 fdac 	bl	80030b6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000210 	.word	0x20000210
 800256c:	40012000 	.word	0x40012000
 8002570:	0f000001 	.word	0x0f000001

08002574 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800257a:	4b2b      	ldr	r3, [pc, #172]	@ (8002628 <MX_CAN1_Init+0xb4>)
 800257c:	4a2b      	ldr	r2, [pc, #172]	@ (800262c <MX_CAN1_Init+0xb8>)
 800257e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002580:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <MX_CAN1_Init+0xb4>)
 8002582:	2210      	movs	r2, #16
 8002584:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002586:	4b28      	ldr	r3, [pc, #160]	@ (8002628 <MX_CAN1_Init+0xb4>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800258c:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <MX_CAN1_Init+0xb4>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002592:	4b25      	ldr	r3, [pc, #148]	@ (8002628 <MX_CAN1_Init+0xb4>)
 8002594:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002598:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800259a:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <MX_CAN1_Init+0xb4>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80025a0:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <MX_CAN1_Init+0xb4>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80025a6:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <MX_CAN1_Init+0xb4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80025ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <MX_CAN1_Init+0xb4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80025b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <MX_CAN1_Init+0xb4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80025b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <MX_CAN1_Init+0xb4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80025be:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <MX_CAN1_Init+0xb4>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80025c4:	4818      	ldr	r0, [pc, #96]	@ (8002628 <MX_CAN1_Init+0xb4>)
 80025c6:	f002 f87d 	bl	80046c4 <HAL_CAN_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80025d0:	f000 fd71 	bl	80030b6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef filt = {
 80025d4:	463b      	mov	r3, r7
 80025d6:	2228      	movs	r2, #40	@ 0x28
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f008 ff05 	bl	800b3ea <memset>
 80025e0:	2301      	movs	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	2301      	movs	r3, #1
 80025e6:	623b      	str	r3, [r7, #32]
    .FilterMaskIdHigh     = 0x0000,
    .FilterMaskIdLow      = 0x0000,
    .FilterFIFOAssignment = CAN_FILTER_FIFO0,
    .FilterActivation     = CAN_FILTER_ENABLE,
  };
  if (HAL_CAN_ConfigFilter(&hcan1, &filt) != HAL_OK) {
 80025e8:	463b      	mov	r3, r7
 80025ea:	4619      	mov	r1, r3
 80025ec:	480e      	ldr	r0, [pc, #56]	@ (8002628 <MX_CAN1_Init+0xb4>)
 80025ee:	f002 f965 	bl	80048bc <HAL_CAN_ConfigFilter>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_CAN1_Init+0x88>
    Error_Handler();
 80025f8:	f000 fd5d 	bl	80030b6 <Error_Handler>
  }

  // 2) Bắt đầu CAN1
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80025fc:	480a      	ldr	r0, [pc, #40]	@ (8002628 <MX_CAN1_Init+0xb4>)
 80025fe:	f002 fa3b 	bl	8004a78 <HAL_CAN_Start>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_CAN1_Init+0x98>
    Error_Handler();
 8002608:	f000 fd55 	bl	80030b6 <Error_Handler>
  }

  // 3) Kích hoạt interrupt khi có message pending
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800260c:	2102      	movs	r1, #2
 800260e:	4806      	ldr	r0, [pc, #24]	@ (8002628 <MX_CAN1_Init+0xb4>)
 8002610:	f002 fc90 	bl	8004f34 <HAL_CAN_ActivateNotification>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_CAN1_Init+0xaa>
    Error_Handler();
 800261a:	f000 fd4c 	bl	80030b6 <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	@ 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000258 	.word	0x20000258
 800262c:	40006400 	.word	0x40006400

08002630 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002636:	4b2c      	ldr	r3, [pc, #176]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 8002638:	4a2c      	ldr	r2, [pc, #176]	@ (80026ec <MX_CAN2_Init+0xbc>)
 800263a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800263c:	4b2a      	ldr	r3, [pc, #168]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 800263e:	2210      	movs	r2, #16
 8002640:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002642:	4b29      	ldr	r3, [pc, #164]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002648:	4b27      	ldr	r3, [pc, #156]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800264e:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 8002650:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002654:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002656:	4b24      	ldr	r3, [pc, #144]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800265c:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 800265e:	2200      	movs	r2, #0
 8002660:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002662:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 8002664:	2200      	movs	r2, #0
 8002666:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002668:	4b1f      	ldr	r3, [pc, #124]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 800266a:	2200      	movs	r2, #0
 800266c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800266e:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 8002670:	2200      	movs	r2, #0
 8002672:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002674:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 8002676:	2200      	movs	r2, #0
 8002678:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800267a:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 800267c:	2200      	movs	r2, #0
 800267e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002680:	4819      	ldr	r0, [pc, #100]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 8002682:	f002 f81f 	bl	80046c4 <HAL_CAN_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800268c:	f000 fd13 	bl	80030b6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef filt = {
 8002690:	463b      	mov	r3, r7
 8002692:	2228      	movs	r2, #40	@ 0x28
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f008 fea7 	bl	800b3ea <memset>
 800269c:	230e      	movs	r3, #14
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	2301      	movs	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	2301      	movs	r3, #1
 80026a6:	623b      	str	r3, [r7, #32]
    .FilterMaskIdHigh     = 0x0000,
    .FilterMaskIdLow      = 0x0000,
    .FilterFIFOAssignment = CAN_FILTER_FIFO0,
    .FilterActivation     = CAN_FILTER_ENABLE,
  };
  if (HAL_CAN_ConfigFilter(&hcan2, &filt) != HAL_OK) {
 80026a8:	463b      	mov	r3, r7
 80026aa:	4619      	mov	r1, r3
 80026ac:	480e      	ldr	r0, [pc, #56]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 80026ae:	f002 f905 	bl	80048bc <HAL_CAN_ConfigFilter>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_CAN2_Init+0x8c>
    Error_Handler();
 80026b8:	f000 fcfd 	bl	80030b6 <Error_Handler>
  }

  // 3) Bắt đầu CAN2
  if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 80026bc:	480a      	ldr	r0, [pc, #40]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 80026be:	f002 f9db 	bl	8004a78 <HAL_CAN_Start>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_CAN2_Init+0x9c>
    Error_Handler();
 80026c8:	f000 fcf5 	bl	80030b6 <Error_Handler>
  }

  // 4) Kích hoạt interrupt để callback khi có message pending
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80026cc:	2102      	movs	r1, #2
 80026ce:	4806      	ldr	r0, [pc, #24]	@ (80026e8 <MX_CAN2_Init+0xb8>)
 80026d0:	f002 fc30 	bl	8004f34 <HAL_CAN_ActivateNotification>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_CAN2_Init+0xae>
    Error_Handler();
 80026da:	f000 fcec 	bl	80030b6 <Error_Handler>
  }
  /* USER CODE END CAN2_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	3728      	adds	r7, #40	@ 0x28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000280 	.word	0x20000280
 80026ec:	40006800 	.word	0x40006800

080026f0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80026fe:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <MX_DAC_Init+0x4c>)
 8002700:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <MX_DAC_Init+0x50>)
 8002702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002704:	480d      	ldr	r0, [pc, #52]	@ (800273c <MX_DAC_Init+0x4c>)
 8002706:	f002 ff73 	bl	80055f0 <HAL_DAC_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002710:	f000 fcd1 	bl	80030b6 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002714:	2300      	movs	r3, #0
 8002716:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800271c:	463b      	mov	r3, r7
 800271e:	2210      	movs	r2, #16
 8002720:	4619      	mov	r1, r3
 8002722:	4806      	ldr	r0, [pc, #24]	@ (800273c <MX_DAC_Init+0x4c>)
 8002724:	f003 f807 	bl	8005736 <HAL_DAC_ConfigChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800272e:	f000 fcc2 	bl	80030b6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	200002a8 	.word	0x200002a8
 8002740:	40007400 	.word	0x40007400

08002744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <MX_SPI1_Init+0x64>)
 800274a:	4a18      	ldr	r2, [pc, #96]	@ (80027ac <MX_SPI1_Init+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800274e:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <MX_SPI1_Init+0x64>)
 8002750:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002756:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <MX_SPI1_Init+0x64>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800275c:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <MX_SPI1_Init+0x64>)
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <MX_SPI1_Init+0x64>)
 8002764:	2202      	movs	r2, #2
 8002766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <MX_SPI1_Init+0x64>)
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800276e:	4b0e      	ldr	r3, [pc, #56]	@ (80027a8 <MX_SPI1_Init+0x64>)
 8002770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002776:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <MX_SPI1_Init+0x64>)
 8002778:	2210      	movs	r2, #16
 800277a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <MX_SPI1_Init+0x64>)
 800277e:	2200      	movs	r2, #0
 8002780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <MX_SPI1_Init+0x64>)
 8002784:	2200      	movs	r2, #0
 8002786:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002788:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <MX_SPI1_Init+0x64>)
 800278a:	2200      	movs	r2, #0
 800278c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <MX_SPI1_Init+0x64>)
 8002790:	220a      	movs	r2, #10
 8002792:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002794:	4804      	ldr	r0, [pc, #16]	@ (80027a8 <MX_SPI1_Init+0x64>)
 8002796:	f003 feeb 	bl	8006570 <HAL_SPI_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027a0:	f000 fc89 	bl	80030b6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200002bc 	.word	0x200002bc
 80027ac:	40013000 	.word	0x40013000

080027b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <MX_UART4_Init+0x4c>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <MX_UART4_Init+0x50>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <MX_UART4_Init+0x4c>)
 80027bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <MX_UART4_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <MX_UART4_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <MX_UART4_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <MX_UART4_Init+0x4c>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <MX_UART4_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <MX_UART4_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	@ (80027fc <MX_UART4_Init+0x4c>)
 80027e8:	f004 fdb0 	bl	800734c <HAL_UART_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80027f2:	f000 fc60 	bl	80030b6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000314 	.word	0x20000314
 8002800:	40004c00 	.word	0x40004c00

08002804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	@ 0x28
 8002808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	60da      	str	r2, [r3, #12]
 8002818:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	4b43      	ldr	r3, [pc, #268]	@ (800292c <MX_GPIO_Init+0x128>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a42      	ldr	r2, [pc, #264]	@ (800292c <MX_GPIO_Init+0x128>)
 8002824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b40      	ldr	r3, [pc, #256]	@ (800292c <MX_GPIO_Init+0x128>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b3c      	ldr	r3, [pc, #240]	@ (800292c <MX_GPIO_Init+0x128>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a3b      	ldr	r2, [pc, #236]	@ (800292c <MX_GPIO_Init+0x128>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b39      	ldr	r3, [pc, #228]	@ (800292c <MX_GPIO_Init+0x128>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b35      	ldr	r3, [pc, #212]	@ (800292c <MX_GPIO_Init+0x128>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a34      	ldr	r2, [pc, #208]	@ (800292c <MX_GPIO_Init+0x128>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b32      	ldr	r3, [pc, #200]	@ (800292c <MX_GPIO_Init+0x128>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <MX_GPIO_Init+0x128>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4a2d      	ldr	r2, [pc, #180]	@ (800292c <MX_GPIO_Init+0x128>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6313      	str	r3, [r2, #48]	@ 0x30
 800287e:	4b2b      	ldr	r3, [pc, #172]	@ (800292c <MX_GPIO_Init+0x128>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LCD_CS_Pin|LCD_RS_Pin|TP_CS_Pin, GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	f240 3181 	movw	r1, #897	@ 0x381
 8002890:	4827      	ldr	r0, [pc, #156]	@ (8002930 <MX_GPIO_Init+0x12c>)
 8002892:	f003 f95d 	bl	8005b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8002896:	2201      	movs	r2, #1
 8002898:	2140      	movs	r1, #64	@ 0x40
 800289a:	4825      	ldr	r0, [pc, #148]	@ (8002930 <MX_GPIO_Init+0x12c>)
 800289c:	f003 f958 	bl	8005b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LCD_BL_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_BL_Pin;
 80028a0:	2341      	movs	r3, #65	@ 0x41
 80028a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80028ac:	2301      	movs	r3, #1
 80028ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	481e      	ldr	r0, [pc, #120]	@ (8002930 <MX_GPIO_Init+0x12c>)
 80028b8:	f002 ff96 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80028bc:	2310      	movs	r3, #16
 80028be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80028c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	4817      	ldr	r0, [pc, #92]	@ (8002930 <MX_GPIO_Init+0x12c>)
 80028d2:	f002 ff89 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RS_Pin;
 80028d6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80028da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028dc:	2301      	movs	r3, #1
 80028de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4810      	ldr	r0, [pc, #64]	@ (8002930 <MX_GPIO_Init+0x12c>)
 80028f0:	f002 ff7a 	bl	80057e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 80028f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	4808      	ldr	r0, [pc, #32]	@ (8002930 <MX_GPIO_Init+0x12c>)
 800290e:	f002 ff6b 	bl	80057e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2105      	movs	r1, #5
 8002916:	200a      	movs	r0, #10
 8002918:	f002 fe40 	bl	800559c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800291c:	200a      	movs	r0, #10
 800291e:	f002 fe59 	bl	80055d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002922:	bf00      	nop
 8002924:	3728      	adds	r7, #40	@ 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40020400 	.word	0x40020400

08002934 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4);
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b0a1      	sub	sp, #132	@ 0x84
 8002950:	af02      	add	r7, sp, #8
 8002952:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a21      	ldr	r2, [pc, #132]	@ (80029e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d13c      	bne.n	80029d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
        float tempC;
        uint8_t groupId;
        int msgLen;

        // Fetch the received CAN message from FIFO0
        if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &rxHdr, rxData) != HAL_OK)
 800295e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002962:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8002966:	2100      	movs	r1, #0
 8002968:	481e      	ldr	r0, [pc, #120]	@ (80029e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800296a:	f002 f999 	bl	8004ca0 <HAL_CAN_GetRxMessage>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d130      	bne.n	80029d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
        {
            return; // error reading
        }

        //  Only accept frames with StdId = 0x321 and DLC >= 5
        if ((rxHdr.StdId == 0x321) && (rxHdr.DLC >= 5))
 8002974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002976:	f240 3221 	movw	r2, #801	@ 0x321
 800297a:	4293      	cmp	r3, r2
 800297c:	d12c      	bne.n	80029d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 800297e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002980:	2b04      	cmp	r3, #4
 8002982:	d929      	bls.n	80029d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
        {
            //  Store 5 bytes (group + float) for Task02-3
            storeLastCan(rxData, 5);
 8002984:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002988:	2105      	movs	r1, #5
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fb72 	bl	8002074 <storeLastCan>

            // Parse group ID (1st byte) and temperature (next 4 bytes)
            groupId = rxData[0];
 8002990:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002994:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            memcpy(&tempC, &rxData[1], sizeof(float));
 8002998:	f8d7 304d 	ldr.w	r3, [r7, #77]	@ 0x4d
 800299c:	64bb      	str	r3, [r7, #72]	@ 0x48

            //  Send formatted string over UART4
            msgLen = snprintf(uartBuf, sizeof(uartBuf),
 800299e:	f897 4077 	ldrb.w	r4, [r7, #119]	@ 0x77
 80029a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fd fdcf 	bl	8000548 <__aeabi_f2d>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	f107 0008 	add.w	r0, r7, #8
 80029b2:	e9cd 2300 	strd	r2, r3, [sp]
 80029b6:	4623      	mov	r3, r4
 80029b8:	4a0b      	ldr	r2, [pc, #44]	@ (80029e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80029ba:	2140      	movs	r1, #64	@ 0x40
 80029bc:	f008 fc9c 	bl	800b2f8 <sniprintf>
 80029c0:	6738      	str	r0, [r7, #112]	@ 0x70
                              "Nhom: %02d, Temp: %.1f C\r\n",
                              groupId, tempC);
            HAL_UART_Transmit(&huart4, (uint8_t *)uartBuf, msgLen, HAL_MAX_DELAY);
 80029c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	f107 0108 	add.w	r1, r7, #8
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	4807      	ldr	r0, [pc, #28]	@ (80029ec <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80029d0:	f004 fd0c 	bl	80073ec <HAL_UART_Transmit>
 80029d4:	e000      	b.n	80029d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
            return; // error reading
 80029d6:	bf00      	nop
        }
    }
}
 80029d8:	377c      	adds	r7, #124	@ 0x7c
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	bf00      	nop
 80029e0:	40006800 	.word	0x40006800
 80029e4:	20000280 	.word	0x20000280
 80029e8:	0800d77c 	.word	0x0800d77c
 80029ec:	20000314 	.word	0x20000314

080029f0 <ScaleTouch>:

static void ScaleTouch(uint16_t raw_x, uint16_t raw_y,
                       uint16_t *px,  uint16_t *py)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60ba      	str	r2, [r7, #8]
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	4603      	mov	r3, r0
 80029fc:	81fb      	strh	r3, [r7, #14]
 80029fe:	460b      	mov	r3, r1
 8002a00:	81bb      	strh	r3, [r7, #12]
    *px =  raw_y* (SCREEN_W  - 1) / ADC_MAX;
 8002a02:	89ba      	ldrh	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	4a10      	ldr	r2, [pc, #64]	@ (8002a50 <ScaleTouch+0x60>)
 8002a10:	fb82 1203 	smull	r1, r2, r2, r3
 8002a14:	441a      	add	r2, r3
 8002a16:	12d2      	asrs	r2, r2, #11
 8002a18:	17db      	asrs	r3, r3, #31
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	801a      	strh	r2, [r3, #0]
    *py = raw_x * (SCREEN_H - 1) / ADC_MAX;
 8002a22:	89fa      	ldrh	r2, [r7, #14]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	019b      	lsls	r3, r3, #6
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	4a08      	ldr	r2, [pc, #32]	@ (8002a50 <ScaleTouch+0x60>)
 8002a30:	fb82 1203 	smull	r1, r2, r2, r3
 8002a34:	441a      	add	r2, r3
 8002a36:	12d2      	asrs	r2, r2, #11
 8002a38:	17db      	asrs	r3, r3, #31
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	801a      	strh	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	80080081 	.word	0x80080081

08002a54 <ProcessMenuTouch>:

void ProcessMenuTouch(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
    static bool lock = false;
    uint16_t raw_x, raw_y, x, y;

    if (tp_scan(0))
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f000 ff90 	bl	8003980 <tp_scan>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80a8 	beq.w	8002bb8 <ProcessMenuTouch+0x164>
    {
        xpt2046_read_xy(&raw_x, &raw_y);
 8002a68:	1d3a      	adds	r2, r7, #4
 8002a6a:	1dbb      	adds	r3, r7, #6
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f954 	bl	8003d1c <xpt2046_read_xy>
        ScaleTouch(raw_x, raw_y, &x, &y);
 8002a74:	88f8      	ldrh	r0, [r7, #6]
 8002a76:	88b9      	ldrh	r1, [r7, #4]
 8002a78:	463b      	mov	r3, r7
 8002a7a:	1cba      	adds	r2, r7, #2
 8002a7c:	f7ff ffb8 	bl	80029f0 <ScaleTouch>

        if (!lock)
 8002a80:	4b50      	ldr	r3, [pc, #320]	@ (8002bc4 <ProcessMenuTouch+0x170>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	f083 0301 	eor.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8097 	beq.w	8002bbe <ProcessMenuTouch+0x16a>
        {
            lock = true;
 8002a90:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc4 <ProcessMenuTouch+0x170>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]

            // If Base screen is showing, check for NEXT button tap
            if (FLAG_Base)
 8002a96:	4b4c      	ldr	r3, [pc, #304]	@ (8002bc8 <ProcessMenuTouch+0x174>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d025      	beq.n	8002aec <ProcessMenuTouch+0x98>
            {
                if (x >= btnX && x < btnX + btnW &&
 8002aa0:	887a      	ldrh	r2, [r7, #2]
 8002aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bcc <ProcessMenuTouch+0x178>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	f0c0 8089 	bcc.w	8002bbe <ProcessMenuTouch+0x16a>
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b46      	ldr	r3, [pc, #280]	@ (8002bcc <ProcessMenuTouch+0x178>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4b46      	ldr	r3, [pc, #280]	@ (8002bd0 <ProcessMenuTouch+0x17c>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	440b      	add	r3, r1
 8002abc:	429a      	cmp	r2, r3
 8002abe:	da7e      	bge.n	8002bbe <ProcessMenuTouch+0x16a>
                    y >= btnY && y < btnY + btnH)
 8002ac0:	883a      	ldrh	r2, [r7, #0]
 8002ac2:	4b44      	ldr	r3, [pc, #272]	@ (8002bd4 <ProcessMenuTouch+0x180>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
                if (x >= btnX && x < btnX + btnW &&
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d379      	bcc.n	8002bbe <ProcessMenuTouch+0x16a>
                    y >= btnY && y < btnY + btnH)
 8002aca:	883b      	ldrh	r3, [r7, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b41      	ldr	r3, [pc, #260]	@ (8002bd4 <ProcessMenuTouch+0x180>)
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4b40      	ldr	r3, [pc, #256]	@ (8002bd8 <ProcessMenuTouch+0x184>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	440b      	add	r3, r1
 8002ada:	429a      	cmp	r2, r3
 8002adc:	da6f      	bge.n	8002bbe <ProcessMenuTouch+0x16a>
                {
                    FLAG_Base = false;
 8002ade:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc8 <ProcessMenuTouch+0x174>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
                    FLAG_Menu = true;
 8002ae4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bdc <ProcessMenuTouch+0x188>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
                    // The Display task will notice FLAG_Menu and draw Main menu.
                    return;
 8002aea:	e068      	b.n	8002bbe <ProcessMenuTouch+0x16a>
                }
            }
            else if(WKUP){
 8002aec:	4b3c      	ldr	r3, [pc, #240]	@ (8002be0 <ProcessMenuTouch+0x18c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <ProcessMenuTouch+0xb0>
                toggleZone(3);
 8002af6:	2003      	movs	r0, #3
 8002af8:	f7ff f9e6 	bl	8001ec8 <toggleZone>
            	WKUP = 0;
 8002afc:	4b38      	ldr	r3, [pc, #224]	@ (8002be0 <ProcessMenuTouch+0x18c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e05c      	b.n	8002bbe <ProcessMenuTouch+0x16a>
            }
            // If Main menu is showing, check for BACK button tap
            else if (FLAG_Menu)
 8002b04:	4b35      	ldr	r3, [pc, #212]	@ (8002bdc <ProcessMenuTouch+0x188>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d057      	beq.n	8002bbe <ProcessMenuTouch+0x16a>
            {
                if (x >= BACK_X && x < BACK_X + BACK_W &&
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	2b9f      	cmp	r3, #159	@ 0x9f
 8002b12:	d911      	bls.n	8002b38 <ProcessMenuTouch+0xe4>
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	2be5      	cmp	r3, #229	@ 0xe5
 8002b18:	d80e      	bhi.n	8002b38 <ProcessMenuTouch+0xe4>
                    y >= BACK_Y && y < BACK_Y + BACK_H)
 8002b1a:	883b      	ldrh	r3, [r7, #0]
                if (x >= BACK_X && x < BACK_X + BACK_W &&
 8002b1c:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8002b20:	d30a      	bcc.n	8002b38 <ProcessMenuTouch+0xe4>
                    y >= BACK_Y && y < BACK_Y + BACK_H)
 8002b22:	883b      	ldrh	r3, [r7, #0]
 8002b24:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8002b28:	d206      	bcs.n	8002b38 <ProcessMenuTouch+0xe4>
                {
                    FLAG_Menu = false;
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <ProcessMenuTouch+0x188>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
                    FLAG_Base = true;
 8002b30:	4b25      	ldr	r3, [pc, #148]	@ (8002bc8 <ProcessMenuTouch+0x174>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
                    // The Display task will notice FLAG_Base and redraw Base screen.
                    return;
 8002b36:	e042      	b.n	8002bbe <ProcessMenuTouch+0x16a>
                }

                //Otherwise still in Main menu: check the four Task-zones
                if (x >= ZONE0_X1 && x < ZONE0_X1 + ZONE_W &&
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	2b13      	cmp	r3, #19
 8002b3c:	d90c      	bls.n	8002b58 <ProcessMenuTouch+0x104>
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	2b6d      	cmp	r3, #109	@ 0x6d
 8002b42:	d809      	bhi.n	8002b58 <ProcessMenuTouch+0x104>
                    y >= ZONE0_Y1 && y < ZONE0_Y1 + ZONE_H)
 8002b44:	883b      	ldrh	r3, [r7, #0]
                if (x >= ZONE0_X1 && x < ZONE0_X1 + ZONE_W &&
 8002b46:	2b31      	cmp	r3, #49	@ 0x31
 8002b48:	d906      	bls.n	8002b58 <ProcessMenuTouch+0x104>
                    y >= ZONE0_Y1 && y < ZONE0_Y1 + ZONE_H)
 8002b4a:	883b      	ldrh	r3, [r7, #0]
 8002b4c:	2b77      	cmp	r3, #119	@ 0x77
 8002b4e:	d803      	bhi.n	8002b58 <ProcessMenuTouch+0x104>
                {
                    toggleZone(0);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7ff f9b9 	bl	8001ec8 <toggleZone>
 8002b56:	e032      	b.n	8002bbe <ProcessMenuTouch+0x16a>
                }
                else if (x >= ZONE1_X1 && x < ZONE1_X1 + ZONE_W &&
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	2b81      	cmp	r3, #129	@ 0x81
 8002b5c:	d90c      	bls.n	8002b78 <ProcessMenuTouch+0x124>
 8002b5e:	887b      	ldrh	r3, [r7, #2]
 8002b60:	2bdb      	cmp	r3, #219	@ 0xdb
 8002b62:	d809      	bhi.n	8002b78 <ProcessMenuTouch+0x124>
                         y >= ZONE1_Y1 && y < ZONE1_Y1 + ZONE_H)
 8002b64:	883b      	ldrh	r3, [r7, #0]
                else if (x >= ZONE1_X1 && x < ZONE1_X1 + ZONE_W &&
 8002b66:	2b31      	cmp	r3, #49	@ 0x31
 8002b68:	d906      	bls.n	8002b78 <ProcessMenuTouch+0x124>
                         y >= ZONE1_Y1 && y < ZONE1_Y1 + ZONE_H)
 8002b6a:	883b      	ldrh	r3, [r7, #0]
 8002b6c:	2b77      	cmp	r3, #119	@ 0x77
 8002b6e:	d803      	bhi.n	8002b78 <ProcessMenuTouch+0x124>
                {
                    toggleZone(1);
 8002b70:	2001      	movs	r0, #1
 8002b72:	f7ff f9a9 	bl	8001ec8 <toggleZone>
 8002b76:	e022      	b.n	8002bbe <ProcessMenuTouch+0x16a>
                }
                else if (x >= ZONE2_X1 && x < ZONE2_X1 + ZONE_W &&
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	2b13      	cmp	r3, #19
 8002b7c:	d90c      	bls.n	8002b98 <ProcessMenuTouch+0x144>
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	2b6d      	cmp	r3, #109	@ 0x6d
 8002b82:	d809      	bhi.n	8002b98 <ProcessMenuTouch+0x144>
                         y >= ZONE2_Y1 && y < ZONE2_Y1 + ZONE_H)
 8002b84:	883b      	ldrh	r3, [r7, #0]
                else if (x >= ZONE2_X1 && x < ZONE2_X1 + ZONE_W &&
 8002b86:	2b8b      	cmp	r3, #139	@ 0x8b
 8002b88:	d906      	bls.n	8002b98 <ProcessMenuTouch+0x144>
                         y >= ZONE2_Y1 && y < ZONE2_Y1 + ZONE_H)
 8002b8a:	883b      	ldrh	r3, [r7, #0]
 8002b8c:	2bd1      	cmp	r3, #209	@ 0xd1
 8002b8e:	d803      	bhi.n	8002b98 <ProcessMenuTouch+0x144>
                {
                    toggleZone(2);
 8002b90:	2002      	movs	r0, #2
 8002b92:	f7ff f999 	bl	8001ec8 <toggleZone>
 8002b96:	e012      	b.n	8002bbe <ProcessMenuTouch+0x16a>
                }
                else if (x >= ZONE3_X1 && x < ZONE3_X1 + ZONE_W &&
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	2b81      	cmp	r3, #129	@ 0x81
 8002b9c:	d90f      	bls.n	8002bbe <ProcessMenuTouch+0x16a>
 8002b9e:	887b      	ldrh	r3, [r7, #2]
 8002ba0:	2bdb      	cmp	r3, #219	@ 0xdb
 8002ba2:	d80c      	bhi.n	8002bbe <ProcessMenuTouch+0x16a>
                         y >= ZONE3_Y1 && y < ZONE3_Y1 + ZONE_H)
 8002ba4:	883b      	ldrh	r3, [r7, #0]
                else if (x >= ZONE3_X1 && x < ZONE3_X1 + ZONE_W &&
 8002ba6:	2b8b      	cmp	r3, #139	@ 0x8b
 8002ba8:	d909      	bls.n	8002bbe <ProcessMenuTouch+0x16a>
                         y >= ZONE3_Y1 && y < ZONE3_Y1 + ZONE_H)
 8002baa:	883b      	ldrh	r3, [r7, #0]
 8002bac:	2bd1      	cmp	r3, #209	@ 0xd1
 8002bae:	d806      	bhi.n	8002bbe <ProcessMenuTouch+0x16a>
                {
                    toggleZone(3);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f7ff f989 	bl	8001ec8 <toggleZone>
 8002bb6:	e002      	b.n	8002bbe <ProcessMenuTouch+0x16a>
            }
        }
    }
    else
    {
        lock = false;
 8002bb8:	4b02      	ldr	r3, [pc, #8]	@ (8002bc4 <ProcessMenuTouch+0x170>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
    }
}
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	2000039c 	.word	0x2000039c
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000004 	.word	0x20000004
 8002bd4:	20000002 	.word	0x20000002
 8002bd8:	20000006 	.word	0x20000006
 8002bdc:	20000009 	.word	0x20000009
 8002be0:	2000037e 	.word	0x2000037e

08002be4 <StartTask01_Display>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01_Display */
void StartTask01_Display(void *argument)
{
 8002be4:	b5b0      	push	{r4, r5, r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	const char msg[] = "StartTask01_Display \r\n";
 8002bec:	4b30      	ldr	r3, [pc, #192]	@ (8002cb0 <StartTask01_Display+0xcc>)
 8002bee:	f107 0408 	add.w	r4, r7, #8
 8002bf2:	461d      	mov	r5, r3
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bfc:	6020      	str	r0, [r4, #0]
 8002bfe:	3404      	adds	r4, #4
 8002c00:	8021      	strh	r1, [r4, #0]
 8002c02:	3402      	adds	r4, #2
 8002c04:	0c0b      	lsrs	r3, r1, #16
 8002c06:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c08:	f107 0108 	add.w	r1, r7, #8
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c10:	2216      	movs	r2, #22
 8002c12:	4828      	ldr	r0, [pc, #160]	@ (8002cb4 <StartTask01_Display+0xd0>)
 8002c14:	f004 fbea 	bl	80073ec <HAL_UART_Transmit>
    FLAG_Menu = false;
 8002c18:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <StartTask01_Display+0xd4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
    FLAG_Base = true;
 8002c1e:	4b27      	ldr	r3, [pc, #156]	@ (8002cbc <StartTask01_Display+0xd8>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]

    while (1)
    {
        // If Base-screen flag just got set, draw Base screen once
        if (FLAG_Base && !prevBase)
 8002c24:	4b25      	ldr	r3, [pc, #148]	@ (8002cbc <StartTask01_Display+0xd8>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00f      	beq.n	8002c4e <StartTask01_Display+0x6a>
 8002c2e:	4b24      	ldr	r3, [pc, #144]	@ (8002cc0 <StartTask01_Display+0xdc>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <StartTask01_Display+0x6a>
        {
            Draw_BaseScreen();
 8002c3e:	f7fe ff4d 	bl	8001adc <Draw_BaseScreen>
            prevBase = true;
 8002c42:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc0 <StartTask01_Display+0xdc>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
            prevMenu = false;
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <StartTask01_Display+0xe0>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
        }

        // If Main-menu flag just got set, draw Main menu once
        if (FLAG_Menu && !prevMenu)
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <StartTask01_Display+0xd4>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d027      	beq.n	8002ca8 <StartTask01_Display+0xc4>
 8002c58:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc4 <StartTask01_Display+0xe0>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f083 0301 	eor.w	r3, r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01f      	beq.n	8002ca8 <StartTask01_Display+0xc4>
        {
			FLAG_LED  = false;
 8002c68:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <StartTask01_Display+0xe4>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
			FLAG_CAN  = false;
 8002c6e:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <StartTask01_Display+0xe8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
			FLAG_Disp = false;
 8002c74:	4b16      	ldr	r3, [pc, #88]	@ (8002cd0 <StartTask01_Display+0xec>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
			FLAG_DAC  = false;
 8002c7a:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <StartTask01_Display+0xf0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
			zoneActive[0] = 0;
 8002c80:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <StartTask01_Display+0xf4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
			zoneActive[1] = 0;
 8002c86:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <StartTask01_Display+0xf4>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	705a      	strb	r2, [r3, #1]
			zoneActive[2] = 0;
 8002c8c:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <StartTask01_Display+0xf4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	709a      	strb	r2, [r3, #2]
			zoneActive[3] = 0;
 8002c92:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <StartTask01_Display+0xf4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	70da      	strb	r2, [r3, #3]
            ShowMainMenu();
 8002c98:	f7fe ff98 	bl	8001bcc <ShowMainMenu>
            prevMenu = true;
 8002c9c:	4b09      	ldr	r3, [pc, #36]	@ (8002cc4 <StartTask01_Display+0xe0>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
            prevBase = false;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <StartTask01_Display+0xdc>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
        }

        // Otherwise, do nothing except yield
        osDelay(50);
 8002ca8:	2032      	movs	r0, #50	@ 0x32
 8002caa:	f005 f87b 	bl	8007da4 <osDelay>
        if (FLAG_Base && !prevBase)
 8002cae:	e7b9      	b.n	8002c24 <StartTask01_Display+0x40>
 8002cb0:	0800d798 	.word	0x0800d798
 8002cb4:	20000314 	.word	0x20000314
 8002cb8:	20000009 	.word	0x20000009
 8002cbc:	20000008 	.word	0x20000008
 8002cc0:	20000378 	.word	0x20000378
 8002cc4:	20000379 	.word	0x20000379
 8002cc8:	2000037a 	.word	0x2000037a
 8002ccc:	2000037b 	.word	0x2000037b
 8002cd0:	2000037c 	.word	0x2000037c
 8002cd4:	2000037d 	.word	0x2000037d
 8002cd8:	20000374 	.word	0x20000374

08002cdc <StartTask02_Touch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02_Touch */
void StartTask02_Touch(void *argument)
{
 8002cdc:	b5b0      	push	{r4, r5, r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02_Touch */
  /* Infinite loop */
	zoneTaskHandles[0] = Task_LEDHandle;
 8002ce4:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <StartTask02_Touch+0x5c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a14      	ldr	r2, [pc, #80]	@ (8002d3c <StartTask02_Touch+0x60>)
 8002cea:	6013      	str	r3, [r2, #0]
	zoneTaskHandles[1] = Task_CANHandle;
 8002cec:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <StartTask02_Touch+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a12      	ldr	r2, [pc, #72]	@ (8002d3c <StartTask02_Touch+0x60>)
 8002cf2:	6053      	str	r3, [r2, #4]
	zoneTaskHandles[2] = Task_DispCANHandle;
 8002cf4:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <StartTask02_Touch+0x68>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a10      	ldr	r2, [pc, #64]	@ (8002d3c <StartTask02_Touch+0x60>)
 8002cfa:	6093      	str	r3, [r2, #8]
	zoneTaskHandles[3] = Task_DACHandle;
 8002cfc:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <StartTask02_Touch+0x6c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0e      	ldr	r2, [pc, #56]	@ (8002d3c <StartTask02_Touch+0x60>)
 8002d02:	60d3      	str	r3, [r2, #12]
	const char msg[] = "StartTask02_Touch \r\n";
 8002d04:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <StartTask02_Touch+0x70>)
 8002d06:	f107 0408 	add.w	r4, r7, #8
 8002d0a:	461d      	mov	r5, r3
 8002d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002d14:	6020      	str	r0, [r4, #0]
 8002d16:	3404      	adds	r4, #4
 8002d18:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002d1a:	f107 0108 	add.w	r1, r7, #8
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	2214      	movs	r2, #20
 8002d24:	480a      	ldr	r0, [pc, #40]	@ (8002d50 <StartTask02_Touch+0x74>)
 8002d26:	f004 fb61 	bl	80073ec <HAL_UART_Transmit>
  for(;;)
  {
	    ProcessMenuTouch();
 8002d2a:	f7ff fe93 	bl	8002a54 <ProcessMenuTouch>
	    //DebugTouch();
	    osDelay(50);
 8002d2e:	2032      	movs	r0, #50	@ 0x32
 8002d30:	f005 f838 	bl	8007da4 <osDelay>
	    ProcessMenuTouch();
 8002d34:	bf00      	nop
 8002d36:	e7f8      	b.n	8002d2a <StartTask02_Touch+0x4e>
 8002d38:	20000364 	.word	0x20000364
 8002d3c:	20000380 	.word	0x20000380
 8002d40:	20000368 	.word	0x20000368
 8002d44:	2000036c 	.word	0x2000036c
 8002d48:	20000370 	.word	0x20000370
 8002d4c:	0800d7b0 	.word	0x0800d7b0
 8002d50:	20000314 	.word	0x20000314

08002d54 <StartTask_LED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_LED */
void StartTask_LED(void *argument)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_LED */
  /* Infinite loop */
	  for(;;)
	  {
	    if (FLAG_LED) {
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <StartTask_LED+0x38>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <StartTask_LED+0x24>
	      HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8002d66:	2101      	movs	r1, #1
 8002d68:	4809      	ldr	r0, [pc, #36]	@ (8002d90 <StartTask_LED+0x3c>)
 8002d6a:	f002 ff0a 	bl	8005b82 <HAL_GPIO_TogglePin>
	      osDelay(1000);
 8002d6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d72:	f005 f817 	bl	8007da4 <osDelay>
 8002d76:	e7f1      	b.n	8002d5c <StartTask_LED+0x8>
	    } else {
	    	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4804      	ldr	r0, [pc, #16]	@ (8002d90 <StartTask_LED+0x3c>)
 8002d7e:	f002 fee7 	bl	8005b50 <HAL_GPIO_WritePin>
	      osDelay(100);
 8002d82:	2064      	movs	r0, #100	@ 0x64
 8002d84:	f005 f80e 	bl	8007da4 <osDelay>
	    if (FLAG_LED) {
 8002d88:	e7e8      	b.n	8002d5c <StartTask_LED+0x8>
 8002d8a:	bf00      	nop
 8002d8c:	2000037a 	.word	0x2000037a
 8002d90:	40020400 	.word	0x40020400

08002d94 <StartTask_CAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_CAN */
void StartTask_CAN(void *argument)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	@ 0x38
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_CAN */
  /* Infinite loop */
    CAN_TxHeaderTypeDef txHdr = {
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
 8002dac:	615a      	str	r2, [r3, #20]
 8002dae:	f240 3321 	movw	r3, #801	@ 0x321
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	2305      	movs	r3, #5
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .DLC               = 5,
        .TransmitGlobalTime = DISABLE
    };
    uint8_t txData[8];
    uint32_t txMailbox;
    uint8_t groupId = (uint8_t)atoi(GROUP_ID);
 8002db8:	4817      	ldr	r0, [pc, #92]	@ (8002e18 <StartTask_CAN+0x84>)
 8002dba:	f007 fcfd 	bl	800a7b8 <atoi>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for (;;)
    {
        if (FLAG_CAN)
 8002dc4:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <StartTask_CAN+0x88>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01f      	beq.n	8002e0e <StartTask_CAN+0x7a>
        {
            // Read internal temperature as float
            float tempC = getChipTemperature();
 8002dce:	f7ff f921 	bl	8002014 <getChipTemperature>
 8002dd2:	eef0 7a40 	vmov.f32	s15, s0
 8002dd6:	edc7 7a03 	vstr	s15, [r7, #12]

            //  Pack group ID (1 byte) + temperature (4-byte IEEE-754)
            txData[0] = groupId;
 8002dda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002dde:	753b      	strb	r3, [r7, #20]
            memcpy(&txData[1], &tempC, sizeof(float));
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f8c7 3015 	str.w	r3, [r7, #21]

            txData[5] = txData[6] = txData[7] = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	76fb      	strb	r3, [r7, #27]
 8002dea:	7efb      	ldrb	r3, [r7, #27]
 8002dec:	76bb      	strb	r3, [r7, #26]
 8002dee:	7ebb      	ldrb	r3, [r7, #26]
 8002df0:	767b      	strb	r3, [r7, #25]

            // Transmit on CAN1
            if (HAL_CAN_AddTxMessage(&hcan1, &txHdr, txData, &txMailbox) != HAL_OK)
 8002df2:	f107 0310 	add.w	r3, r7, #16
 8002df6:	f107 0214 	add.w	r2, r7, #20
 8002dfa:	f107 011c 	add.w	r1, r7, #28
 8002dfe:	4808      	ldr	r0, [pc, #32]	@ (8002e20 <StartTask_CAN+0x8c>)
 8002e00:	f001 fe7e 	bl	8004b00 <HAL_CAN_AddTxMessage>
            {
            }
            osDelay(500);
 8002e04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002e08:	f004 ffcc 	bl	8007da4 <osDelay>
 8002e0c:	e7da      	b.n	8002dc4 <StartTask_CAN+0x30>
        }
        else
        {
            osDelay(100);
 8002e0e:	2064      	movs	r0, #100	@ 0x64
 8002e10:	f004 ffc8 	bl	8007da4 <osDelay>
        if (FLAG_CAN)
 8002e14:	e7d6      	b.n	8002dc4 <StartTask_CAN+0x30>
 8002e16:	bf00      	nop
 8002e18:	0800d7c8 	.word	0x0800d7c8
 8002e1c:	2000037b 	.word	0x2000037b
 8002e20:	20000258 	.word	0x20000258

08002e24 <StartTask_DispCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_DispCAN */
void StartTask_DispCAN(void *argument)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b098      	sub	sp, #96	@ 0x60
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
    uint8_t buf[8]; int len;

    for (;;)
    {
        if (FLAG_Disp)
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <StartTask_DispCAN+0x70>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d02a      	beq.n	8002e8c <StartTask_DispCAN+0x68>
        {
            //  Fetch the stored CAN frame (group + temperature)
            getLastCan(buf, &len);
 8002e36:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002e3a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff f92d 	bl	80020a0 <getLastCan>
            Draw_Task02_3_Screen(buf);
 8002e46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe ffa2 	bl	8001d94 <Draw_Task02_3_Screen>
            osDelay(3000);
 8002e50:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e54:	f004 ffa6 	bl	8007da4 <osDelay>
            FLAG_Disp = false;
 8002e58:	4b0e      	ldr	r3, [pc, #56]	@ (8002e94 <StartTask_DispCAN+0x70>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
            prevMenu = false;
 8002e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e98 <StartTask_DispCAN+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]

            // debug UART
            char msg[64];
            int len = snprintf(msg,sizeof(msg),"%s %s\r\n","Task02-3", "OFF");
 8002e64:	f107 0008 	add.w	r0, r7, #8
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <StartTask_DispCAN+0x78>)
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <StartTask_DispCAN+0x7c>)
 8002e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea4 <StartTask_DispCAN+0x80>)
 8002e70:	2140      	movs	r1, #64	@ 0x40
 8002e72:	f008 fa41 	bl	800b2f8 <sniprintf>
 8002e76:	6578      	str	r0, [r7, #84]	@ 0x54
            HAL_UART_Transmit(&huart4,(uint8_t*)msg,len,HAL_MAX_DELAY);
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	f107 0108 	add.w	r1, r7, #8
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	4808      	ldr	r0, [pc, #32]	@ (8002ea8 <StartTask_DispCAN+0x84>)
 8002e86:	f004 fab1 	bl	80073ec <HAL_UART_Transmit>
 8002e8a:	e7cf      	b.n	8002e2c <StartTask_DispCAN+0x8>
        }
        else
        {
            osDelay(100);
 8002e8c:	2064      	movs	r0, #100	@ 0x64
 8002e8e:	f004 ff89 	bl	8007da4 <osDelay>
        if (FLAG_Disp)
 8002e92:	e7cb      	b.n	8002e2c <StartTask_DispCAN+0x8>
 8002e94:	2000037c 	.word	0x2000037c
 8002e98:	20000379 	.word	0x20000379
 8002e9c:	0800d75c 	.word	0x0800d75c
 8002ea0:	0800d60c 	.word	0x0800d60c
 8002ea4:	0800d760 	.word	0x0800d760
 8002ea8:	20000314 	.word	0x20000314

08002eac <StartTask_DAC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_DAC */
void StartTask_DAC(void *argument)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b09a      	sub	sp, #104	@ 0x68
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

    static const uint16_t melody[] = {
        NOTE_C5, NOTE_B4, NOTE_A4, NOTE_G4,
        NOTE_F4, NOTE_E4, NOTE_D4, NOTE_C4
    };
    const uint8_t  MELODY_LEN = sizeof(melody) / sizeof(melody[0]);
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
    const uint32_t TOTAL_MS   = 10000U;  // 10 seconds
 8002eba:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const uint32_t NINE_MS    = 9000U;   // 9 seconds
 8002ec0:	f242 3328 	movw	r3, #9000	@ 0x2328
 8002ec4:	65bb      	str	r3, [r7, #88]	@ 0x58

    DWT_Delay_Init();
 8002ec6:	f7ff f903 	bl	80020d0 <DWT_Delay_Init>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8002eca:	2110      	movs	r1, #16
 8002ecc:	486a      	ldr	r0, [pc, #424]	@ (8003078 <StartTask_DAC+0x1cc>)
 8002ece:	f002 fbb1 	bl	8005634 <HAL_DAC_Start>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2110      	movs	r1, #16
 8002ed8:	4867      	ldr	r0, [pc, #412]	@ (8003078 <StartTask_DAC+0x1cc>)
 8002eda:	f002 fc02 	bl	80056e2 <HAL_DAC_SetValue>

    for (;;)
    {
        if (FLAG_DAC)
 8002ede:	4b67      	ldr	r3, [pc, #412]	@ (800307c <StartTask_DAC+0x1d0>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80c3 	beq.w	8003070 <StartTask_DAC+0x1c4>
        {
            int len = snprintf(uartBuf, sizeof(uartBuf),
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	4a64      	ldr	r2, [pc, #400]	@ (8003080 <StartTask_DAC+0x1d4>)
 8002ef0:	2140      	movs	r1, #64	@ 0x40
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f008 fa00 	bl	800b2f8 <sniprintf>
 8002ef8:	6578      	str	r0, [r7, #84]	@ 0x54
                               "Task02_4: Start alarm 10s\r\n");
            HAL_UART_Transmit(&huart4, (uint8_t *)uartBuf, len, HAL_MAX_DELAY);
 8002efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	f107 0108 	add.w	r1, r7, #8
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	485f      	ldr	r0, [pc, #380]	@ (8003084 <StartTask_DAC+0x1d8>)
 8002f08:	f004 fa70 	bl	80073ec <HAL_UART_Transmit>

            startTick = HAL_GetTick();
 8002f0c:	f000 ffce 	bl	8003eac <HAL_GetTick>
 8002f10:	6538      	str	r0, [r7, #80]	@ 0x50
            elapsed   = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	667b      	str	r3, [r7, #100]	@ 0x64
            noteIndex = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

            while (elapsed < TOTAL_MS)
 8002f1c:	e072      	b.n	8003004 <StartTask_DAC+0x158>
            {
                elapsed = HAL_GetTick() - startTick;
 8002f1e:	f000 ffc5 	bl	8003eac <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	667b      	str	r3, [r7, #100]	@ 0x64
                if (elapsed >= TOTAL_MS) break;
 8002f2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002f2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d26d      	bcs.n	800300e <StartTask_DAC+0x162>
                remaining = TOTAL_MS - elapsed;
 8002f32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if (remaining <= (TOTAL_MS - NINE_MS))
 8002f3a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d816      	bhi.n	8002f74 <StartTask_DAC+0xc8>
                {

                    len = snprintf(uartBuf, sizeof(uartBuf),
 8002f46:	f107 0008 	add.w	r0, r7, #8
 8002f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8003088 <StartTask_DAC+0x1dc>)
 8002f4e:	2140      	movs	r1, #64	@ 0x40
 8002f50:	f008 f9d2 	bl	800b2f8 <sniprintf>
 8002f54:	6578      	str	r0, [r7, #84]	@ 0x54
                                   "Task02_4: Remaining %4lu ms\r\n", remaining);
                    HAL_UART_Transmit(&huart4, (uint8_t *)uartBuf, len, HAL_MAX_DELAY);
 8002f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	f107 0108 	add.w	r1, r7, #8
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	4848      	ldr	r0, [pc, #288]	@ (8003084 <StartTask_DAC+0x1d8>)
 8002f64:	f004 fa42 	bl	80073ec <HAL_UART_Transmit>

                    playToneDAC(NOTE_C4, remaining);
 8002f68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002f6a:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8002f6e:	f7ff f8f5 	bl	800215c <playToneDAC>
                    break;
 8002f72:	e04f      	b.n	8003014 <StartTask_DAC+0x168>
                }
                else
                {
                    len = snprintf(uartBuf, sizeof(uartBuf),
 8002f74:	f107 0008 	add.w	r0, r7, #8
 8002f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f7a:	4a43      	ldr	r2, [pc, #268]	@ (8003088 <StartTask_DAC+0x1dc>)
 8002f7c:	2140      	movs	r1, #64	@ 0x40
 8002f7e:	f008 f9bb 	bl	800b2f8 <sniprintf>
 8002f82:	6578      	str	r0, [r7, #84]	@ 0x54
                                   "Task02_4: Remaining %4lu ms\r\n", remaining);
                    HAL_UART_Transmit(&huart4, (uint8_t *)uartBuf, len, HAL_MAX_DELAY);
 8002f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	f107 0108 	add.w	r1, r7, #8
 8002f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f90:	483c      	ldr	r0, [pc, #240]	@ (8003084 <StartTask_DAC+0x1d8>)
 8002f92:	f004 fa2b 	bl	80073ec <HAL_UART_Transmit>

                    playToneDAC(melody[noteIndex], 500U);
 8002f96:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002f9a:	4a3c      	ldr	r2, [pc, #240]	@ (800308c <StartTask_DAC+0x1e0>)
 8002f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff f8d9 	bl	800215c <playToneDAC>

                    elapsed = HAL_GetTick() - startTick;
 8002faa:	f000 ff7f 	bl	8003eac <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	667b      	str	r3, [r7, #100]	@ 0x64
                    if (elapsed >= TOTAL_MS) break;
 8002fb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002fb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d229      	bcs.n	8003012 <StartTask_DAC+0x166>

                    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2110      	movs	r1, #16
 8002fc4:	482c      	ldr	r0, [pc, #176]	@ (8003078 <StartTask_DAC+0x1cc>)
 8002fc6:	f002 fb8c 	bl	80056e2 <HAL_DAC_SetValue>
                    {
                        uint32_t t1 = HAL_GetTick();
 8002fca:	f000 ff6f 	bl	8003eac <HAL_GetTick>
 8002fce:	64b8      	str	r0, [r7, #72]	@ 0x48
                        while ((HAL_GetTick() - t1) < 50U) { }
 8002fd0:	bf00      	nop
 8002fd2:	f000 ff6b 	bl	8003eac <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b31      	cmp	r3, #49	@ 0x31
 8002fde:	d9f8      	bls.n	8002fd2 <StartTask_DAC+0x126>
                    }

                    noteIndex = (noteIndex + 1U) % MELODY_LEN;
 8002fe0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f897 2062 	ldrb.w	r2, [r7, #98]	@ 0x62
 8002fea:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fee:	fb01 f202 	mul.w	r2, r1, r2
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    elapsed   = HAL_GetTick() - startTick;
 8002ff8:	f000 ff58 	bl	8003eac <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	667b      	str	r3, [r7, #100]	@ 0x64
            while (elapsed < TOTAL_MS)
 8003004:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003008:	429a      	cmp	r2, r3
 800300a:	d388      	bcc.n	8002f1e <StartTask_DAC+0x72>
 800300c:	e002      	b.n	8003014 <StartTask_DAC+0x168>
                if (elapsed >= TOTAL_MS) break;
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <StartTask_DAC+0x168>
                    if (elapsed >= TOTAL_MS) break;
 8003012:	bf00      	nop
                }
            }

            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8003014:	2300      	movs	r3, #0
 8003016:	2200      	movs	r2, #0
 8003018:	2110      	movs	r1, #16
 800301a:	4817      	ldr	r0, [pc, #92]	@ (8003078 <StartTask_DAC+0x1cc>)
 800301c:	f002 fb61 	bl	80056e2 <HAL_DAC_SetValue>

            len = snprintf(uartBuf, sizeof(uartBuf),
 8003020:	f107 0308 	add.w	r3, r7, #8
 8003024:	4a1a      	ldr	r2, [pc, #104]	@ (8003090 <StartTask_DAC+0x1e4>)
 8003026:	2140      	movs	r1, #64	@ 0x40
 8003028:	4618      	mov	r0, r3
 800302a:	f008 f965 	bl	800b2f8 <sniprintf>
 800302e:	6578      	str	r0, [r7, #84]	@ 0x54
                           "Task02_4: --> SleepMode\r\n");
            HAL_UART_Transmit(&huart4, (uint8_t *)uartBuf, len, HAL_MAX_DELAY);
 8003030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003032:	b29a      	uxth	r2, r3
 8003034:	f107 0108 	add.w	r1, r7, #8
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	4811      	ldr	r0, [pc, #68]	@ (8003084 <StartTask_DAC+0x1d8>)
 800303e:	f004 f9d5 	bl	80073ec <HAL_UART_Transmit>

            sleepMode_init();
 8003042:	f7ff f8d7 	bl	80021f4 <sleepMode_init>

            len = snprintf(uartBuf, sizeof(uartBuf),
 8003046:	f107 0308 	add.w	r3, r7, #8
 800304a:	4a12      	ldr	r2, [pc, #72]	@ (8003094 <StartTask_DAC+0x1e8>)
 800304c:	2140      	movs	r1, #64	@ 0x40
 800304e:	4618      	mov	r0, r3
 8003050:	f008 f952 	bl	800b2f8 <sniprintf>
 8003054:	6578      	str	r0, [r7, #84]	@ 0x54
                           "Task02_4: WOKE UP !\r\n");
            HAL_UART_Transmit(&huart4, (uint8_t *)uartBuf, len, HAL_MAX_DELAY);
 8003056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003058:	b29a      	uxth	r2, r3
 800305a:	f107 0108 	add.w	r1, r7, #8
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	4808      	ldr	r0, [pc, #32]	@ (8003084 <StartTask_DAC+0x1d8>)
 8003064:	f004 f9c2 	bl	80073ec <HAL_UART_Transmit>

            FLAG_DAC = false;
 8003068:	4b04      	ldr	r3, [pc, #16]	@ (800307c <StartTask_DAC+0x1d0>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e736      	b.n	8002ede <StartTask_DAC+0x32>

        }
        else
        {
            osDelay(100);
 8003070:	2064      	movs	r0, #100	@ 0x64
 8003072:	f004 fe97 	bl	8007da4 <osDelay>
        if (FLAG_DAC)
 8003076:	e732      	b.n	8002ede <StartTask_DAC+0x32>
 8003078:	200002a8 	.word	0x200002a8
 800307c:	2000037d 	.word	0x2000037d
 8003080:	0800d7cc 	.word	0x0800d7cc
 8003084:	20000314 	.word	0x20000314
 8003088:	0800d7e8 	.word	0x0800d7e8
 800308c:	0800e43c 	.word	0x0800e43c
 8003090:	0800d808 	.word	0x0800d808
 8003094:	0800d824 	.word	0x0800d824

08003098 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80030aa:	f000 feeb 	bl	8003e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030ba:	b672      	cpsid	i
}
 80030bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030be:	bf00      	nop
 80030c0:	e7fd      	b.n	80030be <Error_Handler+0x8>
	...

080030c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <HAL_MspInit+0x64>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	4a15      	ldr	r2, [pc, #84]	@ (8003128 <HAL_MspInit+0x64>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030da:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <HAL_MspInit+0x64>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003128 <HAL_MspInit+0x64>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003128 <HAL_MspInit+0x64>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <HAL_MspInit+0x64>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003102:	2200      	movs	r2, #0
 8003104:	210f      	movs	r1, #15
 8003106:	f06f 0001 	mvn.w	r0, #1
 800310a:	f002 fa47 	bl	800559c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2105      	movs	r1, #5
 8003112:	2001      	movs	r0, #1
 8003114:	f002 fa42 	bl	800559c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8003118:	2001      	movs	r0, #1
 800311a:	f002 fa5b 	bl	80055d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0b      	ldr	r2, [pc, #44]	@ (8003168 <HAL_ADC_MspInit+0x3c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d10d      	bne.n	800315a <HAL_ADC_MspInit+0x2e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <HAL_ADC_MspInit+0x40>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	4a09      	ldr	r2, [pc, #36]	@ (800316c <HAL_ADC_MspInit+0x40>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314c:	6453      	str	r3, [r2, #68]	@ 0x44
 800314e:	4b07      	ldr	r3, [pc, #28]	@ (800316c <HAL_ADC_MspInit+0x40>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40012000 	.word	0x40012000
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	@ 0x30
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5b      	ldr	r2, [pc, #364]	@ (80032fc <HAL_CAN_MspInit+0x18c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d14e      	bne.n	8003230 <HAL_CAN_MspInit+0xc0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003192:	4b5b      	ldr	r3, [pc, #364]	@ (8003300 <HAL_CAN_MspInit+0x190>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	4a59      	ldr	r2, [pc, #356]	@ (8003300 <HAL_CAN_MspInit+0x190>)
 800319a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800319c:	4b58      	ldr	r3, [pc, #352]	@ (8003300 <HAL_CAN_MspInit+0x190>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10d      	bne.n	80031c0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	4b56      	ldr	r3, [pc, #344]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	4a55      	ldr	r2, [pc, #340]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 80031ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b4:	4b53      	ldr	r3, [pc, #332]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031dc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ea:	2303      	movs	r3, #3
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80031ee:	2309      	movs	r3, #9
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f2:	f107 031c 	add.w	r3, r7, #28
 80031f6:	4619      	mov	r1, r3
 80031f8:	4843      	ldr	r0, [pc, #268]	@ (8003308 <HAL_CAN_MspInit+0x198>)
 80031fa:	f002 faf5 	bl	80057e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2105      	movs	r1, #5
 8003202:	2013      	movs	r0, #19
 8003204:	f002 f9ca 	bl	800559c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003208:	2013      	movs	r0, #19
 800320a:	f002 f9e3 	bl	80055d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2105      	movs	r1, #5
 8003212:	2014      	movs	r0, #20
 8003214:	f002 f9c2 	bl	800559c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003218:	2014      	movs	r0, #20
 800321a:	f002 f9db 	bl	80055d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2105      	movs	r1, #5
 8003222:	2015      	movs	r0, #21
 8003224:	f002 f9ba 	bl	800559c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003228:	2015      	movs	r0, #21
 800322a:	f002 f9d3 	bl	80055d4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 800322e:	e060      	b.n	80032f2 <HAL_CAN_MspInit+0x182>
  else if(hcan->Instance==CAN2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a35      	ldr	r2, [pc, #212]	@ (800330c <HAL_CAN_MspInit+0x19c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d15b      	bne.n	80032f2 <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	4a30      	ldr	r2, [pc, #192]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 8003244:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003248:	6413      	str	r3, [r2, #64]	@ 0x40
 800324a:	4b2e      	ldr	r3, [pc, #184]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003256:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <HAL_CAN_MspInit+0x190>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	4a28      	ldr	r2, [pc, #160]	@ (8003300 <HAL_CAN_MspInit+0x190>)
 800325e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003260:	4b27      	ldr	r3, [pc, #156]	@ (8003300 <HAL_CAN_MspInit+0x190>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d10d      	bne.n	8003284 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	4a24      	ldr	r2, [pc, #144]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 8003272:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003276:	6413      	str	r3, [r2, #64]	@ 0x40
 8003278:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	4b1e      	ldr	r3, [pc, #120]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328c:	4a1d      	ldr	r2, [pc, #116]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	6313      	str	r3, [r2, #48]	@ 0x30
 8003294:	4b1b      	ldr	r3, [pc, #108]	@ (8003304 <HAL_CAN_MspInit+0x194>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80032a0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80032a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ae:	2303      	movs	r3, #3
 80032b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80032b2:	2309      	movs	r3, #9
 80032b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b6:	f107 031c 	add.w	r3, r7, #28
 80032ba:	4619      	mov	r1, r3
 80032bc:	4814      	ldr	r0, [pc, #80]	@ (8003310 <HAL_CAN_MspInit+0x1a0>)
 80032be:	f002 fa93 	bl	80057e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2105      	movs	r1, #5
 80032c6:	203f      	movs	r0, #63	@ 0x3f
 80032c8:	f002 f968 	bl	800559c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80032cc:	203f      	movs	r0, #63	@ 0x3f
 80032ce:	f002 f981 	bl	80055d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2105      	movs	r1, #5
 80032d6:	2040      	movs	r0, #64	@ 0x40
 80032d8:	f002 f960 	bl	800559c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80032dc:	2040      	movs	r0, #64	@ 0x40
 80032de:	f002 f979 	bl	80055d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2105      	movs	r1, #5
 80032e6:	2041      	movs	r0, #65	@ 0x41
 80032e8:	f002 f958 	bl	800559c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80032ec:	2041      	movs	r0, #65	@ 0x41
 80032ee:	f002 f971 	bl	80055d4 <HAL_NVIC_EnableIRQ>
}
 80032f2:	bf00      	nop
 80032f4:	3730      	adds	r7, #48	@ 0x30
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40006400 	.word	0x40006400
 8003300:	200003a0 	.word	0x200003a0
 8003304:	40023800 	.word	0x40023800
 8003308:	40020000 	.word	0x40020000
 800330c:	40006800 	.word	0x40006800
 8003310:	40020400 	.word	0x40020400

08003314 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <HAL_DAC_MspInit+0x7c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d127      	bne.n	8003386 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	4b16      	ldr	r3, [pc, #88]	@ (8003394 <HAL_DAC_MspInit+0x80>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	4a15      	ldr	r2, [pc, #84]	@ (8003394 <HAL_DAC_MspInit+0x80>)
 8003340:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003344:	6413      	str	r3, [r2, #64]	@ 0x40
 8003346:	4b13      	ldr	r3, [pc, #76]	@ (8003394 <HAL_DAC_MspInit+0x80>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b0f      	ldr	r3, [pc, #60]	@ (8003394 <HAL_DAC_MspInit+0x80>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	4a0e      	ldr	r2, [pc, #56]	@ (8003394 <HAL_DAC_MspInit+0x80>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6313      	str	r3, [r2, #48]	@ 0x30
 8003362:	4b0c      	ldr	r3, [pc, #48]	@ (8003394 <HAL_DAC_MspInit+0x80>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800336e:	2320      	movs	r3, #32
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003372:	2303      	movs	r3, #3
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	f107 0314 	add.w	r3, r7, #20
 800337e:	4619      	mov	r1, r3
 8003380:	4805      	ldr	r0, [pc, #20]	@ (8003398 <HAL_DAC_MspInit+0x84>)
 8003382:	f002 fa31 	bl	80057e8 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8003386:	bf00      	nop
 8003388:	3728      	adds	r7, #40	@ 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40007400 	.word	0x40007400
 8003394:	40023800 	.word	0x40023800
 8003398:	40020000 	.word	0x40020000

0800339c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	@ 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a28      	ldr	r2, [pc, #160]	@ (800345c <HAL_SPI_MspInit+0xc0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d149      	bne.n	8003452 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <HAL_SPI_MspInit+0xc4>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	4a26      	ldr	r2, [pc, #152]	@ (8003460 <HAL_SPI_MspInit+0xc4>)
 80033c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ce:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <HAL_SPI_MspInit+0xc4>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <HAL_SPI_MspInit+0xc4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003460 <HAL_SPI_MspInit+0xc4>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <HAL_SPI_MspInit+0xc4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_SPI_MspInit+0xc4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <HAL_SPI_MspInit+0xc4>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	6313      	str	r3, [r2, #48]	@ 0x30
 8003406:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <HAL_SPI_MspInit+0xc4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003412:	23c0      	movs	r3, #192	@ 0xc0
 8003414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003422:	2305      	movs	r3, #5
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4619      	mov	r1, r3
 800342c:	480d      	ldr	r0, [pc, #52]	@ (8003464 <HAL_SPI_MspInit+0xc8>)
 800342e:	f002 f9db 	bl	80057e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003432:	2308      	movs	r3, #8
 8003434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003436:	2302      	movs	r3, #2
 8003438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343e:	2303      	movs	r3, #3
 8003440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003442:	2305      	movs	r3, #5
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	f107 0314 	add.w	r3, r7, #20
 800344a:	4619      	mov	r1, r3
 800344c:	4806      	ldr	r0, [pc, #24]	@ (8003468 <HAL_SPI_MspInit+0xcc>)
 800344e:	f002 f9cb 	bl	80057e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003452:	bf00      	nop
 8003454:	3728      	adds	r7, #40	@ 0x28
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40013000 	.word	0x40013000
 8003460:	40023800 	.word	0x40023800
 8003464:	40020000 	.word	0x40020000
 8003468:	40020400 	.word	0x40020400

0800346c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	@ 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <HAL_UART_MspInit+0x84>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d12c      	bne.n	80034e8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <HAL_UART_MspInit+0x88>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	4a17      	ldr	r2, [pc, #92]	@ (80034f4 <HAL_UART_MspInit+0x88>)
 8003498:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800349c:	6413      	str	r3, [r2, #64]	@ 0x40
 800349e:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <HAL_UART_MspInit+0x88>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_UART_MspInit+0x88>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <HAL_UART_MspInit+0x88>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ba:	4b0e      	ldr	r3, [pc, #56]	@ (80034f4 <HAL_UART_MspInit+0x88>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80034ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d4:	2303      	movs	r3, #3
 80034d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80034d8:	2308      	movs	r3, #8
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	4619      	mov	r1, r3
 80034e2:	4805      	ldr	r0, [pc, #20]	@ (80034f8 <HAL_UART_MspInit+0x8c>)
 80034e4:	f002 f980 	bl	80057e8 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80034e8:	bf00      	nop
 80034ea:	3728      	adds	r7, #40	@ 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40004c00 	.word	0x40004c00
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40020800 	.word	0x40020800

080034fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08e      	sub	sp, #56	@ 0x38
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	4b34      	ldr	r3, [pc, #208]	@ (80035e4 <HAL_InitTick+0xe8>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	4a33      	ldr	r2, [pc, #204]	@ (80035e4 <HAL_InitTick+0xe8>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6413      	str	r3, [r2, #64]	@ 0x40
 800351c:	4b31      	ldr	r3, [pc, #196]	@ (80035e4 <HAL_InitTick+0xe8>)
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003528:	f107 0210 	add.w	r2, r7, #16
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f002 ffea 	bl	800650c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003542:	f002 ffbb 	bl	80064bc <HAL_RCC_GetPCLK1Freq>
 8003546:	6378      	str	r0, [r7, #52]	@ 0x34
 8003548:	e004      	b.n	8003554 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800354a:	f002 ffb7 	bl	80064bc <HAL_RCC_GetPCLK1Freq>
 800354e:	4603      	mov	r3, r0
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	4a24      	ldr	r2, [pc, #144]	@ (80035e8 <HAL_InitTick+0xec>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	0c9b      	lsrs	r3, r3, #18
 800355e:	3b01      	subs	r3, #1
 8003560:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003562:	4b22      	ldr	r3, [pc, #136]	@ (80035ec <HAL_InitTick+0xf0>)
 8003564:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003568:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800356a:	4b20      	ldr	r3, [pc, #128]	@ (80035ec <HAL_InitTick+0xf0>)
 800356c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003570:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003572:	4a1e      	ldr	r2, [pc, #120]	@ (80035ec <HAL_InitTick+0xf0>)
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003578:	4b1c      	ldr	r3, [pc, #112]	@ (80035ec <HAL_InitTick+0xf0>)
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800357e:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <HAL_InitTick+0xf0>)
 8003580:	2200      	movs	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003584:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_InitTick+0xf0>)
 8003586:	2200      	movs	r2, #0
 8003588:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800358a:	4818      	ldr	r0, [pc, #96]	@ (80035ec <HAL_InitTick+0xf0>)
 800358c:	f003 fc42 	bl	8006e14 <HAL_TIM_Base_Init>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003596:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800359a:	2b00      	cmp	r3, #0
 800359c:	d11b      	bne.n	80035d6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800359e:	4813      	ldr	r0, [pc, #76]	@ (80035ec <HAL_InitTick+0xf0>)
 80035a0:	f003 fc92 	bl	8006ec8 <HAL_TIM_Base_Start_IT>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80035aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d111      	bne.n	80035d6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035b2:	201c      	movs	r0, #28
 80035b4:	f002 f80e 	bl	80055d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b0f      	cmp	r3, #15
 80035bc:	d808      	bhi.n	80035d0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80035be:	2200      	movs	r2, #0
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	201c      	movs	r0, #28
 80035c4:	f001 ffea 	bl	800559c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035c8:	4a09      	ldr	r2, [pc, #36]	@ (80035f0 <HAL_InitTick+0xf4>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e002      	b.n	80035d6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80035d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3738      	adds	r7, #56	@ 0x38
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	431bde83 	.word	0x431bde83
 80035ec:	200003a4 	.word	0x200003a4
 80035f0:	20000020 	.word	0x20000020

080035f4 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM2 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* Disable TIM2 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_UPDATE);
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_SuspendTick+0x20>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <HAL_SuspendTick+0x20>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	60da      	str	r2, [r3, #12]
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	200003a4 	.word	0x200003a4

08003618 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM2 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* Enable TIM2 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800361c:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_ResumeTick+0x20>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <HAL_ResumeTick+0x20>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	60da      	str	r2, [r3, #12]
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	200003a4 	.word	0x200003a4

0800363c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <NMI_Handler+0x4>

08003644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <HardFault_Handler+0x4>

0800364c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003650:	bf00      	nop
 8003652:	e7fd      	b.n	8003650 <MemManage_Handler+0x4>

08003654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <BusFault_Handler+0x4>

0800365c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <UsageFault_Handler+0x4>

08003664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8003676:	f002 fad7 	bl	8005c28 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}

0800367e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8003682:	2010      	movs	r0, #16
 8003684:	f002 fa98 	bl	8005bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}

0800368c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003690:	4802      	ldr	r0, [pc, #8]	@ (800369c <CAN1_TX_IRQHandler+0x10>)
 8003692:	f001 fc9c 	bl	8004fce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000258 	.word	0x20000258

080036a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80036a4:	4802      	ldr	r0, [pc, #8]	@ (80036b0 <CAN1_RX0_IRQHandler+0x10>)
 80036a6:	f001 fc92 	bl	8004fce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000258 	.word	0x20000258

080036b4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80036b8:	4802      	ldr	r0, [pc, #8]	@ (80036c4 <CAN1_RX1_IRQHandler+0x10>)
 80036ba:	f001 fc88 	bl	8004fce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000258 	.word	0x20000258

080036c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036cc:	4802      	ldr	r0, [pc, #8]	@ (80036d8 <TIM2_IRQHandler+0x10>)
 80036ce:	f003 fc6b 	bl	8006fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	200003a4 	.word	0x200003a4

080036dc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80036e0:	4802      	ldr	r0, [pc, #8]	@ (80036ec <CAN2_TX_IRQHandler+0x10>)
 80036e2:	f001 fc74 	bl	8004fce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000280 	.word	0x20000280

080036f0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80036f4:	4802      	ldr	r0, [pc, #8]	@ (8003700 <CAN2_RX0_IRQHandler+0x10>)
 80036f6:	f001 fc6a 	bl	8004fce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000280 	.word	0x20000280

08003704 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003708:	4802      	ldr	r0, [pc, #8]	@ (8003714 <CAN2_RX1_IRQHandler+0x10>)
 800370a:	f001 fc60 	bl	8004fce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000280 	.word	0x20000280

08003718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return 1;
 800371c:	2301      	movs	r3, #1
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <_kill>:

int _kill(int pid, int sig)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003732:	f007 fead 	bl	800b490 <__errno>
 8003736:	4603      	mov	r3, r0
 8003738:	2216      	movs	r2, #22
 800373a:	601a      	str	r2, [r3, #0]
  return -1;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_exit>:

void _exit (int status)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003750:	f04f 31ff 	mov.w	r1, #4294967295
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ffe7 	bl	8003728 <_kill>
  while (1) {}    /* Make sure we hang here */
 800375a:	bf00      	nop
 800375c:	e7fd      	b.n	800375a <_exit+0x12>

0800375e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e00a      	b.n	8003786 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003770:	f3af 8000 	nop.w
 8003774:	4601      	mov	r1, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	60ba      	str	r2, [r7, #8]
 800377c:	b2ca      	uxtb	r2, r1
 800377e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3301      	adds	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	dbf0      	blt.n	8003770 <_read+0x12>
  }

  return len;
 800378e:	687b      	ldr	r3, [r7, #4]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e009      	b.n	80037be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	60ba      	str	r2, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3301      	adds	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	dbf1      	blt.n	80037aa <_write+0x12>
  }
  return len;
 80037c6:	687b      	ldr	r3, [r7, #4]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_close>:

int _close(int file)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037f8:	605a      	str	r2, [r3, #4]
  return 0;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <_isatty>:

int _isatty(int file)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003810:	2301      	movs	r3, #1
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003840:	4a14      	ldr	r2, [pc, #80]	@ (8003894 <_sbrk+0x5c>)
 8003842:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <_sbrk+0x60>)
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <_sbrk+0x64>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <_sbrk+0x64>)
 8003856:	4a12      	ldr	r2, [pc, #72]	@ (80038a0 <_sbrk+0x68>)
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <_sbrk+0x64>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d207      	bcs.n	8003878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003868:	f007 fe12 	bl	800b490 <__errno>
 800386c:	4603      	mov	r3, r0
 800386e:	220c      	movs	r2, #12
 8003870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	e009      	b.n	800388c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003878:	4b08      	ldr	r3, [pc, #32]	@ (800389c <_sbrk+0x64>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800387e:	4b07      	ldr	r3, [pc, #28]	@ (800389c <_sbrk+0x64>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	4a05      	ldr	r2, [pc, #20]	@ (800389c <_sbrk+0x64>)
 8003888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800388a:	68fb      	ldr	r3, [r7, #12]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20020000 	.word	0x20020000
 8003898:	00000400 	.word	0x00000400
 800389c:	200003ec 	.word	0x200003ec
 80038a0:	20004ea8 	.word	0x20004ea8

080038a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038a8:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <SystemInit+0x20>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <SystemInit+0x20>)
 80038b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <tp_init>:
parameter:
  phwXpos: ponit to x axis
  phwYpos: ponit to y axis
******************************************************************************/
void tp_init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
	xpt2046_init();
 80038cc:	f000 f966 	bl	8003b9c <xpt2046_init>
}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <tp_draw_touch_point>:
  phwXpos: x axis
  phwYpos: y axis
	hwColor: point color
******************************************************************************/
void tp_draw_touch_point(uint16_t hwXpos, uint16_t hwYpos, uint16_t hwColor)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af02      	add	r7, sp, #8
 80038da:	4603      	mov	r3, r0
 80038dc:	80fb      	strh	r3, [r7, #6]
 80038de:	460b      	mov	r3, r1
 80038e0:	80bb      	strh	r3, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	807b      	strh	r3, [r7, #2]
	lcd_draw_line(hwXpos - 12, hwYpos, hwXpos + 13, hwYpos, hwColor);
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	3b0c      	subs	r3, #12
 80038ea:	b298      	uxth	r0, r3
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	330d      	adds	r3, #13
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	88bc      	ldrh	r4, [r7, #4]
 80038f4:	88b9      	ldrh	r1, [r7, #4]
 80038f6:	887b      	ldrh	r3, [r7, #2]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	4623      	mov	r3, r4
 80038fc:	f7fd fe99 	bl	8001632 <lcd_draw_line>
	lcd_draw_line(hwXpos, hwYpos - 12, hwXpos, hwYpos + 13, hwColor);
 8003900:	88bb      	ldrh	r3, [r7, #4]
 8003902:	3b0c      	subs	r3, #12
 8003904:	b299      	uxth	r1, r3
 8003906:	88bb      	ldrh	r3, [r7, #4]
 8003908:	330d      	adds	r3, #13
 800390a:	b29c      	uxth	r4, r3
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	88f8      	ldrh	r0, [r7, #6]
 8003910:	887b      	ldrh	r3, [r7, #2]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	4623      	mov	r3, r4
 8003916:	f7fd fe8c 	bl	8001632 <lcd_draw_line>
	lcd_draw_dot(hwXpos + 1, hwYpos + 1, hwColor);
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	3301      	adds	r3, #1
 800391e:	b298      	uxth	r0, r3
 8003920:	88bb      	ldrh	r3, [r7, #4]
 8003922:	3301      	adds	r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	4619      	mov	r1, r3
 800392a:	f7fd fe5f 	bl	80015ec <lcd_draw_dot>
	lcd_draw_dot(hwXpos - 1, hwYpos + 1, hwColor);
 800392e:	88fb      	ldrh	r3, [r7, #6]
 8003930:	3b01      	subs	r3, #1
 8003932:	b298      	uxth	r0, r3
 8003934:	88bb      	ldrh	r3, [r7, #4]
 8003936:	3301      	adds	r3, #1
 8003938:	b29b      	uxth	r3, r3
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	4619      	mov	r1, r3
 800393e:	f7fd fe55 	bl	80015ec <lcd_draw_dot>
	lcd_draw_dot(hwXpos + 1, hwYpos - 1, hwColor);
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	3301      	adds	r3, #1
 8003946:	b298      	uxth	r0, r3
 8003948:	88bb      	ldrh	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	b29b      	uxth	r3, r3
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	4619      	mov	r1, r3
 8003952:	f7fd fe4b 	bl	80015ec <lcd_draw_dot>
	lcd_draw_dot(hwXpos - 1, hwYpos - 1, hwColor);
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	3b01      	subs	r3, #1
 800395a:	b298      	uxth	r0, r3
 800395c:	88bb      	ldrh	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	4619      	mov	r1, r3
 8003966:	f7fd fe41 	bl	80015ec <lcd_draw_dot>
	lcd_draw_circle(hwXpos, hwYpos, 6, hwColor);
 800396a:	887b      	ldrh	r3, [r7, #2]
 800396c:	88b9      	ldrh	r1, [r7, #4]
 800396e:	88f8      	ldrh	r0, [r7, #6]
 8003970:	2206      	movs	r2, #6
 8003972:	f7fd fed8 	bl	8001726 <lcd_draw_circle>
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bd90      	pop	{r4, r7, pc}
	...

08003980 <tp_scan>:
//
//	return (s_tTouch.chStatus & TP_PRESS_DOWN);
//}

uint8_t tp_scan(uint8_t chCoordType)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
    if (!(XPT2046_IRQ_READ())) {
 800398a:	2110      	movs	r1, #16
 800398c:	484e      	ldr	r0, [pc, #312]	@ (8003ac8 <tp_scan+0x148>)
 800398e:	f002 f8c7 	bl	8005b20 <HAL_GPIO_ReadPin>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d172      	bne.n	8003a7e <tp_scan+0xfe>
        uint16_t raw_x, raw_y;
        if (xpt2046_twice_read_xy(&raw_x, &raw_y)) {
 8003998:	f107 020c 	add.w	r2, r7, #12
 800399c:	f107 030e 	add.w	r3, r7, #14
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f9d1 	bl	8003d4a <xpt2046_twice_read_xy>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8082 	beq.w	8003ab4 <tp_scan+0x134>
            if (raw_x > 4096 || raw_y > 4096) { // Thêm lọc giá trị thô
 80039b0:	89fb      	ldrh	r3, [r7, #14]
 80039b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b6:	d803      	bhi.n	80039c0 <tp_scan+0x40>
 80039b8:	89bb      	ldrh	r3, [r7, #12]
 80039ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039be:	d910      	bls.n	80039e2 <tp_scan+0x62>
                s_tTouch.chStatus &= ~(1 << 7);
 80039c0:	4b42      	ldr	r3, [pc, #264]	@ (8003acc <tp_scan+0x14c>)
 80039c2:	7a1b      	ldrb	r3, [r3, #8]
 80039c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4b40      	ldr	r3, [pc, #256]	@ (8003acc <tp_scan+0x14c>)
 80039cc:	721a      	strb	r2, [r3, #8]
                s_tTouch.hwXpos = s_tTouch.hwYpos = 0xffff;
 80039ce:	4b3f      	ldr	r3, [pc, #252]	@ (8003acc <tp_scan+0x14c>)
 80039d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039d4:	80da      	strh	r2, [r3, #6]
 80039d6:	4b3d      	ldr	r3, [pc, #244]	@ (8003acc <tp_scan+0x14c>)
 80039d8:	88da      	ldrh	r2, [r3, #6]
 80039da:	4b3c      	ldr	r3, [pc, #240]	@ (8003acc <tp_scan+0x14c>)
 80039dc:	809a      	strh	r2, [r3, #4]
                return 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	e06d      	b.n	8003abe <tp_scan+0x13e>
            }
            s_tTouch.hwXpos = raw_x;
 80039e2:	89fa      	ldrh	r2, [r7, #14]
 80039e4:	4b39      	ldr	r3, [pc, #228]	@ (8003acc <tp_scan+0x14c>)
 80039e6:	809a      	strh	r2, [r3, #4]
            s_tTouch.hwYpos = raw_y;
 80039e8:	89ba      	ldrh	r2, [r7, #12]
 80039ea:	4b38      	ldr	r3, [pc, #224]	@ (8003acc <tp_scan+0x14c>)
 80039ec:	80da      	strh	r2, [r3, #6]
            if (!chCoordType) {
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d133      	bne.n	8003a5c <tp_scan+0xdc>
            	// Print adc value
//            	tp_dialog();
//            	lcd_display_num(50, 30, s_tTouch.hwXpos, 4, FONT_1608, BLUE);
//            	lcd_display_num(100, 30, s_tTouch.hwYpos, 4, FONT_1608, BLUE);

                s_tTouch.hwXpos = s_tTouch.fXfac * raw_y + s_tTouch.iXoff;
 80039f4:	4b35      	ldr	r3, [pc, #212]	@ (8003acc <tp_scan+0x14c>)
 80039f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80039fa:	89bb      	ldrh	r3, [r7, #12]
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a08:	4b30      	ldr	r3, [pc, #192]	@ (8003acc <tp_scan+0x14c>)
 8003a0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a1e:	ee17 3a90 	vmov	r3, s15
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	4b29      	ldr	r3, [pc, #164]	@ (8003acc <tp_scan+0x14c>)
 8003a26:	809a      	strh	r2, [r3, #4]
                s_tTouch.hwYpos = s_tTouch.fYfac * raw_x + s_tTouch.iYoff;
 8003a28:	4b28      	ldr	r3, [pc, #160]	@ (8003acc <tp_scan+0x14c>)
 8003a2a:	ed93 7a05 	vldr	s14, [r3, #20]
 8003a2e:	89fb      	ldrh	r3, [r7, #14]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a3c:	4b23      	ldr	r3, [pc, #140]	@ (8003acc <tp_scan+0x14c>)
 8003a3e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a52:	ee17 3a90 	vmov	r3, s15
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <tp_scan+0x14c>)
 8003a5a:	80da      	strh	r2, [r3, #6]
            }
            if (0 == (s_tTouch.chStatus & TP_PRESS_DOWN)) {
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <tp_scan+0x14c>)
 8003a5e:	7a1b      	ldrb	r3, [r3, #8]
 8003a60:	b25b      	sxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db26      	blt.n	8003ab4 <tp_scan+0x134>
                s_tTouch.chStatus = TP_PRESS_DOWN | TP_PRESSED;
 8003a66:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <tp_scan+0x14c>)
 8003a68:	22c0      	movs	r2, #192	@ 0xc0
 8003a6a:	721a      	strb	r2, [r3, #8]
                s_tTouch.hwXpos0 = s_tTouch.hwXpos;
 8003a6c:	4b17      	ldr	r3, [pc, #92]	@ (8003acc <tp_scan+0x14c>)
 8003a6e:	889a      	ldrh	r2, [r3, #4]
 8003a70:	4b16      	ldr	r3, [pc, #88]	@ (8003acc <tp_scan+0x14c>)
 8003a72:	801a      	strh	r2, [r3, #0]
                s_tTouch.hwYpos0 = s_tTouch.hwYpos;
 8003a74:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <tp_scan+0x14c>)
 8003a76:	88da      	ldrh	r2, [r3, #6]
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <tp_scan+0x14c>)
 8003a7a:	805a      	strh	r2, [r3, #2]
 8003a7c:	e01a      	b.n	8003ab4 <tp_scan+0x134>
            }
        }
    } else {
        if (s_tTouch.chStatus & TP_PRESS_DOWN) {
 8003a7e:	4b13      	ldr	r3, [pc, #76]	@ (8003acc <tp_scan+0x14c>)
 8003a80:	7a1b      	ldrb	r3, [r3, #8]
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	da07      	bge.n	8003a98 <tp_scan+0x118>
            s_tTouch.chStatus &= ~(1 << 7);
 8003a88:	4b10      	ldr	r3, [pc, #64]	@ (8003acc <tp_scan+0x14c>)
 8003a8a:	7a1b      	ldrb	r3, [r3, #8]
 8003a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <tp_scan+0x14c>)
 8003a94:	721a      	strb	r2, [r3, #8]
 8003a96:	e00d      	b.n	8003ab4 <tp_scan+0x134>
        } else {
            s_tTouch.hwXpos0 = 0;
 8003a98:	4b0c      	ldr	r3, [pc, #48]	@ (8003acc <tp_scan+0x14c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	801a      	strh	r2, [r3, #0]
            s_tTouch.hwYpos0 = 0;
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <tp_scan+0x14c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	805a      	strh	r2, [r3, #2]
            s_tTouch.hwXpos = 0xffff;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <tp_scan+0x14c>)
 8003aa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aaa:	809a      	strh	r2, [r3, #4]
            s_tTouch.hwYpos = 0xffff;
 8003aac:	4b07      	ldr	r3, [pc, #28]	@ (8003acc <tp_scan+0x14c>)
 8003aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ab2:	80da      	strh	r2, [r3, #6]
        }
    }
    return (s_tTouch.chStatus & TP_PRESS_DOWN);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <tp_scan+0x14c>)
 8003ab6:	7a1b      	ldrb	r3, [r3, #8]
 8003ab8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003abc:	b2db      	uxtb	r3, r3
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40020400 	.word	0x40020400
 8003acc:	200003f0 	.word	0x200003f0

08003ad0 <tp_adjust>:
/******************************************************************************
function :	adjust touch lcd
parameter:
******************************************************************************/
void tp_adjust(void)
{	
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af02      	add	r7, sp, #8
	uint8_t  cnt = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]
	uint16_t hwTimeout = 0, d1, d2, pos_temp[4][2];
 8003ada:	2300      	movs	r3, #0
 8003adc:	82bb      	strh	r3, [r7, #20]
	uint32_t tem1, tem2;
	float fac;				

	lcd_clear_screen(WHITE);
 8003ade:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003ae2:	f7fd fba3 	bl	800122c <lcd_clear_screen>
	lcd_display_string(40, 40, (const uint8_t *)"Please use the stylus click the cross on the screen. The cross will always move until the screen adjustment is completed.",
 8003ae6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2310      	movs	r3, #16
 8003aee:	4a11      	ldr	r2, [pc, #68]	@ (8003b34 <tp_adjust+0x64>)
 8003af0:	2128      	movs	r1, #40	@ 0x28
 8003af2:	2028      	movs	r0, #40	@ 0x28
 8003af4:	f7fd fd2e 	bl	8001554 <lcd_display_string>
					16, RED);
	tp_draw_touch_point(20, 20, RED);
 8003af8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003afc:	2114      	movs	r1, #20
 8003afe:	2014      	movs	r0, #20
 8003b00:	f7ff fee8 	bl	80038d4 <tp_draw_touch_point>
	s_tTouch.chStatus = 0;
 8003b04:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <tp_adjust+0x68>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	721a      	strb	r2, [r3, #8]
	s_tTouch.fXfac = 0;
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <tp_adjust+0x68>)
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
	// ***********Hard code assign*****************************
//	s_tTouch.fYfac = -0.078144f; 			//   Dung
//	s_tTouch.iYoff = 320;
//	s_tTouch.fXfac = -0.058608f;
//	s_tTouch.iXoff = 240;
	s_tTouch.fXfac = -0.070588f;		// Finalllllllllll
 8003b12:	4b09      	ldr	r3, [pc, #36]	@ (8003b38 <tp_adjust+0x68>)
 8003b14:	4a09      	ldr	r2, [pc, #36]	@ (8003b3c <tp_adjust+0x6c>)
 8003b16:	611a      	str	r2, [r3, #16]
	s_tTouch.iXoff = 265;
 8003b18:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <tp_adjust+0x68>)
 8003b1a:	f240 1209 	movw	r2, #265	@ 0x109
 8003b1e:	815a      	strh	r2, [r3, #10]
	s_tTouch.fYfac = -0.094117f;
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <tp_adjust+0x68>)
 8003b22:	4a07      	ldr	r2, [pc, #28]	@ (8003b40 <tp_adjust+0x70>)
 8003b24:	615a      	str	r2, [r3, #20]
	s_tTouch.iYoff = 355;
 8003b26:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <tp_adjust+0x68>)
 8003b28:	f240 1263 	movw	r2, #355	@ 0x163
 8003b2c:	819a      	strh	r2, [r3, #12]
		delay_ms(10);
		if (++ hwTimeout >= 5000) {
			break;
		}
 	}
}
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	0800d864 	.word	0x0800d864
 8003b38:	200003f0 	.word	0x200003f0
 8003b3c:	bd909071 	.word	0xbd909071
 8003b40:	bdc0c06a 	.word	0xbdc0c06a

08003b44 <tp_dialog>:
/******************************************************************************
function :	dialog touch lcd
parameter:
******************************************************************************/
void tp_dialog(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af02      	add	r7, sp, #8
	lcd_clear_screen(WHITE);
 8003b4a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003b4e:	f7fd fb6d 	bl	800122c <lcd_clear_screen>
	lcd_display_string(LCD_WIDTH - 40, 0, (const uint8_t *)"CLEAR", 16, BLUE);
 8003b52:	231f      	movs	r3, #31
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	2310      	movs	r3, #16
 8003b58:	4a03      	ldr	r2, [pc, #12]	@ (8003b68 <tp_dialog+0x24>)
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	20c8      	movs	r0, #200	@ 0xc8
 8003b5e:	f7fd fcf9 	bl	8001554 <lcd_display_string>
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	0800d8e0 	.word	0x0800d8e0

08003b6c <xpt2046_write_byte>:
function :	write eight bits' data to xpt2046
parameter:
  chData : send data
******************************************************************************/
uint8_t xpt2046_write_byte(uint8_t chData)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
    //return XPT2046_WRITE_BYTE(chData);
    uint8_t received = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&hspi1, &chData, &received, 1, HAL_MAX_DELAY);
 8003b7a:	f107 020f 	add.w	r2, r7, #15
 8003b7e:	1df9      	adds	r1, r7, #7
 8003b80:	f04f 33ff 	mov.w	r3, #4294967295
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2301      	movs	r3, #1
 8003b88:	4803      	ldr	r0, [pc, #12]	@ (8003b98 <xpt2046_write_byte+0x2c>)
 8003b8a:	f002 febe 	bl	800690a <HAL_SPI_TransmitReceive>
    return received;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200002bc 	.word	0x200002bc

08003b9c <xpt2046_init>:
/******************************************************************************
function :	initial xpt2046
parameter:
******************************************************************************/
void xpt2046_init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
	uint16_t hwXpos, hwYpos;
		
	XPT2046_CS_H();
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ba8:	4806      	ldr	r0, [pc, #24]	@ (8003bc4 <xpt2046_init+0x28>)
 8003baa:	f001 ffd1 	bl	8005b50 <HAL_GPIO_WritePin>

	xpt2046_read_xy(&hwXpos, &hwYpos);
 8003bae:	1d3a      	adds	r2, r7, #4
 8003bb0:	1dbb      	adds	r3, r7, #6
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f8b1 	bl	8003d1c <xpt2046_read_xy>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40020400 	.word	0x40020400

08003bc8 <xpt2046_read_ad_value>:
function :	read ad value
parameter:
  chCmd  : send data
******************************************************************************/
uint16_t xpt2046_read_ad_value(uint8_t chCmd)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
    uint16_t hwData = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	81fb      	strh	r3, [r7, #14]
    
    XPT2046_CS_L();
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bdc:	4812      	ldr	r0, [pc, #72]	@ (8003c28 <xpt2046_read_ad_value+0x60>)
 8003bde:	f001 ffb7 	bl	8005b50 <HAL_GPIO_WritePin>
    xpt2046_write_byte(chCmd);
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ffc1 	bl	8003b6c <xpt2046_write_byte>
    hwData = xpt2046_write_byte(0x00);
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7ff ffbe 	bl	8003b6c <xpt2046_write_byte>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	81fb      	strh	r3, [r7, #14]
    hwData <<= 8;
 8003bf4:	89fb      	ldrh	r3, [r7, #14]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	81fb      	strh	r3, [r7, #14]
    hwData |= xpt2046_write_byte(0x00);
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f7ff ffb6 	bl	8003b6c <xpt2046_write_byte>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	81fb      	strh	r3, [r7, #14]
    hwData >>= 3;
 8003c0a:	89fb      	ldrh	r3, [r7, #14]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	81fb      	strh	r3, [r7, #14]
    XPT2046_CS_H();
 8003c10:	2201      	movs	r2, #1
 8003c12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c16:	4804      	ldr	r0, [pc, #16]	@ (8003c28 <xpt2046_read_ad_value+0x60>)
 8003c18:	f001 ff9a 	bl	8005b50 <HAL_GPIO_WritePin>
    
    return hwData;
 8003c1c:	89fb      	ldrh	r3, [r7, #14]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40020400 	.word	0x40020400

08003c2c <xpt2046_read_average>:
  chCmd  : send data
******************************************************************************/
#define READ_TIMES  5
#define LOST_NUM    1
uint16_t xpt2046_read_average(uint8_t chCmd)
{
 8003c2c:	b590      	push	{r4, r7, lr}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
    uint8_t i, j;
    uint16_t hwbuffer[READ_TIMES], hwSum = 0, hwTemp;
 8003c36:	2300      	movs	r3, #0
 8003c38:	82bb      	strh	r3, [r7, #20]

    for (i = 0; i < READ_TIMES; i ++) {
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
 8003c3e:	e00e      	b.n	8003c5e <xpt2046_read_average+0x32>
        hwbuffer[i] = xpt2046_read_ad_value(chCmd);
 8003c40:	7dfc      	ldrb	r4, [r7, #23]
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ffbf 	bl	8003bc8 <xpt2046_read_ad_value>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	0063      	lsls	r3, r4, #1
 8003c50:	3318      	adds	r3, #24
 8003c52:	443b      	add	r3, r7
 8003c54:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (i = 0; i < READ_TIMES; i ++) {
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	75fb      	strb	r3, [r7, #23]
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d9ed      	bls.n	8003c40 <xpt2046_read_average+0x14>
    }
    for (i = 0; i < READ_TIMES - 1; i ++) {
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]
 8003c68:	e035      	b.n	8003cd6 <xpt2046_read_average+0xaa>
        for (j = i + 1; j < READ_TIMES; j ++) {
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	75bb      	strb	r3, [r7, #22]
 8003c70:	e02b      	b.n	8003cca <xpt2046_read_average+0x9e>
            if (hwbuffer[i] > hwbuffer[j]) {
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	3318      	adds	r3, #24
 8003c78:	443b      	add	r3, r7
 8003c7a:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8003c7e:	7dbb      	ldrb	r3, [r7, #22]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	3318      	adds	r3, #24
 8003c84:	443b      	add	r3, r7
 8003c86:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d91a      	bls.n	8003cc4 <xpt2046_read_average+0x98>
                hwTemp = hwbuffer[i];
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	3318      	adds	r3, #24
 8003c94:	443b      	add	r3, r7
 8003c96:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8003c9a:	827b      	strh	r3, [r7, #18]
                hwbuffer[i] = hwbuffer[j];
 8003c9c:	7dbb      	ldrb	r3, [r7, #22]
 8003c9e:	7dfa      	ldrb	r2, [r7, #23]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	3318      	adds	r3, #24
 8003ca4:	443b      	add	r3, r7
 8003ca6:	f833 1c10 	ldrh.w	r1, [r3, #-16]
 8003caa:	0053      	lsls	r3, r2, #1
 8003cac:	3318      	adds	r3, #24
 8003cae:	443b      	add	r3, r7
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	f823 2c10 	strh.w	r2, [r3, #-16]
                hwbuffer[j] = hwTemp;
 8003cb6:	7dbb      	ldrb	r3, [r7, #22]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	3318      	adds	r3, #24
 8003cbc:	443b      	add	r3, r7
 8003cbe:	8a7a      	ldrh	r2, [r7, #18]
 8003cc0:	f823 2c10 	strh.w	r2, [r3, #-16]
        for (j = i + 1; j < READ_TIMES; j ++) {
 8003cc4:	7dbb      	ldrb	r3, [r7, #22]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	75bb      	strb	r3, [r7, #22]
 8003cca:	7dbb      	ldrb	r3, [r7, #22]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d9d0      	bls.n	8003c72 <xpt2046_read_average+0x46>
    for (i = 0; i < READ_TIMES - 1; i ++) {
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	75fb      	strb	r3, [r7, #23]
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d9c6      	bls.n	8003c6a <xpt2046_read_average+0x3e>
            }
        }
    }
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++) {
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
 8003ce0:	e00b      	b.n	8003cfa <xpt2046_read_average+0xce>
        hwSum += hwbuffer[i];
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	3318      	adds	r3, #24
 8003ce8:	443b      	add	r3, r7
 8003cea:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8003cee:	8abb      	ldrh	r3, [r7, #20]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	82bb      	strh	r3, [r7, #20]
    for (i = LOST_NUM; i < READ_TIMES - LOST_NUM; i ++) {
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	75fb      	strb	r3, [r7, #23]
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d9f0      	bls.n	8003ce2 <xpt2046_read_average+0xb6>
    }
    hwTemp = hwSum / (READ_TIMES - 2 * LOST_NUM);
 8003d00:	8abb      	ldrh	r3, [r7, #20]
 8003d02:	4a05      	ldr	r2, [pc, #20]	@ (8003d18 <xpt2046_read_average+0xec>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	827b      	strh	r3, [r7, #18]

    return hwTemp;
 8003d0c:	8a7b      	ldrh	r3, [r7, #18]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd90      	pop	{r4, r7, pc}
 8003d16:	bf00      	nop
 8003d18:	aaaaaaab 	.word	0xaaaaaaab

08003d1c <xpt2046_read_xy>:
parameter:
  phwXpos: ponit to x axis
  phwYpos: ponit to y axis
******************************************************************************/
void xpt2046_read_xy(uint16_t *phwXpos, uint16_t *phwYpos)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
	*phwXpos = xpt2046_read_average(0x90);
 8003d26:	2090      	movs	r0, #144	@ 0x90
 8003d28:	f7ff ff80 	bl	8003c2c <xpt2046_read_average>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	461a      	mov	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	801a      	strh	r2, [r3, #0]
	*phwYpos = xpt2046_read_average(0xD0);
 8003d34:	20d0      	movs	r0, #208	@ 0xd0
 8003d36:	f7ff ff79 	bl	8003c2c <xpt2046_read_average>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	801a      	strh	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <xpt2046_twice_read_xy>:
  phwXpos: point to x axis
  phwYpos: point to y axis
******************************************************************************/
#define ERR_RANGE 50
uint8_t xpt2046_twice_read_xy(uint16_t *phwXpos, uint16_t *phwYpos)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
	uint16_t hwXpos1, hwYpos1, hwXpos2, hwYpos2;

	xpt2046_read_xy(&hwXpos1, &hwYpos1);
 8003d54:	f107 020c 	add.w	r2, r7, #12
 8003d58:	f107 030e 	add.w	r3, r7, #14
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ffdc 	bl	8003d1c <xpt2046_read_xy>
	xpt2046_read_xy(&hwXpos2, &hwYpos2);
 8003d64:	f107 0208 	add.w	r2, r7, #8
 8003d68:	f107 030a 	add.w	r3, r7, #10
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ffd4 	bl	8003d1c <xpt2046_read_xy>

	if (((hwXpos2 <= hwXpos1 && hwXpos1 < hwXpos2 + ERR_RANGE) || (hwXpos1 <= hwXpos2 && hwXpos2 < hwXpos1 + ERR_RANGE))
 8003d74:	897a      	ldrh	r2, [r7, #10]
 8003d76:	89fb      	ldrh	r3, [r7, #14]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d804      	bhi.n	8003d86 <xpt2046_twice_read_xy+0x3c>
 8003d7c:	897b      	ldrh	r3, [r7, #10]
 8003d7e:	3331      	adds	r3, #49	@ 0x31
 8003d80:	89fa      	ldrh	r2, [r7, #14]
 8003d82:	4293      	cmp	r3, r2
 8003d84:	da08      	bge.n	8003d98 <xpt2046_twice_read_xy+0x4e>
 8003d86:	89fa      	ldrh	r2, [r7, #14]
 8003d88:	897b      	ldrh	r3, [r7, #10]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d828      	bhi.n	8003de0 <xpt2046_twice_read_xy+0x96>
 8003d8e:	89fb      	ldrh	r3, [r7, #14]
 8003d90:	3331      	adds	r3, #49	@ 0x31
 8003d92:	897a      	ldrh	r2, [r7, #10]
 8003d94:	4293      	cmp	r3, r2
 8003d96:	db23      	blt.n	8003de0 <xpt2046_twice_read_xy+0x96>
	&& ((hwYpos2 <= hwYpos1 && hwYpos1 < hwYpos2 + ERR_RANGE) || (hwYpos1 <= hwYpos2 && hwYpos2 < hwYpos1 + ERR_RANGE))) {
 8003d98:	893a      	ldrh	r2, [r7, #8]
 8003d9a:	89bb      	ldrh	r3, [r7, #12]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d804      	bhi.n	8003daa <xpt2046_twice_read_xy+0x60>
 8003da0:	893b      	ldrh	r3, [r7, #8]
 8003da2:	3331      	adds	r3, #49	@ 0x31
 8003da4:	89ba      	ldrh	r2, [r7, #12]
 8003da6:	4293      	cmp	r3, r2
 8003da8:	da08      	bge.n	8003dbc <xpt2046_twice_read_xy+0x72>
 8003daa:	89ba      	ldrh	r2, [r7, #12]
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d816      	bhi.n	8003de0 <xpt2046_twice_read_xy+0x96>
 8003db2:	89bb      	ldrh	r3, [r7, #12]
 8003db4:	3331      	adds	r3, #49	@ 0x31
 8003db6:	893a      	ldrh	r2, [r7, #8]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	db11      	blt.n	8003de0 <xpt2046_twice_read_xy+0x96>
		*phwXpos = (hwXpos1 + hwXpos2) >> 1;
 8003dbc:	89fb      	ldrh	r3, [r7, #14]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	897b      	ldrh	r3, [r7, #10]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	105b      	asrs	r3, r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	801a      	strh	r2, [r3, #0]
		*phwYpos = (hwYpos1 + hwYpos2) >> 1;
 8003dcc:	89bb      	ldrh	r3, [r7, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	105b      	asrs	r3, r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	801a      	strh	r2, [r3, #0]
		return 1;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <xpt2046_twice_read_xy+0x98>
	}

	return 0;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003dec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003df0:	f7ff fd58 	bl	80038a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003df4:	480c      	ldr	r0, [pc, #48]	@ (8003e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003df6:	490d      	ldr	r1, [pc, #52]	@ (8003e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003df8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dfc:	e002      	b.n	8003e04 <LoopCopyDataInit>

08003dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e02:	3304      	adds	r3, #4

08003e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e08:	d3f9      	bcc.n	8003dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e10:	e001      	b.n	8003e16 <LoopFillZerobss>

08003e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e14:	3204      	adds	r2, #4

08003e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e18:	d3fb      	bcc.n	8003e12 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003e1a:	f007 fb3f 	bl	800b49c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e1e:	f7fe fa57 	bl	80022d0 <main>
  bx  lr    
 8003e22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e2c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003e30:	0800e7e8 	.word	0x0800e7e8
  ldr r2, =_sbss
 8003e34:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003e38:	20004ea8 	.word	0x20004ea8

08003e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e3c:	e7fe      	b.n	8003e3c <ADC_IRQHandler>
	...

08003e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e44:	4b0e      	ldr	r3, [pc, #56]	@ (8003e80 <HAL_Init+0x40>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0d      	ldr	r2, [pc, #52]	@ (8003e80 <HAL_Init+0x40>)
 8003e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e50:	4b0b      	ldr	r3, [pc, #44]	@ (8003e80 <HAL_Init+0x40>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0a      	ldr	r2, [pc, #40]	@ (8003e80 <HAL_Init+0x40>)
 8003e56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e5c:	4b08      	ldr	r3, [pc, #32]	@ (8003e80 <HAL_Init+0x40>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a07      	ldr	r2, [pc, #28]	@ (8003e80 <HAL_Init+0x40>)
 8003e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e68:	2003      	movs	r0, #3
 8003e6a:	f001 fb8c 	bl	8005586 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e6e:	200f      	movs	r0, #15
 8003e70:	f7ff fb44 	bl	80034fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e74:	f7ff f926 	bl	80030c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023c00 	.word	0x40023c00

08003e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e88:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_IncTick+0x20>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <HAL_IncTick+0x24>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	4a04      	ldr	r2, [pc, #16]	@ (8003ea8 <HAL_IncTick+0x24>)
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000024 	.word	0x20000024
 8003ea8:	20000408 	.word	0x20000408

08003eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return uwTick;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	@ (8003ec0 <HAL_GetTick+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000408 	.word	0x20000408

08003ec4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e033      	b.n	8003f42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff f922 	bl	800312c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d118      	bne.n	8003f34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f0a:	f023 0302 	bic.w	r3, r3, #2
 8003f0e:	f043 0202 	orr.w	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fad8 	bl	80044cc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f023 0303 	bic.w	r3, r3, #3
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f32:	e001      	b.n	8003f38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_ADC_Start+0x1a>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0b2      	b.n	80040cc <HAL_ADC_Start+0x180>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d018      	beq.n	8003fae <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f8c:	4b52      	ldr	r3, [pc, #328]	@ (80040d8 <HAL_ADC_Start+0x18c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a52      	ldr	r2, [pc, #328]	@ (80040dc <HAL_ADC_Start+0x190>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	0c9a      	lsrs	r2, r3, #18
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003fa0:	e002      	b.n	8003fa8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f9      	bne.n	8003fa2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d17a      	bne.n	80040b2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003fe6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffa:	d106      	bne.n	800400a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004000:	f023 0206 	bic.w	r2, r3, #6
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	645a      	str	r2, [r3, #68]	@ 0x44
 8004008:	e002      	b.n	8004010 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004018:	4b31      	ldr	r3, [pc, #196]	@ (80040e0 <HAL_ADC_Start+0x194>)
 800401a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004024:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	2b00      	cmp	r3, #0
 8004030:	d12a      	bne.n	8004088 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2b      	ldr	r2, [pc, #172]	@ (80040e4 <HAL_ADC_Start+0x198>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d015      	beq.n	8004068 <HAL_ADC_Start+0x11c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a29      	ldr	r2, [pc, #164]	@ (80040e8 <HAL_ADC_Start+0x19c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d105      	bne.n	8004052 <HAL_ADC_Start+0x106>
 8004046:	4b26      	ldr	r3, [pc, #152]	@ (80040e0 <HAL_ADC_Start+0x194>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a25      	ldr	r2, [pc, #148]	@ (80040ec <HAL_ADC_Start+0x1a0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d136      	bne.n	80040ca <HAL_ADC_Start+0x17e>
 800405c:	4b20      	ldr	r3, [pc, #128]	@ (80040e0 <HAL_ADC_Start+0x194>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b00      	cmp	r3, #0
 8004066:	d130      	bne.n	80040ca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d129      	bne.n	80040ca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004084:	609a      	str	r2, [r3, #8]
 8004086:	e020      	b.n	80040ca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a15      	ldr	r2, [pc, #84]	@ (80040e4 <HAL_ADC_Start+0x198>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d11b      	bne.n	80040ca <HAL_ADC_Start+0x17e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d114      	bne.n	80040ca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	e00b      	b.n	80040ca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f043 0210 	orr.w	r2, r3, #16
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	2000001c 	.word	0x2000001c
 80040dc:	431bde83 	.word	0x431bde83
 80040e0:	40012300 	.word	0x40012300
 80040e4:	40012000 	.word	0x40012000
 80040e8:	40012100 	.word	0x40012100
 80040ec:	40012200 	.word	0x40012200

080040f0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_ADC_Stop+0x16>
 8004102:	2302      	movs	r3, #2
 8004104:	e021      	b.n	800414a <HAL_ADC_Stop+0x5a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004134:	f023 0301 	bic.w	r3, r3, #1
 8004138:	f043 0201 	orr.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004172:	d113      	bne.n	800419c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800417e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004182:	d10b      	bne.n	800419c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e063      	b.n	8004264 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800419c:	f7ff fe86 	bl	8003eac <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041a2:	e021      	b.n	80041e8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d01d      	beq.n	80041e8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_ADC_PollForConversion+0x6c>
 80041b2:	f7ff fe7b 	bl	8003eac <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d212      	bcs.n	80041e8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d00b      	beq.n	80041e8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f043 0204 	orr.w	r2, r3, #4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e03d      	b.n	8004264 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d1d6      	bne.n	80041a4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f06f 0212 	mvn.w	r2, #18
 80041fe:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d123      	bne.n	8004262 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800421e:	2b00      	cmp	r3, #0
 8004220:	d11f      	bne.n	8004262 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800422c:	2b00      	cmp	r3, #0
 800422e:	d006      	beq.n	800423e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800423a:	2b00      	cmp	r3, #0
 800423c:	d111      	bne.n	8004262 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d105      	bne.n	8004262 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x1c>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e105      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x228>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b09      	cmp	r3, #9
 80042b2:	d925      	bls.n	8004300 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68d9      	ldr	r1, [r3, #12]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	3b1e      	subs	r3, #30
 80042ca:	2207      	movs	r2, #7
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43da      	mvns	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	400a      	ands	r2, r1
 80042d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68d9      	ldr	r1, [r3, #12]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	4618      	mov	r0, r3
 80042ec:	4603      	mov	r3, r0
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4403      	add	r3, r0
 80042f2:	3b1e      	subs	r3, #30
 80042f4:	409a      	lsls	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	60da      	str	r2, [r3, #12]
 80042fe:	e022      	b.n	8004346 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6919      	ldr	r1, [r3, #16]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	2207      	movs	r2, #7
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43da      	mvns	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	400a      	ands	r2, r1
 8004322:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6919      	ldr	r1, [r3, #16]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	4618      	mov	r0, r3
 8004336:	4603      	mov	r3, r0
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4403      	add	r3, r0
 800433c:	409a      	lsls	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b06      	cmp	r3, #6
 800434c:	d824      	bhi.n	8004398 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	3b05      	subs	r3, #5
 8004360:	221f      	movs	r2, #31
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	400a      	ands	r2, r1
 800436e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	4618      	mov	r0, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	3b05      	subs	r3, #5
 800438a:	fa00 f203 	lsl.w	r2, r0, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	635a      	str	r2, [r3, #52]	@ 0x34
 8004396:	e04c      	b.n	8004432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b0c      	cmp	r3, #12
 800439e:	d824      	bhi.n	80043ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	3b23      	subs	r3, #35	@ 0x23
 80043b2:	221f      	movs	r2, #31
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43da      	mvns	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	400a      	ands	r2, r1
 80043c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	4618      	mov	r0, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	3b23      	subs	r3, #35	@ 0x23
 80043dc:	fa00 f203 	lsl.w	r2, r0, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80043e8:	e023      	b.n	8004432 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	3b41      	subs	r3, #65	@ 0x41
 80043fc:	221f      	movs	r2, #31
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	400a      	ands	r2, r1
 800440a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	4618      	mov	r0, r3
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	3b41      	subs	r3, #65	@ 0x41
 8004426:	fa00 f203 	lsl.w	r2, r0, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004432:	4b22      	ldr	r3, [pc, #136]	@ (80044bc <HAL_ADC_ConfigChannel+0x234>)
 8004434:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a21      	ldr	r2, [pc, #132]	@ (80044c0 <HAL_ADC_ConfigChannel+0x238>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d109      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x1cc>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b12      	cmp	r3, #18
 8004446:	d105      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <HAL_ADC_ConfigChannel+0x238>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d123      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x21e>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b10      	cmp	r3, #16
 8004464:	d003      	beq.n	800446e <HAL_ADC_ConfigChannel+0x1e6>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b11      	cmp	r3, #17
 800446c:	d11b      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b10      	cmp	r3, #16
 8004480:	d111      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004482:	4b10      	ldr	r3, [pc, #64]	@ (80044c4 <HAL_ADC_ConfigChannel+0x23c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a10      	ldr	r2, [pc, #64]	@ (80044c8 <HAL_ADC_ConfigChannel+0x240>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	0c9a      	lsrs	r2, r3, #18
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004498:	e002      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3b01      	subs	r3, #1
 800449e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f9      	bne.n	800449a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	40012300 	.word	0x40012300
 80044c0:	40012000 	.word	0x40012000
 80044c4:	2000001c 	.word	0x2000001c
 80044c8:	431bde83 	.word	0x431bde83

080044cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044d4:	4b79      	ldr	r3, [pc, #484]	@ (80046bc <ADC_Init+0x1f0>)
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	431a      	orrs	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	021a      	lsls	r2, r3, #8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004546:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6899      	ldr	r1, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455e:	4a58      	ldr	r2, [pc, #352]	@ (80046c0 <ADC_Init+0x1f4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d022      	beq.n	80045aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004572:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6899      	ldr	r1, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6899      	ldr	r1, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	e00f      	b.n	80045ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80045c8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0202 	bic.w	r2, r2, #2
 80045d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6899      	ldr	r1, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	7e1b      	ldrb	r3, [r3, #24]
 80045e4:	005a      	lsls	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01b      	beq.n	8004630 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004606:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004616:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	3b01      	subs	r3, #1
 8004624:	035a      	lsls	r2, r3, #13
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	e007      	b.n	8004640 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800463e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800464e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	3b01      	subs	r3, #1
 800465c:	051a      	lsls	r2, r3, #20
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004682:	025a      	lsls	r2, r3, #9
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6899      	ldr	r1, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	029a      	lsls	r2, r3, #10
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40012300 	.word	0x40012300
 80046c0:	0f000001 	.word	0x0f000001

080046c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e0ed      	b.n	80048b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fe fd44 	bl	8003170 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046f8:	f7ff fbd8 	bl	8003eac <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046fe:	e012      	b.n	8004726 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004700:	f7ff fbd4 	bl	8003eac <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b0a      	cmp	r3, #10
 800470c:	d90b      	bls.n	8004726 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2205      	movs	r2, #5
 800471e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0c5      	b.n	80048b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0e5      	beq.n	8004700 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0202 	bic.w	r2, r2, #2
 8004742:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004744:	f7ff fbb2 	bl	8003eac <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800474a:	e012      	b.n	8004772 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800474c:	f7ff fbae 	bl	8003eac <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b0a      	cmp	r3, #10
 8004758:	d90b      	bls.n	8004772 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2205      	movs	r2, #5
 800476a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e09f      	b.n	80048b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e5      	bne.n	800474c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	7e1b      	ldrb	r3, [r3, #24]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d108      	bne.n	800479a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e007      	b.n	80047aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	7e5b      	ldrb	r3, [r3, #25]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e007      	b.n	80047d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	7e9b      	ldrb	r3, [r3, #26]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d108      	bne.n	80047ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0220 	orr.w	r2, r2, #32
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0220 	bic.w	r2, r2, #32
 80047fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7edb      	ldrb	r3, [r3, #27]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d108      	bne.n	8004818 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0210 	bic.w	r2, r2, #16
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0210 	orr.w	r2, r2, #16
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7f1b      	ldrb	r3, [r3, #28]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d108      	bne.n	8004842 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0208 	orr.w	r2, r2, #8
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e007      	b.n	8004852 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0208 	bic.w	r2, r2, #8
 8004850:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	7f5b      	ldrb	r3, [r3, #29]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d108      	bne.n	800486c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0204 	orr.w	r2, r2, #4
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e007      	b.n	800487c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0204 	bic.w	r2, r2, #4
 800487a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	ea42 0103 	orr.w	r1, r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	1e5a      	subs	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048cc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d003      	beq.n	80048dc <HAL_CAN_ConfigFilter+0x20>
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	f040 80be 	bne.w	8004a58 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80048dc:	4b65      	ldr	r3, [pc, #404]	@ (8004a74 <HAL_CAN_ConfigFilter+0x1b8>)
 80048de:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048e6:	f043 0201 	orr.w	r2, r3, #1
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048f6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	431a      	orrs	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	2201      	movs	r2, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	43db      	mvns	r3, r3
 800492e:	401a      	ands	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d123      	bne.n	8004986 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	43db      	mvns	r3, r3
 8004948:	401a      	ands	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004960:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3248      	adds	r2, #72	@ 0x48
 8004966:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800497a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800497c:	6939      	ldr	r1, [r7, #16]
 800497e:	3348      	adds	r3, #72	@ 0x48
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	440b      	add	r3, r1
 8004984:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d122      	bne.n	80049d4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	431a      	orrs	r2, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	3248      	adds	r2, #72	@ 0x48
 80049b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049ca:	6939      	ldr	r1, [r7, #16]
 80049cc:	3348      	adds	r3, #72	@ 0x48
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	440b      	add	r3, r1
 80049d2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	401a      	ands	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80049ee:	e007      	b.n	8004a00 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	401a      	ands	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004a1a:	e007      	b.n	8004a2c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e006      	b.n	8004a66 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
  }
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40006400 	.word	0x40006400

08004a78 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d12e      	bne.n	8004aea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa4:	f7ff fa02 	bl	8003eac <HAL_GetTick>
 8004aa8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004aaa:	e012      	b.n	8004ad2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004aac:	f7ff f9fe 	bl	8003eac <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b0a      	cmp	r3, #10
 8004ab8:	d90b      	bls.n	8004ad2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2205      	movs	r2, #5
 8004aca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e012      	b.n	8004af8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e006      	b.n	8004af8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
  }
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b089      	sub	sp, #36	@ 0x24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b1e:	7ffb      	ldrb	r3, [r7, #31]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d003      	beq.n	8004b2c <HAL_CAN_AddTxMessage+0x2c>
 8004b24:	7ffb      	ldrb	r3, [r7, #31]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	f040 80ad 	bne.w	8004c86 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d105      	bne.n	8004b4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8095 	beq.w	8004c76 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	0e1b      	lsrs	r3, r3, #24
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004b56:	2201      	movs	r2, #1
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10d      	bne.n	8004b84 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	6809      	ldr	r1, [r1, #0]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3318      	adds	r3, #24
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	440b      	add	r3, r1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e00f      	b.n	8004ba4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b8e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b94:	68f9      	ldr	r1, [r7, #12]
 8004b96:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004b98:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	3318      	adds	r3, #24
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	440b      	add	r3, r1
 8004ba2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6819      	ldr	r1, [r3, #0]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	3318      	adds	r3, #24
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	440b      	add	r3, r1
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	7d1b      	ldrb	r3, [r3, #20]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d111      	bne.n	8004be4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3318      	adds	r3, #24
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	4413      	add	r3, r2
 8004bcc:	3304      	adds	r3, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	6811      	ldr	r1, [r2, #0]
 8004bd4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	3318      	adds	r3, #24
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	440b      	add	r3, r1
 8004be0:	3304      	adds	r3, #4
 8004be2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3307      	adds	r3, #7
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	061a      	lsls	r2, r3, #24
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3306      	adds	r3, #6
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3305      	adds	r3, #5
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	3204      	adds	r2, #4
 8004c04:	7812      	ldrb	r2, [r2, #0]
 8004c06:	4610      	mov	r0, r2
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	6811      	ldr	r1, [r2, #0]
 8004c0c:	ea43 0200 	orr.w	r2, r3, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004c1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3303      	adds	r3, #3
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	061a      	lsls	r2, r3, #24
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3302      	adds	r3, #2
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3301      	adds	r3, #1
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	4313      	orrs	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	6811      	ldr	r1, [r2, #0]
 8004c42:	ea43 0200 	orr.w	r2, r3, r0
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	440b      	add	r3, r1
 8004c4c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004c50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	3318      	adds	r3, #24
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	4413      	add	r3, r2
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	6811      	ldr	r1, [r2, #0]
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3318      	adds	r3, #24
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	440b      	add	r3, r1
 8004c70:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e00e      	b.n	8004c94 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e006      	b.n	8004c94 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
  }
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3724      	adds	r7, #36	@ 0x24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cb4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d003      	beq.n	8004cc4 <HAL_CAN_GetRxMessage+0x24>
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	f040 8103 	bne.w	8004eca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10e      	bne.n	8004ce8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d116      	bne.n	8004d06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0f7      	b.n	8004ed8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d107      	bne.n	8004d06 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e0e8      	b.n	8004ed8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	331b      	adds	r3, #27
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	4413      	add	r3, r2
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0204 	and.w	r2, r3, #4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10c      	bne.n	8004d3e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	331b      	adds	r3, #27
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	4413      	add	r3, r2
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	0d5b      	lsrs	r3, r3, #21
 8004d34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e00b      	b.n	8004d56 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	331b      	adds	r3, #27
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	4413      	add	r3, r2
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	08db      	lsrs	r3, r3, #3
 8004d4e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	331b      	adds	r3, #27
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	4413      	add	r3, r2
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0202 	and.w	r2, r3, #2
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	331b      	adds	r3, #27
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	4413      	add	r3, r2
 8004d78:	3304      	adds	r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2208      	movs	r2, #8
 8004d88:	611a      	str	r2, [r3, #16]
 8004d8a:	e00b      	b.n	8004da4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	331b      	adds	r3, #27
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	4413      	add	r3, r2
 8004d98:	3304      	adds	r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	331b      	adds	r3, #27
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	4413      	add	r3, r2
 8004db0:	3304      	adds	r3, #4
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	331b      	adds	r3, #27
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3304      	adds	r3, #4
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	0a1a      	lsrs	r2, r3, #8
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	0c1a      	lsrs	r2, r3, #16
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	3302      	adds	r3, #2
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	0e1a      	lsrs	r2, r3, #24
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	3303      	adds	r3, #3
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	0a1a      	lsrs	r2, r3, #8
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	3305      	adds	r3, #5
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	0c1a      	lsrs	r2, r3, #16
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	3306      	adds	r3, #6
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	0e1a      	lsrs	r2, r3, #24
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	3307      	adds	r3, #7
 8004e9a:	b2d2      	uxtb	r2, r2
 8004e9c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d108      	bne.n	8004eb6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0220 	orr.w	r2, r2, #32
 8004eb2:	60da      	str	r2, [r3, #12]
 8004eb4:	e007      	b.n	8004ec6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0220 	orr.w	r2, r2, #32
 8004ec4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e006      	b.n	8004ed8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ece:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ef8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004efa:	7afb      	ldrb	r3, [r7, #11]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d002      	beq.n	8004f06 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004f00:	7afb      	ldrb	r3, [r7, #11]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d10f      	bne.n	8004f26 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	e005      	b.n	8004f26 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004f26:	68fb      	ldr	r3, [r7, #12]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f44:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d002      	beq.n	8004f52 <HAL_CAN_ActivateNotification+0x1e>
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d109      	bne.n	8004f66 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6959      	ldr	r1, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e006      	b.n	8004f74 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
  }
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f90:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d002      	beq.n	8004f9e <HAL_CAN_DeactivateNotification+0x1e>
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d10a      	bne.n	8004fb4 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6959      	ldr	r1, [r3, #20]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	400a      	ands	r2, r1
 8004fae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e006      	b.n	8004fc2 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
  }
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08a      	sub	sp, #40	@ 0x28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d07c      	beq.n	800510e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d023      	beq.n	8005066 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2201      	movs	r2, #1
 8005024:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f983 	bl	800533c <HAL_CAN_TxMailbox0CompleteCallback>
 8005036:	e016      	b.n	8005066 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005044:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005048:	627b      	str	r3, [r7, #36]	@ 0x24
 800504a:	e00c      	b.n	8005066 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
 800505e:	e002      	b.n	8005066 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f989 	bl	8005378 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d024      	beq.n	80050ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005078:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f963 	bl	8005350 <HAL_CAN_TxMailbox1CompleteCallback>
 800508a:	e016      	b.n	80050ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
 800509e:	e00c      	b.n	80050ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b2:	e002      	b.n	80050ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f969 	bl	800538c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d024      	beq.n	800510e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80050cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f943 	bl	8005364 <HAL_CAN_TxMailbox2CompleteCallback>
 80050de:	e016      	b.n	800510e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f2:	e00c      	b.n	800510e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d004      	beq.n	8005108 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
 8005106:	e002      	b.n	800510e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f949 	bl	80053a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00c      	beq.n	8005132 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2210      	movs	r2, #16
 8005130:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d006      	beq.n	8005154 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2208      	movs	r2, #8
 800514c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f930 	bl	80053b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fd fbed 	bl	800294c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00c      	beq.n	8005196 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2210      	movs	r2, #16
 8005194:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00b      	beq.n	80051b8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2208      	movs	r2, #8
 80051b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f912 	bl	80053dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f8f9 	bl	80053c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d006      	beq.n	80051f8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2210      	movs	r2, #16
 80051f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f8fc 	bl	80053f0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2208      	movs	r2, #8
 8005212:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f8f5 	bl	8005404 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d07b      	beq.n	800531c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d072      	beq.n	8005314 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	f043 0304 	orr.w	r3, r3, #4
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005288:	2b00      	cmp	r3, #0
 800528a:	d043      	beq.n	8005314 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005292:	2b00      	cmp	r3, #0
 8005294:	d03e      	beq.n	8005314 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800529c:	2b60      	cmp	r3, #96	@ 0x60
 800529e:	d02b      	beq.n	80052f8 <HAL_CAN_IRQHandler+0x32a>
 80052a0:	2b60      	cmp	r3, #96	@ 0x60
 80052a2:	d82e      	bhi.n	8005302 <HAL_CAN_IRQHandler+0x334>
 80052a4:	2b50      	cmp	r3, #80	@ 0x50
 80052a6:	d022      	beq.n	80052ee <HAL_CAN_IRQHandler+0x320>
 80052a8:	2b50      	cmp	r3, #80	@ 0x50
 80052aa:	d82a      	bhi.n	8005302 <HAL_CAN_IRQHandler+0x334>
 80052ac:	2b40      	cmp	r3, #64	@ 0x40
 80052ae:	d019      	beq.n	80052e4 <HAL_CAN_IRQHandler+0x316>
 80052b0:	2b40      	cmp	r3, #64	@ 0x40
 80052b2:	d826      	bhi.n	8005302 <HAL_CAN_IRQHandler+0x334>
 80052b4:	2b30      	cmp	r3, #48	@ 0x30
 80052b6:	d010      	beq.n	80052da <HAL_CAN_IRQHandler+0x30c>
 80052b8:	2b30      	cmp	r3, #48	@ 0x30
 80052ba:	d822      	bhi.n	8005302 <HAL_CAN_IRQHandler+0x334>
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d002      	beq.n	80052c6 <HAL_CAN_IRQHandler+0x2f8>
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d005      	beq.n	80052d0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80052c4:	e01d      	b.n	8005302 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	f043 0308 	orr.w	r3, r3, #8
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80052ce:	e019      	b.n	8005304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	f043 0310 	orr.w	r3, r3, #16
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80052d8:	e014      	b.n	8005304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	f043 0320 	orr.w	r3, r3, #32
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80052e2:	e00f      	b.n	8005304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80052ec:	e00a      	b.n	8005304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80052f6:	e005      	b.n	8005304 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005300:	e000      	b.n	8005304 <HAL_CAN_IRQHandler+0x336>
            break;
 8005302:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005312:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2204      	movs	r2, #4
 800531a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f872 	bl	8005418 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005334:	bf00      	nop
 8005336:	3728      	adds	r7, #40	@ 0x28
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <__NVIC_SetPriorityGrouping>:
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800543c:	4b0c      	ldr	r3, [pc, #48]	@ (8005470 <__NVIC_SetPriorityGrouping+0x44>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005448:	4013      	ands	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800545c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800545e:	4a04      	ldr	r2, [pc, #16]	@ (8005470 <__NVIC_SetPriorityGrouping+0x44>)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	60d3      	str	r3, [r2, #12]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	e000ed00 	.word	0xe000ed00

08005474 <__NVIC_GetPriorityGrouping>:
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005478:	4b04      	ldr	r3, [pc, #16]	@ (800548c <__NVIC_GetPriorityGrouping+0x18>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	f003 0307 	and.w	r3, r3, #7
}
 8005482:	4618      	mov	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <__NVIC_EnableIRQ>:
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800549a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	db0b      	blt.n	80054ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	f003 021f 	and.w	r2, r3, #31
 80054a8:	4907      	ldr	r1, [pc, #28]	@ (80054c8 <__NVIC_EnableIRQ+0x38>)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	2001      	movs	r0, #1
 80054b2:	fa00 f202 	lsl.w	r2, r0, r2
 80054b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	e000e100 	.word	0xe000e100

080054cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	6039      	str	r1, [r7, #0]
 80054d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	db0a      	blt.n	80054f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	490c      	ldr	r1, [pc, #48]	@ (8005518 <__NVIC_SetPriority+0x4c>)
 80054e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ea:	0112      	lsls	r2, r2, #4
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	440b      	add	r3, r1
 80054f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054f4:	e00a      	b.n	800550c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	4908      	ldr	r1, [pc, #32]	@ (800551c <__NVIC_SetPriority+0x50>)
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	3b04      	subs	r3, #4
 8005504:	0112      	lsls	r2, r2, #4
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	440b      	add	r3, r1
 800550a:	761a      	strb	r2, [r3, #24]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	e000e100 	.word	0xe000e100
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	@ 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f1c3 0307 	rsb	r3, r3, #7
 800553a:	2b04      	cmp	r3, #4
 800553c:	bf28      	it	cs
 800553e:	2304      	movcs	r3, #4
 8005540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3304      	adds	r3, #4
 8005546:	2b06      	cmp	r3, #6
 8005548:	d902      	bls.n	8005550 <NVIC_EncodePriority+0x30>
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3b03      	subs	r3, #3
 800554e:	e000      	b.n	8005552 <NVIC_EncodePriority+0x32>
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	43da      	mvns	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	401a      	ands	r2, r3
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005568:	f04f 31ff 	mov.w	r1, #4294967295
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	43d9      	mvns	r1, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005578:	4313      	orrs	r3, r2
         );
}
 800557a:	4618      	mov	r0, r3
 800557c:	3724      	adds	r7, #36	@ 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff ff4c 	bl	800542c <__NVIC_SetPriorityGrouping>
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055ae:	f7ff ff61 	bl	8005474 <__NVIC_GetPriorityGrouping>
 80055b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	6978      	ldr	r0, [r7, #20]
 80055ba:	f7ff ffb1 	bl	8005520 <NVIC_EncodePriority>
 80055be:	4602      	mov	r2, r0
 80055c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff ff80 	bl	80054cc <__NVIC_SetPriority>
}
 80055cc:	bf00      	nop
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff ff54 	bl	8005490 <__NVIC_EnableIRQ>
}
 80055e8:	bf00      	nop
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e014      	b.n	800562c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	791b      	ldrb	r3, [r3, #4]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fd fe7e 	bl	8003314 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e046      	b.n	80056d6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	795b      	ldrb	r3, [r3, #5]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_DAC_Start+0x20>
 8005650:	2302      	movs	r3, #2
 8005652:	e040      	b.n	80056d6 <HAL_DAC_Start+0xa2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6819      	ldr	r1, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2201      	movs	r2, #1
 800566e:	409a      	lsls	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10f      	bne.n	800569e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8005688:	2b3c      	cmp	r3, #60	@ 0x3c
 800568a:	d11d      	bne.n	80056c8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	e014      	b.n	80056c8 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	213c      	movs	r1, #60	@ 0x3c
 80056b0:	fa01 f303 	lsl.w	r3, r1, r3
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d107      	bne.n	80056c8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0202 	orr.w	r2, r2, #2
 80056c6:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b087      	sub	sp, #28
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e015      	b.n	800572a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d105      	bne.n	8005716 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	3308      	adds	r3, #8
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e004      	b.n	8005720 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4413      	add	r3, r2
 800571c:	3314      	adds	r3, #20
 800571e:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	461a      	mov	r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005736:	b480      	push	{r7}
 8005738:	b089      	sub	sp, #36	@ 0x24
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <HAL_DAC_ConfigChannel+0x1c>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e042      	b.n	80057dc <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	795b      	ldrb	r3, [r3, #5]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_DAC_ConfigChannel+0x2c>
 800575e:	2302      	movs	r3, #2
 8005760:	e03c      	b.n	80057dc <HAL_DAC_ConfigChannel+0xa6>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2202      	movs	r2, #2
 800576c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6819      	ldr	r1, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	22c0      	movs	r2, #192	@ 0xc0
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43da      	mvns	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	400a      	ands	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80057da:	7ffb      	ldrb	r3, [r7, #31]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3724      	adds	r7, #36	@ 0x24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b089      	sub	sp, #36	@ 0x24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	e16b      	b.n	8005adc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005804:	2201      	movs	r2, #1
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4013      	ands	r3, r2
 8005816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	429a      	cmp	r2, r3
 800581e:	f040 815a 	bne.w	8005ad6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	2b01      	cmp	r3, #1
 800582c:	d005      	beq.n	800583a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005836:	2b02      	cmp	r3, #2
 8005838:	d130      	bne.n	800589c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	2203      	movs	r2, #3
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	43db      	mvns	r3, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4013      	ands	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	fa02 f303 	lsl.w	r3, r2, r3
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	4313      	orrs	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005870:	2201      	movs	r2, #1
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4013      	ands	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 0201 	and.w	r2, r3, #1
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4313      	orrs	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d017      	beq.n	80058d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4013      	ands	r3, r2
 80058be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	fa02 f303 	lsl.w	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d123      	bne.n	800592c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	08da      	lsrs	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3208      	adds	r2, #8
 80058ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	220f      	movs	r2, #15
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4013      	ands	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4313      	orrs	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	08da      	lsrs	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3208      	adds	r2, #8
 8005926:	69b9      	ldr	r1, [r7, #24]
 8005928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	2203      	movs	r2, #3
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	43db      	mvns	r3, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4013      	ands	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f003 0203 	and.w	r2, r3, #3
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	4313      	orrs	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80b4 	beq.w	8005ad6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	4b60      	ldr	r3, [pc, #384]	@ (8005af4 <HAL_GPIO_Init+0x30c>)
 8005974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005976:	4a5f      	ldr	r2, [pc, #380]	@ (8005af4 <HAL_GPIO_Init+0x30c>)
 8005978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800597c:	6453      	str	r3, [r2, #68]	@ 0x44
 800597e:	4b5d      	ldr	r3, [pc, #372]	@ (8005af4 <HAL_GPIO_Init+0x30c>)
 8005980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800598a:	4a5b      	ldr	r2, [pc, #364]	@ (8005af8 <HAL_GPIO_Init+0x310>)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	089b      	lsrs	r3, r3, #2
 8005990:	3302      	adds	r3, #2
 8005992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	220f      	movs	r2, #15
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43db      	mvns	r3, r3
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	4013      	ands	r3, r2
 80059ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a52      	ldr	r2, [pc, #328]	@ (8005afc <HAL_GPIO_Init+0x314>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d02b      	beq.n	8005a0e <HAL_GPIO_Init+0x226>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a51      	ldr	r2, [pc, #324]	@ (8005b00 <HAL_GPIO_Init+0x318>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d025      	beq.n	8005a0a <HAL_GPIO_Init+0x222>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a50      	ldr	r2, [pc, #320]	@ (8005b04 <HAL_GPIO_Init+0x31c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01f      	beq.n	8005a06 <HAL_GPIO_Init+0x21e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005b08 <HAL_GPIO_Init+0x320>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d019      	beq.n	8005a02 <HAL_GPIO_Init+0x21a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a4e      	ldr	r2, [pc, #312]	@ (8005b0c <HAL_GPIO_Init+0x324>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <HAL_GPIO_Init+0x216>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a4d      	ldr	r2, [pc, #308]	@ (8005b10 <HAL_GPIO_Init+0x328>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00d      	beq.n	80059fa <HAL_GPIO_Init+0x212>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a4c      	ldr	r2, [pc, #304]	@ (8005b14 <HAL_GPIO_Init+0x32c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d007      	beq.n	80059f6 <HAL_GPIO_Init+0x20e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a4b      	ldr	r2, [pc, #300]	@ (8005b18 <HAL_GPIO_Init+0x330>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d101      	bne.n	80059f2 <HAL_GPIO_Init+0x20a>
 80059ee:	2307      	movs	r3, #7
 80059f0:	e00e      	b.n	8005a10 <HAL_GPIO_Init+0x228>
 80059f2:	2308      	movs	r3, #8
 80059f4:	e00c      	b.n	8005a10 <HAL_GPIO_Init+0x228>
 80059f6:	2306      	movs	r3, #6
 80059f8:	e00a      	b.n	8005a10 <HAL_GPIO_Init+0x228>
 80059fa:	2305      	movs	r3, #5
 80059fc:	e008      	b.n	8005a10 <HAL_GPIO_Init+0x228>
 80059fe:	2304      	movs	r3, #4
 8005a00:	e006      	b.n	8005a10 <HAL_GPIO_Init+0x228>
 8005a02:	2303      	movs	r3, #3
 8005a04:	e004      	b.n	8005a10 <HAL_GPIO_Init+0x228>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e002      	b.n	8005a10 <HAL_GPIO_Init+0x228>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <HAL_GPIO_Init+0x228>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	f002 0203 	and.w	r2, r2, #3
 8005a16:	0092      	lsls	r2, r2, #2
 8005a18:	4093      	lsls	r3, r2
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a20:	4935      	ldr	r1, [pc, #212]	@ (8005af8 <HAL_GPIO_Init+0x310>)
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	089b      	lsrs	r3, r3, #2
 8005a26:	3302      	adds	r3, #2
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b1c <HAL_GPIO_Init+0x334>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	43db      	mvns	r3, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a52:	4a32      	ldr	r2, [pc, #200]	@ (8005b1c <HAL_GPIO_Init+0x334>)
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a58:	4b30      	ldr	r3, [pc, #192]	@ (8005b1c <HAL_GPIO_Init+0x334>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a7c:	4a27      	ldr	r2, [pc, #156]	@ (8005b1c <HAL_GPIO_Init+0x334>)
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a82:	4b26      	ldr	r3, [pc, #152]	@ (8005b1c <HAL_GPIO_Init+0x334>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8005b1c <HAL_GPIO_Init+0x334>)
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005aac:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <HAL_GPIO_Init+0x334>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ad0:	4a12      	ldr	r2, [pc, #72]	@ (8005b1c <HAL_GPIO_Init+0x334>)
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	f67f ae90 	bls.w	8005804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	3724      	adds	r7, #36	@ 0x24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	40013800 	.word	0x40013800
 8005afc:	40020000 	.word	0x40020000
 8005b00:	40020400 	.word	0x40020400
 8005b04:	40020800 	.word	0x40020800
 8005b08:	40020c00 	.word	0x40020c00
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40021400 	.word	0x40021400
 8005b14:	40021800 	.word	0x40021800
 8005b18:	40021c00 	.word	0x40021c00
 8005b1c:	40013c00 	.word	0x40013c00

08005b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e001      	b.n	8005b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	807b      	strh	r3, [r7, #2]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b60:	787b      	ldrb	r3, [r7, #1]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b66:	887a      	ldrh	r2, [r7, #2]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b6c:	e003      	b.n	8005b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b6e:	887b      	ldrh	r3, [r7, #2]
 8005b70:	041a      	lsls	r2, r3, #16
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	619a      	str	r2, [r3, #24]
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b94:	887a      	ldrh	r2, [r7, #2]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	041a      	lsls	r2, r3, #16
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	43d9      	mvns	r1, r3
 8005ba0:	887b      	ldrh	r3, [r7, #2]
 8005ba2:	400b      	ands	r3, r1
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	619a      	str	r2, [r3, #24]
}
 8005baa:	bf00      	nop
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005bc2:	4b08      	ldr	r3, [pc, #32]	@ (8005be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005bce:	4a05      	ldr	r2, [pc, #20]	@ (8005be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fc feac 	bl	8002934 <HAL_GPIO_EXTI_Callback>
  }
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40013c00 	.word	0x40013c00

08005be8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8005c24 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <HAL_PWR_EnterSLEEPMode+0x3c>)
 8005bfa:	f023 0304 	bic.w	r3, r3, #4
 8005bfe:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8005c06:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
 8005c08:	e005      	b.n	8005c16 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d001      	beq.n	8005c14 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
 8005c10:	bf40      	sev
      __WFE();
 8005c12:	bf20      	wfe
    __WFE();
 8005c14:	bf20      	wfe
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	e000ed00 	.word	0xe000ed00

08005c28 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005c2c:	4b06      	ldr	r3, [pc, #24]	@ (8005c48 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8005c38:	f000 f808 	bl	8005c4c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005c3c:	4b02      	ldr	r3, [pc, #8]	@ (8005c48 <HAL_PWR_PVD_IRQHandler+0x20>)
 8005c3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005c42:	615a      	str	r2, [r3, #20]
  }
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40013c00 	.word	0x40013c00

08005c4c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e267      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d075      	beq.n	8005d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c7a:	4b88      	ldr	r3, [pc, #544]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d00c      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c86:	4b85      	ldr	r3, [pc, #532]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d112      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c92:	4b82      	ldr	r3, [pc, #520]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c9e:	d10b      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d05b      	beq.n	8005d64 <HAL_RCC_OscConfig+0x108>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d157      	bne.n	8005d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e242      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cc0:	d106      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x74>
 8005cc2:	4b76      	ldr	r3, [pc, #472]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a75      	ldr	r2, [pc, #468]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	e01d      	b.n	8005d0c <HAL_RCC_OscConfig+0xb0>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x98>
 8005cda:	4b70      	ldr	r3, [pc, #448]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a6f      	ldr	r2, [pc, #444]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4b6d      	ldr	r3, [pc, #436]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a6c      	ldr	r2, [pc, #432]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCC_OscConfig+0xb0>
 8005cf4:	4b69      	ldr	r3, [pc, #420]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a68      	ldr	r2, [pc, #416]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	4b66      	ldr	r3, [pc, #408]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a65      	ldr	r2, [pc, #404]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d013      	beq.n	8005d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d14:	f7fe f8ca 	bl	8003eac <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d1c:	f7fe f8c6 	bl	8003eac <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b64      	cmp	r3, #100	@ 0x64
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e207      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0xc0>
 8005d3a:	e014      	b.n	8005d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3c:	f7fe f8b6 	bl	8003eac <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d44:	f7fe f8b2 	bl	8003eac <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b64      	cmp	r3, #100	@ 0x64
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e1f3      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d56:	4b51      	ldr	r3, [pc, #324]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0xe8>
 8005d62:	e000      	b.n	8005d66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d063      	beq.n	8005e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d72:	4b4a      	ldr	r3, [pc, #296]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d7e:	4b47      	ldr	r3, [pc, #284]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d11c      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d8a:	4b44      	ldr	r3, [pc, #272]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d116      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d96:	4b41      	ldr	r3, [pc, #260]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_RCC_OscConfig+0x152>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d001      	beq.n	8005dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e1c7      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dae:	4b3b      	ldr	r3, [pc, #236]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4937      	ldr	r1, [pc, #220]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dc2:	e03a      	b.n	8005e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d020      	beq.n	8005e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dcc:	4b34      	ldr	r3, [pc, #208]	@ (8005ea0 <HAL_RCC_OscConfig+0x244>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd2:	f7fe f86b 	bl	8003eac <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dda:	f7fe f867 	bl	8003eac <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e1a8      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dec:	4b2b      	ldr	r3, [pc, #172]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df8:	4b28      	ldr	r3, [pc, #160]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4925      	ldr	r1, [pc, #148]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	600b      	str	r3, [r1, #0]
 8005e0c:	e015      	b.n	8005e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e0e:	4b24      	ldr	r3, [pc, #144]	@ (8005ea0 <HAL_RCC_OscConfig+0x244>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fe f84a 	bl	8003eac <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e1c:	f7fe f846 	bl	8003eac <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e187      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d036      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d016      	beq.n	8005e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ea4 <HAL_RCC_OscConfig+0x248>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e54:	f7fe f82a 	bl	8003eac <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5c:	f7fe f826 	bl	8003eac <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e167      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e9c <HAL_RCC_OscConfig+0x240>)
 8005e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f0      	beq.n	8005e5c <HAL_RCC_OscConfig+0x200>
 8005e7a:	e01b      	b.n	8005eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <HAL_RCC_OscConfig+0x248>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e82:	f7fe f813 	bl	8003eac <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e88:	e00e      	b.n	8005ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e8a:	f7fe f80f 	bl	8003eac <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d907      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e150      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	42470000 	.word	0x42470000
 8005ea4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea8:	4b88      	ldr	r3, [pc, #544]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1ea      	bne.n	8005e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8097 	beq.w	8005ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ec6:	4b81      	ldr	r3, [pc, #516]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10f      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	4b7d      	ldr	r3, [pc, #500]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eda:	4a7c      	ldr	r2, [pc, #496]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ee2:	4b7a      	ldr	r3, [pc, #488]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eea:	60bb      	str	r3, [r7, #8]
 8005eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef2:	4b77      	ldr	r3, [pc, #476]	@ (80060d0 <HAL_RCC_OscConfig+0x474>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d118      	bne.n	8005f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005efe:	4b74      	ldr	r3, [pc, #464]	@ (80060d0 <HAL_RCC_OscConfig+0x474>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a73      	ldr	r2, [pc, #460]	@ (80060d0 <HAL_RCC_OscConfig+0x474>)
 8005f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f0a:	f7fd ffcf 	bl	8003eac <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f12:	f7fd ffcb 	bl	8003eac <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e10c      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f24:	4b6a      	ldr	r3, [pc, #424]	@ (80060d0 <HAL_RCC_OscConfig+0x474>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d106      	bne.n	8005f46 <HAL_RCC_OscConfig+0x2ea>
 8005f38:	4b64      	ldr	r3, [pc, #400]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3c:	4a63      	ldr	r2, [pc, #396]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f44:	e01c      	b.n	8005f80 <HAL_RCC_OscConfig+0x324>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCC_OscConfig+0x30c>
 8005f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f52:	4a5e      	ldr	r2, [pc, #376]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f54:	f043 0304 	orr.w	r3, r3, #4
 8005f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5e:	4a5b      	ldr	r2, [pc, #364]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f60:	f043 0301 	orr.w	r3, r3, #1
 8005f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f66:	e00b      	b.n	8005f80 <HAL_RCC_OscConfig+0x324>
 8005f68:	4b58      	ldr	r3, [pc, #352]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6c:	4a57      	ldr	r2, [pc, #348]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f6e:	f023 0301 	bic.w	r3, r3, #1
 8005f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f74:	4b55      	ldr	r3, [pc, #340]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f78:	4a54      	ldr	r2, [pc, #336]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005f7a:	f023 0304 	bic.w	r3, r3, #4
 8005f7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f88:	f7fd ff90 	bl	8003eac <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f8e:	e00a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f90:	f7fd ff8c 	bl	8003eac <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e0cb      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa6:	4b49      	ldr	r3, [pc, #292]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0ee      	beq.n	8005f90 <HAL_RCC_OscConfig+0x334>
 8005fb2:	e014      	b.n	8005fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb4:	f7fd ff7a 	bl	8003eac <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fba:	e00a      	b.n	8005fd2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fbc:	f7fd ff76 	bl	8003eac <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e0b5      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1ee      	bne.n	8005fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d105      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fe4:	4b39      	ldr	r3, [pc, #228]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe8:	4a38      	ldr	r2, [pc, #224]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80a1 	beq.w	800613c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ffa:	4b34      	ldr	r3, [pc, #208]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b08      	cmp	r3, #8
 8006004:	d05c      	beq.n	80060c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d141      	bne.n	8006092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800600e:	4b31      	ldr	r3, [pc, #196]	@ (80060d4 <HAL_RCC_OscConfig+0x478>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7fd ff4a 	bl	8003eac <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800601c:	f7fd ff46 	bl	8003eac <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e087      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800602e:	4b27      	ldr	r3, [pc, #156]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69da      	ldr	r2, [r3, #28]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	019b      	lsls	r3, r3, #6
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	085b      	lsrs	r3, r3, #1
 8006052:	3b01      	subs	r3, #1
 8006054:	041b      	lsls	r3, r3, #16
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	061b      	lsls	r3, r3, #24
 800605e:	491b      	ldr	r1, [pc, #108]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8006060:	4313      	orrs	r3, r2
 8006062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006064:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <HAL_RCC_OscConfig+0x478>)
 8006066:	2201      	movs	r2, #1
 8006068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606a:	f7fd ff1f 	bl	8003eac <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006072:	f7fd ff1b 	bl	8003eac <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e05c      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006084:	4b11      	ldr	r3, [pc, #68]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <HAL_RCC_OscConfig+0x416>
 8006090:	e054      	b.n	800613c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006092:	4b10      	ldr	r3, [pc, #64]	@ (80060d4 <HAL_RCC_OscConfig+0x478>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006098:	f7fd ff08 	bl	8003eac <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a0:	f7fd ff04 	bl	8003eac <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e045      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b2:	4b06      	ldr	r3, [pc, #24]	@ (80060cc <HAL_RCC_OscConfig+0x470>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f0      	bne.n	80060a0 <HAL_RCC_OscConfig+0x444>
 80060be:	e03d      	b.n	800613c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d107      	bne.n	80060d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e038      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40007000 	.word	0x40007000
 80060d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006148 <HAL_RCC_OscConfig+0x4ec>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d028      	beq.n	8006138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d121      	bne.n	8006138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fe:	429a      	cmp	r2, r3
 8006100:	d11a      	bne.n	8006138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006108:	4013      	ands	r3, r2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800610e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006110:	4293      	cmp	r3, r2
 8006112:	d111      	bne.n	8006138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	3b01      	subs	r3, #1
 8006122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d107      	bne.n	8006138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006134:	429a      	cmp	r2, r3
 8006136:	d001      	beq.n	800613c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40023800 	.word	0x40023800

0800614c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0cc      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006160:	4b68      	ldr	r3, [pc, #416]	@ (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d90c      	bls.n	8006188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4b65      	ldr	r3, [pc, #404]	@ (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006176:	4b63      	ldr	r3, [pc, #396]	@ (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d001      	beq.n	8006188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0b8      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d020      	beq.n	80061d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061a0:	4b59      	ldr	r3, [pc, #356]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	4a58      	ldr	r2, [pc, #352]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061b8:	4b53      	ldr	r3, [pc, #332]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4a52      	ldr	r2, [pc, #328]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c4:	4b50      	ldr	r3, [pc, #320]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	494d      	ldr	r1, [pc, #308]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d044      	beq.n	800626c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d107      	bne.n	80061fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ea:	4b47      	ldr	r3, [pc, #284]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d119      	bne.n	800622a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e07f      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d003      	beq.n	800620a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006206:	2b03      	cmp	r3, #3
 8006208:	d107      	bne.n	800621a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620a:	4b3f      	ldr	r3, [pc, #252]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e06f      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800621a:	4b3b      	ldr	r3, [pc, #236]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e067      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800622a:	4b37      	ldr	r3, [pc, #220]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f023 0203 	bic.w	r2, r3, #3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	4934      	ldr	r1, [pc, #208]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800623c:	f7fd fe36 	bl	8003eac <HAL_GetTick>
 8006240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006242:	e00a      	b.n	800625a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006244:	f7fd fe32 	bl	8003eac <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006252:	4293      	cmp	r3, r2
 8006254:	d901      	bls.n	800625a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e04f      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625a:	4b2b      	ldr	r3, [pc, #172]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 020c 	and.w	r2, r3, #12
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	429a      	cmp	r2, r3
 800626a:	d1eb      	bne.n	8006244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800626c:	4b25      	ldr	r3, [pc, #148]	@ (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d20c      	bcs.n	8006294 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b22      	ldr	r3, [pc, #136]	@ (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006282:	4b20      	ldr	r3, [pc, #128]	@ (8006304 <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d001      	beq.n	8006294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e032      	b.n	80062fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d008      	beq.n	80062b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a0:	4b19      	ldr	r3, [pc, #100]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4916      	ldr	r1, [pc, #88]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062be:	4b12      	ldr	r3, [pc, #72]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	490e      	ldr	r1, [pc, #56]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062d2:	f000 f821 	bl	8006318 <HAL_RCC_GetSysClockFreq>
 80062d6:	4602      	mov	r2, r0
 80062d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006308 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	490a      	ldr	r1, [pc, #40]	@ (800630c <HAL_RCC_ClockConfig+0x1c0>)
 80062e4:	5ccb      	ldrb	r3, [r1, r3]
 80062e6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ea:	4a09      	ldr	r2, [pc, #36]	@ (8006310 <HAL_RCC_ClockConfig+0x1c4>)
 80062ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80062ee:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <HAL_RCC_ClockConfig+0x1c8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fd f902 	bl	80034fc <HAL_InitTick>

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40023c00 	.word	0x40023c00
 8006308:	40023800 	.word	0x40023800
 800630c:	0800e44c 	.word	0x0800e44c
 8006310:	2000001c 	.word	0x2000001c
 8006314:	20000020 	.word	0x20000020

08006318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800631c:	b090      	sub	sp, #64	@ 0x40
 800631e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006330:	4b59      	ldr	r3, [pc, #356]	@ (8006498 <HAL_RCC_GetSysClockFreq+0x180>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 030c 	and.w	r3, r3, #12
 8006338:	2b08      	cmp	r3, #8
 800633a:	d00d      	beq.n	8006358 <HAL_RCC_GetSysClockFreq+0x40>
 800633c:	2b08      	cmp	r3, #8
 800633e:	f200 80a1 	bhi.w	8006484 <HAL_RCC_GetSysClockFreq+0x16c>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_RCC_GetSysClockFreq+0x34>
 8006346:	2b04      	cmp	r3, #4
 8006348:	d003      	beq.n	8006352 <HAL_RCC_GetSysClockFreq+0x3a>
 800634a:	e09b      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800634c:	4b53      	ldr	r3, [pc, #332]	@ (800649c <HAL_RCC_GetSysClockFreq+0x184>)
 800634e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006350:	e09b      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006352:	4b53      	ldr	r3, [pc, #332]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006354:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006356:	e098      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006358:	4b4f      	ldr	r3, [pc, #316]	@ (8006498 <HAL_RCC_GetSysClockFreq+0x180>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006362:	4b4d      	ldr	r3, [pc, #308]	@ (8006498 <HAL_RCC_GetSysClockFreq+0x180>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d028      	beq.n	80063c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800636e:	4b4a      	ldr	r3, [pc, #296]	@ (8006498 <HAL_RCC_GetSysClockFreq+0x180>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	099b      	lsrs	r3, r3, #6
 8006374:	2200      	movs	r2, #0
 8006376:	623b      	str	r3, [r7, #32]
 8006378:	627a      	str	r2, [r7, #36]	@ 0x24
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006380:	2100      	movs	r1, #0
 8006382:	4b47      	ldr	r3, [pc, #284]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006384:	fb03 f201 	mul.w	r2, r3, r1
 8006388:	2300      	movs	r3, #0
 800638a:	fb00 f303 	mul.w	r3, r0, r3
 800638e:	4413      	add	r3, r2
 8006390:	4a43      	ldr	r2, [pc, #268]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006392:	fba0 1202 	umull	r1, r2, r0, r2
 8006396:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006398:	460a      	mov	r2, r1
 800639a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800639c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800639e:	4413      	add	r3, r2
 80063a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a4:	2200      	movs	r2, #0
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	61fa      	str	r2, [r7, #28]
 80063aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80063b2:	f7fa fbf9 	bl	8000ba8 <__aeabi_uldivmod>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4613      	mov	r3, r2
 80063bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063be:	e053      	b.n	8006468 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c0:	4b35      	ldr	r3, [pc, #212]	@ (8006498 <HAL_RCC_GetSysClockFreq+0x180>)
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	099b      	lsrs	r3, r3, #6
 80063c6:	2200      	movs	r2, #0
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	617a      	str	r2, [r7, #20]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063d2:	f04f 0b00 	mov.w	fp, #0
 80063d6:	4652      	mov	r2, sl
 80063d8:	465b      	mov	r3, fp
 80063da:	f04f 0000 	mov.w	r0, #0
 80063de:	f04f 0100 	mov.w	r1, #0
 80063e2:	0159      	lsls	r1, r3, #5
 80063e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063e8:	0150      	lsls	r0, r2, #5
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	ebb2 080a 	subs.w	r8, r2, sl
 80063f2:	eb63 090b 	sbc.w	r9, r3, fp
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006402:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006406:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800640a:	ebb2 0408 	subs.w	r4, r2, r8
 800640e:	eb63 0509 	sbc.w	r5, r3, r9
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	00eb      	lsls	r3, r5, #3
 800641c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006420:	00e2      	lsls	r2, r4, #3
 8006422:	4614      	mov	r4, r2
 8006424:	461d      	mov	r5, r3
 8006426:	eb14 030a 	adds.w	r3, r4, sl
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	eb45 030b 	adc.w	r3, r5, fp
 8006430:	607b      	str	r3, [r7, #4]
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800643e:	4629      	mov	r1, r5
 8006440:	028b      	lsls	r3, r1, #10
 8006442:	4621      	mov	r1, r4
 8006444:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006448:	4621      	mov	r1, r4
 800644a:	028a      	lsls	r2, r1, #10
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006452:	2200      	movs	r2, #0
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	60fa      	str	r2, [r7, #12]
 8006458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800645c:	f7fa fba4 	bl	8000ba8 <__aeabi_uldivmod>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4613      	mov	r3, r2
 8006466:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006468:	4b0b      	ldr	r3, [pc, #44]	@ (8006498 <HAL_RCC_GetSysClockFreq+0x180>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	0c1b      	lsrs	r3, r3, #16
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	3301      	adds	r3, #1
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006478:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006482:	e002      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006484:	4b05      	ldr	r3, [pc, #20]	@ (800649c <HAL_RCC_GetSysClockFreq+0x184>)
 8006486:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006488:	bf00      	nop
    }
  }
  return sysclockfreq;
 800648a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800648c:	4618      	mov	r0, r3
 800648e:	3740      	adds	r7, #64	@ 0x40
 8006490:	46bd      	mov	sp, r7
 8006492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006496:	bf00      	nop
 8006498:	40023800 	.word	0x40023800
 800649c:	00f42400 	.word	0x00f42400
 80064a0:	017d7840 	.word	0x017d7840

080064a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064a8:	4b03      	ldr	r3, [pc, #12]	@ (80064b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064aa:	681b      	ldr	r3, [r3, #0]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	2000001c 	.word	0x2000001c

080064bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064c0:	f7ff fff0 	bl	80064a4 <HAL_RCC_GetHCLKFreq>
 80064c4:	4602      	mov	r2, r0
 80064c6:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	0a9b      	lsrs	r3, r3, #10
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	4903      	ldr	r1, [pc, #12]	@ (80064e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064d2:	5ccb      	ldrb	r3, [r1, r3]
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d8:	4618      	mov	r0, r3
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40023800 	.word	0x40023800
 80064e0:	0800e45c 	.word	0x0800e45c

080064e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064e8:	f7ff ffdc 	bl	80064a4 <HAL_RCC_GetHCLKFreq>
 80064ec:	4602      	mov	r2, r0
 80064ee:	4b05      	ldr	r3, [pc, #20]	@ (8006504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	0b5b      	lsrs	r3, r3, #13
 80064f4:	f003 0307 	and.w	r3, r3, #7
 80064f8:	4903      	ldr	r1, [pc, #12]	@ (8006508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064fa:	5ccb      	ldrb	r3, [r1, r3]
 80064fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006500:	4618      	mov	r0, r3
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40023800 	.word	0x40023800
 8006508:	0800e45c 	.word	0x0800e45c

0800650c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	220f      	movs	r2, #15
 800651a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800651c:	4b12      	ldr	r3, [pc, #72]	@ (8006568 <HAL_RCC_GetClockConfig+0x5c>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 0203 	and.w	r2, r3, #3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006528:	4b0f      	ldr	r3, [pc, #60]	@ (8006568 <HAL_RCC_GetClockConfig+0x5c>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006534:	4b0c      	ldr	r3, [pc, #48]	@ (8006568 <HAL_RCC_GetClockConfig+0x5c>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006540:	4b09      	ldr	r3, [pc, #36]	@ (8006568 <HAL_RCC_GetClockConfig+0x5c>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	08db      	lsrs	r3, r3, #3
 8006546:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800654e:	4b07      	ldr	r3, [pc, #28]	@ (800656c <HAL_RCC_GetClockConfig+0x60>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0207 	and.w	r2, r3, #7
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	601a      	str	r2, [r3, #0]
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40023800 	.word	0x40023800
 800656c:	40023c00 	.word	0x40023c00

08006570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e07b      	b.n	800667a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	2b00      	cmp	r3, #0
 8006588:	d108      	bne.n	800659c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006592:	d009      	beq.n	80065a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	61da      	str	r2, [r3, #28]
 800659a:	e005      	b.n	80065a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fc feea 	bl	800339c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80065f0:	431a      	orrs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	431a      	orrs	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662c:	ea42 0103 	orr.w	r1, r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	f003 0104 	and.w	r1, r3, #4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664e:	f003 0210 	and.w	r2, r3, #16
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006668:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b088      	sub	sp, #32
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	603b      	str	r3, [r7, #0]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006692:	f7fd fc0b 	bl	8003eac <HAL_GetTick>
 8006696:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d001      	beq.n	80066ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80066a8:	2302      	movs	r3, #2
 80066aa:	e12a      	b.n	8006902 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_SPI_Transmit+0x36>
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e122      	b.n	8006902 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d101      	bne.n	80066ca <HAL_SPI_Transmit+0x48>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e11b      	b.n	8006902 <HAL_SPI_Transmit+0x280>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2203      	movs	r2, #3
 80066d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	88fa      	ldrh	r2, [r7, #6]
 80066ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	88fa      	ldrh	r2, [r7, #6]
 80066f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006718:	d10f      	bne.n	800673a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006728:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006738:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006744:	2b40      	cmp	r3, #64	@ 0x40
 8006746:	d007      	beq.n	8006758 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006760:	d152      	bne.n	8006808 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_SPI_Transmit+0xee>
 800676a:	8b7b      	ldrh	r3, [r7, #26]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d145      	bne.n	80067fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006774:	881a      	ldrh	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006780:	1c9a      	adds	r2, r3, #2
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006794:	e032      	b.n	80067fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d112      	bne.n	80067ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a8:	881a      	ldrh	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b4:	1c9a      	adds	r2, r3, #2
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80067c8:	e018      	b.n	80067fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ca:	f7fd fb6f 	bl	8003eac <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d803      	bhi.n	80067e2 <HAL_SPI_Transmit+0x160>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d102      	bne.n	80067e8 <HAL_SPI_Transmit+0x166>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e082      	b.n	8006902 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1c7      	bne.n	8006796 <HAL_SPI_Transmit+0x114>
 8006806:	e053      	b.n	80068b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_SPI_Transmit+0x194>
 8006810:	8b7b      	ldrh	r3, [r7, #26]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d147      	bne.n	80068a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	330c      	adds	r3, #12
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800683c:	e033      	b.n	80068a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b02      	cmp	r3, #2
 800684a:	d113      	bne.n	8006874 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	330c      	adds	r3, #12
 8006856:	7812      	ldrb	r2, [r2, #0]
 8006858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006872:	e018      	b.n	80068a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006874:	f7fd fb1a 	bl	8003eac <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d803      	bhi.n	800688c <HAL_SPI_Transmit+0x20a>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688a:	d102      	bne.n	8006892 <HAL_SPI_Transmit+0x210>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e02d      	b.n	8006902 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1c6      	bne.n	800683e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 fa59 	bl	8006d6c <SPI_EndRxTxTransaction>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2220      	movs	r2, #32
 80068c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006900:	2300      	movs	r3, #0
  }
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b08a      	sub	sp, #40	@ 0x28
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006918:	2301      	movs	r3, #1
 800691a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800691c:	f7fd fac6 	bl	8003eac <HAL_GetTick>
 8006920:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006928:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006930:	887b      	ldrh	r3, [r7, #2]
 8006932:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006934:	7ffb      	ldrb	r3, [r7, #31]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d00c      	beq.n	8006954 <HAL_SPI_TransmitReceive+0x4a>
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006940:	d106      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x46>
 800694a:	7ffb      	ldrb	r3, [r7, #31]
 800694c:	2b04      	cmp	r3, #4
 800694e:	d001      	beq.n	8006954 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006950:	2302      	movs	r3, #2
 8006952:	e17f      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <HAL_SPI_TransmitReceive+0x5c>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_SPI_TransmitReceive+0x5c>
 8006960:	887b      	ldrh	r3, [r7, #2]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e174      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x6e>
 8006974:	2302      	movs	r3, #2
 8006976:	e16d      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x34a>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b04      	cmp	r3, #4
 800698a:	d003      	beq.n	8006994 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2205      	movs	r2, #5
 8006990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	887a      	ldrh	r2, [r7, #2]
 80069a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	887a      	ldrh	r2, [r7, #2]
 80069aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	887a      	ldrh	r2, [r7, #2]
 80069b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	887a      	ldrh	r2, [r7, #2]
 80069bc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d4:	2b40      	cmp	r3, #64	@ 0x40
 80069d6:	d007      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069f0:	d17e      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_SPI_TransmitReceive+0xf6>
 80069fa:	8afb      	ldrh	r3, [r7, #22]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d16c      	bne.n	8006ada <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a04:	881a      	ldrh	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a10:	1c9a      	adds	r2, r3, #2
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a24:	e059      	b.n	8006ada <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d11b      	bne.n	8006a6c <HAL_SPI_TransmitReceive+0x162>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d016      	beq.n	8006a6c <HAL_SPI_TransmitReceive+0x162>
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d113      	bne.n	8006a6c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a48:	881a      	ldrh	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a54:	1c9a      	adds	r2, r3, #2
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d119      	bne.n	8006aae <HAL_SPI_TransmitReceive+0x1a4>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d014      	beq.n	8006aae <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8e:	b292      	uxth	r2, r2
 8006a90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	1c9a      	adds	r2, r3, #2
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006aae:	f7fd f9fd 	bl	8003eac <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d80d      	bhi.n	8006ada <HAL_SPI_TransmitReceive+0x1d0>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d009      	beq.n	8006ada <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e0bc      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1a0      	bne.n	8006a26 <HAL_SPI_TransmitReceive+0x11c>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d19b      	bne.n	8006a26 <HAL_SPI_TransmitReceive+0x11c>
 8006aee:	e082      	b.n	8006bf6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <HAL_SPI_TransmitReceive+0x1f4>
 8006af8:	8afb      	ldrh	r3, [r7, #22]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d171      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	330c      	adds	r3, #12
 8006b08:	7812      	ldrb	r2, [r2, #0]
 8006b0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b24:	e05d      	b.n	8006be2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d11c      	bne.n	8006b6e <HAL_SPI_TransmitReceive+0x264>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d017      	beq.n	8006b6e <HAL_SPI_TransmitReceive+0x264>
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d114      	bne.n	8006b6e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	7812      	ldrb	r2, [r2, #0]
 8006b50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d119      	bne.n	8006bb0 <HAL_SPI_TransmitReceive+0x2a6>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d014      	beq.n	8006bb0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bac:	2301      	movs	r3, #1
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bb0:	f7fd f97c 	bl	8003eac <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d803      	bhi.n	8006bc8 <HAL_SPI_TransmitReceive+0x2be>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc6:	d102      	bne.n	8006bce <HAL_SPI_TransmitReceive+0x2c4>
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d109      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e038      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d19c      	bne.n	8006b26 <HAL_SPI_TransmitReceive+0x21c>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d197      	bne.n	8006b26 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf6:	6a3a      	ldr	r2, [r7, #32]
 8006bf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f8b6 	bl	8006d6c <SPI_EndRxTxTransaction>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e01d      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	613b      	str	r3, [r7, #16]
 8006c34:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006c52:	2300      	movs	r3, #0
  }
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3728      	adds	r7, #40	@ 0x28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c6c:	f7fd f91e 	bl	8003eac <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	4413      	add	r3, r2
 8006c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c7c:	f7fd f916 	bl	8003eac <HAL_GetTick>
 8006c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c82:	4b39      	ldr	r3, [pc, #228]	@ (8006d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	015b      	lsls	r3, r3, #5
 8006c88:	0d1b      	lsrs	r3, r3, #20
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c92:	e055      	b.n	8006d40 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d051      	beq.n	8006d40 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c9c:	f7fd f906 	bl	8003eac <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d902      	bls.n	8006cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d13d      	bne.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cca:	d111      	bne.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd4:	d004      	beq.n	8006ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cde:	d107      	bne.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cf8:	d10f      	bne.n	8006d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e018      	b.n	8006d60 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	e002      	b.n	8006d40 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	bf0c      	ite	eq
 8006d50:	2301      	moveq	r3, #1
 8006d52:	2300      	movne	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d19a      	bne.n	8006c94 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3720      	adds	r7, #32
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	2000001c 	.word	0x2000001c

08006d6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	2102      	movs	r1, #2
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff ff6a 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d92:	f043 0220 	orr.w	r2, r3, #32
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e032      	b.n	8006e04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006e0c <SPI_EndRxTxTransaction+0xa0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e10 <SPI_EndRxTxTransaction+0xa4>)
 8006da4:	fba2 2303 	umull	r2, r3, r2, r3
 8006da8:	0d5b      	lsrs	r3, r3, #21
 8006daa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006dae:	fb02 f303 	mul.w	r3, r2, r3
 8006db2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dbc:	d112      	bne.n	8006de4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2180      	movs	r1, #128	@ 0x80
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7ff ff47 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d016      	beq.n	8006e02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd8:	f043 0220 	orr.w	r2, r3, #32
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e00f      	b.n	8006e04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dfa:	2b80      	cmp	r3, #128	@ 0x80
 8006dfc:	d0f2      	beq.n	8006de4 <SPI_EndRxTxTransaction+0x78>
 8006dfe:	e000      	b.n	8006e02 <SPI_EndRxTxTransaction+0x96>
        break;
 8006e00:	bf00      	nop
  }

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	2000001c 	.word	0x2000001c
 8006e10:	165e9f81 	.word	0x165e9f81

08006e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e041      	b.n	8006eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f839 	bl	8006eb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f000 f9c0 	bl	80071d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d001      	beq.n	8006ee0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e04e      	b.n	8006f7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a23      	ldr	r2, [pc, #140]	@ (8006f8c <HAL_TIM_Base_Start_IT+0xc4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d022      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f0a:	d01d      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1f      	ldr	r2, [pc, #124]	@ (8006f90 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d018      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006f94 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d013      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1c      	ldr	r2, [pc, #112]	@ (8006f98 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00e      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f9c <HAL_TIM_Base_Start_IT+0xd4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d009      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a19      	ldr	r2, [pc, #100]	@ (8006fa0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d004      	beq.n	8006f48 <HAL_TIM_Base_Start_IT+0x80>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a18      	ldr	r2, [pc, #96]	@ (8006fa4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d111      	bne.n	8006f6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b06      	cmp	r3, #6
 8006f58:	d010      	beq.n	8006f7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0201 	orr.w	r2, r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6a:	e007      	b.n	8006f7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40010400 	.word	0x40010400
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40001800 	.word	0x40001800

08006fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d020      	beq.n	800700c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01b      	beq.n	800700c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0202 	mvn.w	r2, #2
 8006fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f003 0303 	and.w	r3, r3, #3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f8d2 	bl	800719c <HAL_TIM_IC_CaptureCallback>
 8006ff8:	e005      	b.n	8007006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f8c4 	bl	8007188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f8d5 	bl	80071b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d020      	beq.n	8007058 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01b      	beq.n	8007058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0204 	mvn.w	r2, #4
 8007028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f8ac 	bl	800719c <HAL_TIM_IC_CaptureCallback>
 8007044:	e005      	b.n	8007052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f89e 	bl	8007188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f8af 	bl	80071b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b00      	cmp	r3, #0
 8007060:	d020      	beq.n	80070a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01b      	beq.n	80070a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f06f 0208 	mvn.w	r2, #8
 8007074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2204      	movs	r2, #4
 800707a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f886 	bl	800719c <HAL_TIM_IC_CaptureCallback>
 8007090:	e005      	b.n	800709e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f878 	bl	8007188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f889 	bl	80071b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 0310 	and.w	r3, r3, #16
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d020      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01b      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0210 	mvn.w	r2, #16
 80070c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2208      	movs	r2, #8
 80070c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f860 	bl	800719c <HAL_TIM_IC_CaptureCallback>
 80070dc:	e005      	b.n	80070ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f852 	bl	8007188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f863 	bl	80071b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d007      	beq.n	8007114 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0201 	mvn.w	r2, #1
 800710c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fb ffc2 	bl	8003098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f900 	bl	8007338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00c      	beq.n	800715c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f834 	bl	80071c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00c      	beq.n	8007180 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0220 	mvn.w	r2, #32
 8007178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f8d2 	bl	8007324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a43      	ldr	r2, [pc, #268]	@ (80072f8 <TIM_Base_SetConfig+0x120>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d013      	beq.n	8007218 <TIM_Base_SetConfig+0x40>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071f6:	d00f      	beq.n	8007218 <TIM_Base_SetConfig+0x40>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a40      	ldr	r2, [pc, #256]	@ (80072fc <TIM_Base_SetConfig+0x124>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00b      	beq.n	8007218 <TIM_Base_SetConfig+0x40>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a3f      	ldr	r2, [pc, #252]	@ (8007300 <TIM_Base_SetConfig+0x128>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d007      	beq.n	8007218 <TIM_Base_SetConfig+0x40>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a3e      	ldr	r2, [pc, #248]	@ (8007304 <TIM_Base_SetConfig+0x12c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d003      	beq.n	8007218 <TIM_Base_SetConfig+0x40>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a3d      	ldr	r2, [pc, #244]	@ (8007308 <TIM_Base_SetConfig+0x130>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d108      	bne.n	800722a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800721e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	4313      	orrs	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a32      	ldr	r2, [pc, #200]	@ (80072f8 <TIM_Base_SetConfig+0x120>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d02b      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007238:	d027      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2f      	ldr	r2, [pc, #188]	@ (80072fc <TIM_Base_SetConfig+0x124>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d023      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2e      	ldr	r2, [pc, #184]	@ (8007300 <TIM_Base_SetConfig+0x128>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01f      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a2d      	ldr	r2, [pc, #180]	@ (8007304 <TIM_Base_SetConfig+0x12c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d01b      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a2c      	ldr	r2, [pc, #176]	@ (8007308 <TIM_Base_SetConfig+0x130>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d017      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a2b      	ldr	r2, [pc, #172]	@ (800730c <TIM_Base_SetConfig+0x134>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d013      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a2a      	ldr	r2, [pc, #168]	@ (8007310 <TIM_Base_SetConfig+0x138>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00f      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a29      	ldr	r2, [pc, #164]	@ (8007314 <TIM_Base_SetConfig+0x13c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00b      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a28      	ldr	r2, [pc, #160]	@ (8007318 <TIM_Base_SetConfig+0x140>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a27      	ldr	r2, [pc, #156]	@ (800731c <TIM_Base_SetConfig+0x144>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_Base_SetConfig+0xb2>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a26      	ldr	r2, [pc, #152]	@ (8007320 <TIM_Base_SetConfig+0x148>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d108      	bne.n	800729c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a0e      	ldr	r2, [pc, #56]	@ (80072f8 <TIM_Base_SetConfig+0x120>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d003      	beq.n	80072ca <TIM_Base_SetConfig+0xf2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a10      	ldr	r2, [pc, #64]	@ (8007308 <TIM_Base_SetConfig+0x130>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d103      	bne.n	80072d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f043 0204 	orr.w	r2, r3, #4
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	601a      	str	r2, [r3, #0]
}
 80072ea:	bf00      	nop
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40000400 	.word	0x40000400
 8007300:	40000800 	.word	0x40000800
 8007304:	40000c00 	.word	0x40000c00
 8007308:	40010400 	.word	0x40010400
 800730c:	40014000 	.word	0x40014000
 8007310:	40014400 	.word	0x40014400
 8007314:	40014800 	.word	0x40014800
 8007318:	40001800 	.word	0x40001800
 800731c:	40001c00 	.word	0x40001c00
 8007320:	40002000 	.word	0x40002000

08007324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e042      	b.n	80073e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fc f87a 	bl	800346c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2224      	movs	r2, #36	@ 0x24
 800737c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800738e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f973 	bl	800767c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691a      	ldr	r2, [r3, #16]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695a      	ldr	r2, [r3, #20]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	@ 0x28
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b20      	cmp	r3, #32
 800740a:	d175      	bne.n	80074f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_UART_Transmit+0x2c>
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e06e      	b.n	80074fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2221      	movs	r2, #33	@ 0x21
 8007426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800742a:	f7fc fd3f 	bl	8003eac <HAL_GetTick>
 800742e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	88fa      	ldrh	r2, [r7, #6]
 800743a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007444:	d108      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d104      	bne.n	8007458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e003      	b.n	8007460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007460:	e02e      	b.n	80074c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	2180      	movs	r1, #128	@ 0x80
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f848 	bl	8007502 <UART_WaitOnFlagUntilTimeout>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2220      	movs	r2, #32
 800747c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e03a      	b.n	80074fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007498:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	3302      	adds	r3, #2
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e007      	b.n	80074b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	781a      	ldrb	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3301      	adds	r3, #1
 80074b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1cb      	bne.n	8007462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2200      	movs	r2, #0
 80074d2:	2140      	movs	r1, #64	@ 0x40
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f814 	bl	8007502 <UART_WaitOnFlagUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e006      	b.n	80074fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e000      	b.n	80074fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b086      	sub	sp, #24
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	603b      	str	r3, [r7, #0]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007512:	e03b      	b.n	800758c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d037      	beq.n	800758c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751c:	f7fc fcc6 	bl	8003eac <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	6a3a      	ldr	r2, [r7, #32]
 8007528:	429a      	cmp	r2, r3
 800752a:	d302      	bcc.n	8007532 <UART_WaitOnFlagUntilTimeout+0x30>
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e03a      	b.n	80075ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d023      	beq.n	800758c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b80      	cmp	r3, #128	@ 0x80
 8007548:	d020      	beq.n	800758c <UART_WaitOnFlagUntilTimeout+0x8a>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b40      	cmp	r3, #64	@ 0x40
 800754e:	d01d      	beq.n	800758c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	2b08      	cmp	r3, #8
 800755c:	d116      	bne.n	800758c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f81d 	bl	80075b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2208      	movs	r2, #8
 800757e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e00f      	b.n	80075ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4013      	ands	r3, r2
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	429a      	cmp	r2, r3
 800759a:	bf0c      	ite	eq
 800759c:	2301      	moveq	r3, #1
 800759e:	2300      	movne	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d0b4      	beq.n	8007514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b095      	sub	sp, #84	@ 0x54
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80075de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e5      	bne.n	80075bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3314      	adds	r3, #20
 80075f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e5      	bne.n	80075f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007628:	2b01      	cmp	r3, #1
 800762a:	d119      	bne.n	8007660 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	60bb      	str	r3, [r7, #8]
   return(result);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 0310 	bic.w	r3, r3, #16
 8007642:	647b      	str	r3, [r7, #68]	@ 0x44
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800764c:	61ba      	str	r2, [r7, #24]
 800764e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6979      	ldr	r1, [r7, #20]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	613b      	str	r3, [r7, #16]
   return(result);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800766e:	bf00      	nop
 8007670:	3754      	adds	r7, #84	@ 0x54
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800767c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007680:	b0c0      	sub	sp, #256	@ 0x100
 8007682:	af00      	add	r7, sp, #0
 8007684:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007698:	68d9      	ldr	r1, [r3, #12]
 800769a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	ea40 0301 	orr.w	r3, r0, r1
 80076a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076aa:	689a      	ldr	r2, [r3, #8]
 80076ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80076d4:	f021 010c 	bic.w	r1, r1, #12
 80076d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076e2:	430b      	orrs	r3, r1
 80076e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80076f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f6:	6999      	ldr	r1, [r3, #24]
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	ea40 0301 	orr.w	r3, r0, r1
 8007702:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b8f      	ldr	r3, [pc, #572]	@ (8007948 <UART_SetConfig+0x2cc>)
 800770c:	429a      	cmp	r2, r3
 800770e:	d005      	beq.n	800771c <UART_SetConfig+0xa0>
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	4b8d      	ldr	r3, [pc, #564]	@ (800794c <UART_SetConfig+0x2d0>)
 8007718:	429a      	cmp	r2, r3
 800771a:	d104      	bne.n	8007726 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800771c:	f7fe fee2 	bl	80064e4 <HAL_RCC_GetPCLK2Freq>
 8007720:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007724:	e003      	b.n	800772e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007726:	f7fe fec9 	bl	80064bc <HAL_RCC_GetPCLK1Freq>
 800772a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800772e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007738:	f040 810c 	bne.w	8007954 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800773c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007740:	2200      	movs	r2, #0
 8007742:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007746:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800774a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800774e:	4622      	mov	r2, r4
 8007750:	462b      	mov	r3, r5
 8007752:	1891      	adds	r1, r2, r2
 8007754:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007756:	415b      	adcs	r3, r3
 8007758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800775a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800775e:	4621      	mov	r1, r4
 8007760:	eb12 0801 	adds.w	r8, r2, r1
 8007764:	4629      	mov	r1, r5
 8007766:	eb43 0901 	adc.w	r9, r3, r1
 800776a:	f04f 0200 	mov.w	r2, #0
 800776e:	f04f 0300 	mov.w	r3, #0
 8007772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800777a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800777e:	4690      	mov	r8, r2
 8007780:	4699      	mov	r9, r3
 8007782:	4623      	mov	r3, r4
 8007784:	eb18 0303 	adds.w	r3, r8, r3
 8007788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800778c:	462b      	mov	r3, r5
 800778e:	eb49 0303 	adc.w	r3, r9, r3
 8007792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077aa:	460b      	mov	r3, r1
 80077ac:	18db      	adds	r3, r3, r3
 80077ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80077b0:	4613      	mov	r3, r2
 80077b2:	eb42 0303 	adc.w	r3, r2, r3
 80077b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80077b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80077c0:	f7f9 f9f2 	bl	8000ba8 <__aeabi_uldivmod>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4b61      	ldr	r3, [pc, #388]	@ (8007950 <UART_SetConfig+0x2d4>)
 80077ca:	fba3 2302 	umull	r2, r3, r3, r2
 80077ce:	095b      	lsrs	r3, r3, #5
 80077d0:	011c      	lsls	r4, r3, #4
 80077d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80077e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80077e4:	4642      	mov	r2, r8
 80077e6:	464b      	mov	r3, r9
 80077e8:	1891      	adds	r1, r2, r2
 80077ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80077ec:	415b      	adcs	r3, r3
 80077ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80077f4:	4641      	mov	r1, r8
 80077f6:	eb12 0a01 	adds.w	sl, r2, r1
 80077fa:	4649      	mov	r1, r9
 80077fc:	eb43 0b01 	adc.w	fp, r3, r1
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800780c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007814:	4692      	mov	sl, r2
 8007816:	469b      	mov	fp, r3
 8007818:	4643      	mov	r3, r8
 800781a:	eb1a 0303 	adds.w	r3, sl, r3
 800781e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007822:	464b      	mov	r3, r9
 8007824:	eb4b 0303 	adc.w	r3, fp, r3
 8007828:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007838:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800783c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007840:	460b      	mov	r3, r1
 8007842:	18db      	adds	r3, r3, r3
 8007844:	643b      	str	r3, [r7, #64]	@ 0x40
 8007846:	4613      	mov	r3, r2
 8007848:	eb42 0303 	adc.w	r3, r2, r3
 800784c:	647b      	str	r3, [r7, #68]	@ 0x44
 800784e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007852:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007856:	f7f9 f9a7 	bl	8000ba8 <__aeabi_uldivmod>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4611      	mov	r1, r2
 8007860:	4b3b      	ldr	r3, [pc, #236]	@ (8007950 <UART_SetConfig+0x2d4>)
 8007862:	fba3 2301 	umull	r2, r3, r3, r1
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	2264      	movs	r2, #100	@ 0x64
 800786a:	fb02 f303 	mul.w	r3, r2, r3
 800786e:	1acb      	subs	r3, r1, r3
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007876:	4b36      	ldr	r3, [pc, #216]	@ (8007950 <UART_SetConfig+0x2d4>)
 8007878:	fba3 2302 	umull	r2, r3, r3, r2
 800787c:	095b      	lsrs	r3, r3, #5
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007884:	441c      	add	r4, r3
 8007886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800788a:	2200      	movs	r2, #0
 800788c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007890:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007894:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007898:	4642      	mov	r2, r8
 800789a:	464b      	mov	r3, r9
 800789c:	1891      	adds	r1, r2, r2
 800789e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078a0:	415b      	adcs	r3, r3
 80078a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078a8:	4641      	mov	r1, r8
 80078aa:	1851      	adds	r1, r2, r1
 80078ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80078ae:	4649      	mov	r1, r9
 80078b0:	414b      	adcs	r3, r1
 80078b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80078c0:	4659      	mov	r1, fp
 80078c2:	00cb      	lsls	r3, r1, #3
 80078c4:	4651      	mov	r1, sl
 80078c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ca:	4651      	mov	r1, sl
 80078cc:	00ca      	lsls	r2, r1, #3
 80078ce:	4610      	mov	r0, r2
 80078d0:	4619      	mov	r1, r3
 80078d2:	4603      	mov	r3, r0
 80078d4:	4642      	mov	r2, r8
 80078d6:	189b      	adds	r3, r3, r2
 80078d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078dc:	464b      	mov	r3, r9
 80078de:	460a      	mov	r2, r1
 80078e0:	eb42 0303 	adc.w	r3, r2, r3
 80078e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80078f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80078fc:	460b      	mov	r3, r1
 80078fe:	18db      	adds	r3, r3, r3
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007902:	4613      	mov	r3, r2
 8007904:	eb42 0303 	adc.w	r3, r2, r3
 8007908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800790a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800790e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007912:	f7f9 f949 	bl	8000ba8 <__aeabi_uldivmod>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <UART_SetConfig+0x2d4>)
 800791c:	fba3 1302 	umull	r1, r3, r3, r2
 8007920:	095b      	lsrs	r3, r3, #5
 8007922:	2164      	movs	r1, #100	@ 0x64
 8007924:	fb01 f303 	mul.w	r3, r1, r3
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	3332      	adds	r3, #50	@ 0x32
 800792e:	4a08      	ldr	r2, [pc, #32]	@ (8007950 <UART_SetConfig+0x2d4>)
 8007930:	fba2 2303 	umull	r2, r3, r2, r3
 8007934:	095b      	lsrs	r3, r3, #5
 8007936:	f003 0207 	and.w	r2, r3, #7
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4422      	add	r2, r4
 8007942:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007944:	e106      	b.n	8007b54 <UART_SetConfig+0x4d8>
 8007946:	bf00      	nop
 8007948:	40011000 	.word	0x40011000
 800794c:	40011400 	.word	0x40011400
 8007950:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007958:	2200      	movs	r2, #0
 800795a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800795e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007962:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007966:	4642      	mov	r2, r8
 8007968:	464b      	mov	r3, r9
 800796a:	1891      	adds	r1, r2, r2
 800796c:	6239      	str	r1, [r7, #32]
 800796e:	415b      	adcs	r3, r3
 8007970:	627b      	str	r3, [r7, #36]	@ 0x24
 8007972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007976:	4641      	mov	r1, r8
 8007978:	1854      	adds	r4, r2, r1
 800797a:	4649      	mov	r1, r9
 800797c:	eb43 0501 	adc.w	r5, r3, r1
 8007980:	f04f 0200 	mov.w	r2, #0
 8007984:	f04f 0300 	mov.w	r3, #0
 8007988:	00eb      	lsls	r3, r5, #3
 800798a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800798e:	00e2      	lsls	r2, r4, #3
 8007990:	4614      	mov	r4, r2
 8007992:	461d      	mov	r5, r3
 8007994:	4643      	mov	r3, r8
 8007996:	18e3      	adds	r3, r4, r3
 8007998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800799c:	464b      	mov	r3, r9
 800799e:	eb45 0303 	adc.w	r3, r5, r3
 80079a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079b6:	f04f 0200 	mov.w	r2, #0
 80079ba:	f04f 0300 	mov.w	r3, #0
 80079be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80079c2:	4629      	mov	r1, r5
 80079c4:	008b      	lsls	r3, r1, #2
 80079c6:	4621      	mov	r1, r4
 80079c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079cc:	4621      	mov	r1, r4
 80079ce:	008a      	lsls	r2, r1, #2
 80079d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80079d4:	f7f9 f8e8 	bl	8000ba8 <__aeabi_uldivmod>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4b60      	ldr	r3, [pc, #384]	@ (8007b60 <UART_SetConfig+0x4e4>)
 80079de:	fba3 2302 	umull	r2, r3, r3, r2
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	011c      	lsls	r4, r3, #4
 80079e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80079f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80079f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80079f8:	4642      	mov	r2, r8
 80079fa:	464b      	mov	r3, r9
 80079fc:	1891      	adds	r1, r2, r2
 80079fe:	61b9      	str	r1, [r7, #24]
 8007a00:	415b      	adcs	r3, r3
 8007a02:	61fb      	str	r3, [r7, #28]
 8007a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a08:	4641      	mov	r1, r8
 8007a0a:	1851      	adds	r1, r2, r1
 8007a0c:	6139      	str	r1, [r7, #16]
 8007a0e:	4649      	mov	r1, r9
 8007a10:	414b      	adcs	r3, r1
 8007a12:	617b      	str	r3, [r7, #20]
 8007a14:	f04f 0200 	mov.w	r2, #0
 8007a18:	f04f 0300 	mov.w	r3, #0
 8007a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a20:	4659      	mov	r1, fp
 8007a22:	00cb      	lsls	r3, r1, #3
 8007a24:	4651      	mov	r1, sl
 8007a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a2a:	4651      	mov	r1, sl
 8007a2c:	00ca      	lsls	r2, r1, #3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4619      	mov	r1, r3
 8007a32:	4603      	mov	r3, r0
 8007a34:	4642      	mov	r2, r8
 8007a36:	189b      	adds	r3, r3, r2
 8007a38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	460a      	mov	r2, r1
 8007a40:	eb42 0303 	adc.w	r3, r2, r3
 8007a44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	f04f 0300 	mov.w	r3, #0
 8007a5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007a60:	4649      	mov	r1, r9
 8007a62:	008b      	lsls	r3, r1, #2
 8007a64:	4641      	mov	r1, r8
 8007a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a6a:	4641      	mov	r1, r8
 8007a6c:	008a      	lsls	r2, r1, #2
 8007a6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007a72:	f7f9 f899 	bl	8000ba8 <__aeabi_uldivmod>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4b38      	ldr	r3, [pc, #224]	@ (8007b60 <UART_SetConfig+0x4e4>)
 8007a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	2264      	movs	r2, #100	@ 0x64
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
 8007a8a:	1acb      	subs	r3, r1, r3
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	3332      	adds	r3, #50	@ 0x32
 8007a90:	4a33      	ldr	r2, [pc, #204]	@ (8007b60 <UART_SetConfig+0x4e4>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a9c:	441c      	add	r4, r3
 8007a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007aa6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007aa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007aac:	4642      	mov	r2, r8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	1891      	adds	r1, r2, r2
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	415b      	adcs	r3, r3
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007abc:	4641      	mov	r1, r8
 8007abe:	1851      	adds	r1, r2, r1
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	414b      	adcs	r3, r1
 8007ac6:	607b      	str	r3, [r7, #4]
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	00cb      	lsls	r3, r1, #3
 8007ad8:	4651      	mov	r1, sl
 8007ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ade:	4651      	mov	r1, sl
 8007ae0:	00ca      	lsls	r2, r1, #3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	4642      	mov	r2, r8
 8007aea:	189b      	adds	r3, r3, r2
 8007aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007aee:	464b      	mov	r3, r9
 8007af0:	460a      	mov	r2, r1
 8007af2:	eb42 0303 	adc.w	r3, r2, r3
 8007af6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b02:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b10:	4649      	mov	r1, r9
 8007b12:	008b      	lsls	r3, r1, #2
 8007b14:	4641      	mov	r1, r8
 8007b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	008a      	lsls	r2, r1, #2
 8007b1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b22:	f7f9 f841 	bl	8000ba8 <__aeabi_uldivmod>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b60 <UART_SetConfig+0x4e4>)
 8007b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b30:	095b      	lsrs	r3, r3, #5
 8007b32:	2164      	movs	r1, #100	@ 0x64
 8007b34:	fb01 f303 	mul.w	r3, r1, r3
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	3332      	adds	r3, #50	@ 0x32
 8007b3e:	4a08      	ldr	r2, [pc, #32]	@ (8007b60 <UART_SetConfig+0x4e4>)
 8007b40:	fba2 2303 	umull	r2, r3, r2, r3
 8007b44:	095b      	lsrs	r3, r3, #5
 8007b46:	f003 020f 	and.w	r2, r3, #15
 8007b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4422      	add	r2, r4
 8007b52:	609a      	str	r2, [r3, #8]
}
 8007b54:	bf00      	nop
 8007b56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b60:	51eb851f 	.word	0x51eb851f

08007b64 <__NVIC_SetPriority>:
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	db0a      	blt.n	8007b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	490c      	ldr	r1, [pc, #48]	@ (8007bb0 <__NVIC_SetPriority+0x4c>)
 8007b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b82:	0112      	lsls	r2, r2, #4
 8007b84:	b2d2      	uxtb	r2, r2
 8007b86:	440b      	add	r3, r1
 8007b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007b8c:	e00a      	b.n	8007ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	4908      	ldr	r1, [pc, #32]	@ (8007bb4 <__NVIC_SetPriority+0x50>)
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	f003 030f 	and.w	r3, r3, #15
 8007b9a:	3b04      	subs	r3, #4
 8007b9c:	0112      	lsls	r2, r2, #4
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	761a      	strb	r2, [r3, #24]
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	e000e100 	.word	0xe000e100
 8007bb4:	e000ed00 	.word	0xe000ed00

08007bb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007bbc:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <SysTick_Handler+0x1c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007bc0:	f001 fd7a 	bl	80096b8 <xTaskGetSchedulerState>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d001      	beq.n	8007bce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007bca:	f002 fb75 	bl	800a2b8 <xPortSysTickHandler>
  }
}
 8007bce:	bf00      	nop
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	e000e010 	.word	0xe000e010

08007bd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007bdc:	2100      	movs	r1, #0
 8007bde:	f06f 0004 	mvn.w	r0, #4
 8007be2:	f7ff ffbf 	bl	8007b64 <__NVIC_SetPriority>
#endif
}
 8007be6:	bf00      	nop
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bf2:	f3ef 8305 	mrs	r3, IPSR
 8007bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8007bf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007bfe:	f06f 0305 	mvn.w	r3, #5
 8007c02:	607b      	str	r3, [r7, #4]
 8007c04:	e00c      	b.n	8007c20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c06:	4b0a      	ldr	r3, [pc, #40]	@ (8007c30 <osKernelInitialize+0x44>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d105      	bne.n	8007c1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c0e:	4b08      	ldr	r3, [pc, #32]	@ (8007c30 <osKernelInitialize+0x44>)
 8007c10:	2201      	movs	r2, #1
 8007c12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e002      	b.n	8007c20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c20:	687b      	ldr	r3, [r7, #4]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	2000040c 	.word	0x2000040c

08007c34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c3a:	f3ef 8305 	mrs	r3, IPSR
 8007c3e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c46:	f06f 0305 	mvn.w	r3, #5
 8007c4a:	607b      	str	r3, [r7, #4]
 8007c4c:	e010      	b.n	8007c70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c7c <osKernelStart+0x48>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d109      	bne.n	8007c6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c56:	f7ff ffbf 	bl	8007bd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c5a:	4b08      	ldr	r3, [pc, #32]	@ (8007c7c <osKernelStart+0x48>)
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c60:	f001 f87a 	bl	8008d58 <vTaskStartScheduler>
      stat = osOK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	607b      	str	r3, [r7, #4]
 8007c68:	e002      	b.n	8007c70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c70:	687b      	ldr	r3, [r7, #4]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	2000040c 	.word	0x2000040c

08007c80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08e      	sub	sp, #56	@ 0x38
 8007c84:	af04      	add	r7, sp, #16
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c90:	f3ef 8305 	mrs	r3, IPSR
 8007c94:	617b      	str	r3, [r7, #20]
  return(result);
 8007c96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d17e      	bne.n	8007d9a <osThreadNew+0x11a>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d07b      	beq.n	8007d9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ca2:	2380      	movs	r3, #128	@ 0x80
 8007ca4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ca6:	2318      	movs	r3, #24
 8007ca8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d045      	beq.n	8007d46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <osThreadNew+0x48>
        name = attr->name;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d008      	beq.n	8007cee <osThreadNew+0x6e>
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	2b38      	cmp	r3, #56	@ 0x38
 8007ce0:	d805      	bhi.n	8007cee <osThreadNew+0x6e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <osThreadNew+0x72>
        return (NULL);
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e054      	b.n	8007d9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	089b      	lsrs	r3, r3, #2
 8007d00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00e      	beq.n	8007d28 <osThreadNew+0xa8>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007d10:	d90a      	bls.n	8007d28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d006      	beq.n	8007d28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <osThreadNew+0xa8>
        mem = 1;
 8007d22:	2301      	movs	r3, #1
 8007d24:	61bb      	str	r3, [r7, #24]
 8007d26:	e010      	b.n	8007d4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10c      	bne.n	8007d4a <osThreadNew+0xca>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d108      	bne.n	8007d4a <osThreadNew+0xca>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <osThreadNew+0xca>
          mem = 0;
 8007d40:	2300      	movs	r3, #0
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	e001      	b.n	8007d4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d110      	bne.n	8007d72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d58:	9202      	str	r2, [sp, #8]
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	6a3a      	ldr	r2, [r7, #32]
 8007d64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 fe1a 	bl	80089a0 <xTaskCreateStatic>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	e013      	b.n	8007d9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d110      	bne.n	8007d9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	f107 0310 	add.w	r3, r7, #16
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 fe68 	bl	8008a60 <xTaskCreate>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d001      	beq.n	8007d9a <osThreadNew+0x11a>
            hTask = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d9a:	693b      	ldr	r3, [r7, #16]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3728      	adds	r7, #40	@ 0x28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dac:	f3ef 8305 	mrs	r3, IPSR
 8007db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007db2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <osDelay+0x1c>
    stat = osErrorISR;
 8007db8:	f06f 0305 	mvn.w	r3, #5
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	e007      	b.n	8007dd0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 ff8e 	bl	8008cec <vTaskDelay>
    }
  }

  return (stat);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4a07      	ldr	r2, [pc, #28]	@ (8007e08 <vApplicationGetIdleTaskMemory+0x2c>)
 8007dec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4a06      	ldr	r2, [pc, #24]	@ (8007e0c <vApplicationGetIdleTaskMemory+0x30>)
 8007df2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2280      	movs	r2, #128	@ 0x80
 8007df8:	601a      	str	r2, [r3, #0]
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000410 	.word	0x20000410
 8007e0c:	2000046c 	.word	0x2000046c

08007e10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4a07      	ldr	r2, [pc, #28]	@ (8007e3c <vApplicationGetTimerTaskMemory+0x2c>)
 8007e20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	4a06      	ldr	r2, [pc, #24]	@ (8007e40 <vApplicationGetTimerTaskMemory+0x30>)
 8007e26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e2e:	601a      	str	r2, [r3, #0]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	2000066c 	.word	0x2000066c
 8007e40:	200006c8 	.word	0x200006c8

08007e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f103 0208 	add.w	r2, r3, #8
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f103 0208 	add.w	r2, r3, #8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f103 0208 	add.w	r2, r3, #8
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	601a      	str	r2, [r3, #0]
}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d103      	bne.n	8007f06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e00c      	b.n	8007f20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3308      	adds	r3, #8
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	e002      	b.n	8007f14 <vListInsert+0x2e>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d2f6      	bcs.n	8007f0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	601a      	str	r2, [r3, #0]
}
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6892      	ldr	r2, [r2, #8]
 8007f6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6852      	ldr	r2, [r2, #4]
 8007f78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d103      	bne.n	8007f8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	1e5a      	subs	r2, r3, #1
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10b      	bne.n	8007fd8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007fd2:	bf00      	nop
 8007fd4:	bf00      	nop
 8007fd6:	e7fd      	b.n	8007fd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fd8:	f002 f8de 	bl	800a198 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe4:	68f9      	ldr	r1, [r7, #12]
 8007fe6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	441a      	add	r2, r3
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008008:	3b01      	subs	r3, #1
 800800a:	68f9      	ldr	r1, [r7, #12]
 800800c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800800e:	fb01 f303 	mul.w	r3, r1, r3
 8008012:	441a      	add	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	22ff      	movs	r2, #255	@ 0xff
 800801c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	22ff      	movs	r2, #255	@ 0xff
 8008024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d114      	bne.n	8008058 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01a      	beq.n	800806c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3310      	adds	r3, #16
 800803a:	4618      	mov	r0, r3
 800803c:	f001 f952 	bl	80092e4 <xTaskRemoveFromEventList>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d012      	beq.n	800806c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <xQueueGenericReset+0xd0>)
 8008048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	e009      	b.n	800806c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3310      	adds	r3, #16
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff fef1 	bl	8007e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3324      	adds	r3, #36	@ 0x24
 8008066:	4618      	mov	r0, r3
 8008068:	f7ff feec 	bl	8007e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800806c:	f002 f8c6 	bl	800a1fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008070:	2301      	movs	r3, #1
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	e000ed04 	.word	0xe000ed04

08008080 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008080:	b580      	push	{r7, lr}
 8008082:	b08e      	sub	sp, #56	@ 0x38
 8008084:	af02      	add	r7, sp, #8
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10b      	bne.n	80080ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
 80080aa:	e7fd      	b.n	80080a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10b      	bne.n	80080ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop
 80080c8:	e7fd      	b.n	80080c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <xQueueGenericCreateStatic+0x56>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <xQueueGenericCreateStatic+0x5a>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <xQueueGenericCreateStatic+0x5c>
 80080da:	2300      	movs	r3, #0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	623b      	str	r3, [r7, #32]
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	e7fd      	b.n	80080f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <xQueueGenericCreateStatic+0x84>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <xQueueGenericCreateStatic+0x88>
 8008104:	2301      	movs	r3, #1
 8008106:	e000      	b.n	800810a <xQueueGenericCreateStatic+0x8a>
 8008108:	2300      	movs	r3, #0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10b      	bne.n	8008126 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	61fb      	str	r3, [r7, #28]
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	e7fd      	b.n	8008122 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008126:	2350      	movs	r3, #80	@ 0x50
 8008128:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b50      	cmp	r3, #80	@ 0x50
 800812e:	d00b      	beq.n	8008148 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	61bb      	str	r3, [r7, #24]
}
 8008142:	bf00      	nop
 8008144:	bf00      	nop
 8008146:	e7fd      	b.n	8008144 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008148:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800814e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800815c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	4613      	mov	r3, r2
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 f805 	bl	800817a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008172:	4618      	mov	r0, r3
 8008174:	3730      	adds	r7, #48	@ 0x30
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b084      	sub	sp, #16
 800817e:	af00      	add	r7, sp, #0
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
 8008186:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d103      	bne.n	8008196 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	e002      	b.n	800819c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081a8:	2101      	movs	r1, #1
 80081aa:	69b8      	ldr	r0, [r7, #24]
 80081ac:	f7ff fefe 	bl	8007fac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08e      	sub	sp, #56	@ 0x38
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081ce:	2300      	movs	r3, #0
 80081d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80081d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10b      	bne.n	80081f4 <xQueueGenericSend+0x34>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	e7fd      	b.n	80081f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d103      	bne.n	8008202 <xQueueGenericSend+0x42>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <xQueueGenericSend+0x46>
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <xQueueGenericSend+0x48>
 8008206:	2300      	movs	r3, #0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10b      	bne.n	8008224 <xQueueGenericSend+0x64>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	e7fd      	b.n	8008220 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d103      	bne.n	8008232 <xQueueGenericSend+0x72>
 800822a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <xQueueGenericSend+0x76>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <xQueueGenericSend+0x78>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10b      	bne.n	8008254 <xQueueGenericSend+0x94>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	623b      	str	r3, [r7, #32]
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	e7fd      	b.n	8008250 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008254:	f001 fa30 	bl	80096b8 <xTaskGetSchedulerState>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <xQueueGenericSend+0xa4>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <xQueueGenericSend+0xa8>
 8008264:	2301      	movs	r3, #1
 8008266:	e000      	b.n	800826a <xQueueGenericSend+0xaa>
 8008268:	2300      	movs	r3, #0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10b      	bne.n	8008286 <xQueueGenericSend+0xc6>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	61fb      	str	r3, [r7, #28]
}
 8008280:	bf00      	nop
 8008282:	bf00      	nop
 8008284:	e7fd      	b.n	8008282 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008286:	f001 ff87 	bl	800a198 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800828a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008292:	429a      	cmp	r2, r3
 8008294:	d302      	bcc.n	800829c <xQueueGenericSend+0xdc>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d129      	bne.n	80082f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	68b9      	ldr	r1, [r7, #8]
 80082a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082a2:	f000 fa0f 	bl	80086c4 <prvCopyDataToQueue>
 80082a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d010      	beq.n	80082d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	3324      	adds	r3, #36	@ 0x24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 f815 	bl	80092e4 <xTaskRemoveFromEventList>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d013      	beq.n	80082e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082c0:	4b3f      	ldr	r3, [pc, #252]	@ (80083c0 <xQueueGenericSend+0x200>)
 80082c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	e00a      	b.n	80082e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d007      	beq.n	80082e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082d8:	4b39      	ldr	r3, [pc, #228]	@ (80083c0 <xQueueGenericSend+0x200>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082e8:	f001 ff88 	bl	800a1fc <vPortExitCritical>
				return pdPASS;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e063      	b.n	80083b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082f6:	f001 ff81 	bl	800a1fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e05c      	b.n	80083b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008304:	f107 0314 	add.w	r3, r7, #20
 8008308:	4618      	mov	r0, r3
 800830a:	f001 f851 	bl	80093b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800830e:	2301      	movs	r3, #1
 8008310:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008312:	f001 ff73 	bl	800a1fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008316:	f000 fd87 	bl	8008e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800831a:	f001 ff3d 	bl	800a198 <vPortEnterCritical>
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008324:	b25b      	sxtb	r3, r3
 8008326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832a:	d103      	bne.n	8008334 <xQueueGenericSend+0x174>
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008336:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800833a:	b25b      	sxtb	r3, r3
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d103      	bne.n	800834a <xQueueGenericSend+0x18a>
 8008342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800834a:	f001 ff57 	bl	800a1fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800834e:	1d3a      	adds	r2, r7, #4
 8008350:	f107 0314 	add.w	r3, r7, #20
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f001 f840 	bl	80093dc <xTaskCheckForTimeOut>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d124      	bne.n	80083ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008362:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008364:	f000 faa6 	bl	80088b4 <prvIsQueueFull>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d018      	beq.n	80083a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	3310      	adds	r3, #16
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f000 ff62 	bl	8009240 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800837c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800837e:	f000 fa31 	bl	80087e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008382:	f000 fd97 	bl	8008eb4 <xTaskResumeAll>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	f47f af7c 	bne.w	8008286 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800838e:	4b0c      	ldr	r3, [pc, #48]	@ (80083c0 <xQueueGenericSend+0x200>)
 8008390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	e772      	b.n	8008286 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083a2:	f000 fa1f 	bl	80087e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083a6:	f000 fd85 	bl	8008eb4 <xTaskResumeAll>
 80083aa:	e76c      	b.n	8008286 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083ae:	f000 fa19 	bl	80087e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083b2:	f000 fd7f 	bl	8008eb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3738      	adds	r7, #56	@ 0x38
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	e000ed04 	.word	0xe000ed04

080083c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b090      	sub	sp, #64	@ 0x40
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80083d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10b      	bne.n	80083f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083ee:	bf00      	nop
 80083f0:	bf00      	nop
 80083f2:	e7fd      	b.n	80083f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <xQueueGenericSendFromISR+0x3e>
 80083fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <xQueueGenericSendFromISR+0x42>
 8008402:	2301      	movs	r3, #1
 8008404:	e000      	b.n	8008408 <xQueueGenericSendFromISR+0x44>
 8008406:	2300      	movs	r3, #0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10b      	bne.n	8008424 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	e7fd      	b.n	8008420 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	2b02      	cmp	r3, #2
 8008428:	d103      	bne.n	8008432 <xQueueGenericSendFromISR+0x6e>
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <xQueueGenericSendFromISR+0x72>
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <xQueueGenericSendFromISR+0x74>
 8008436:	2300      	movs	r3, #0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10b      	bne.n	8008454 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	623b      	str	r3, [r7, #32]
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	e7fd      	b.n	8008450 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008454:	f001 ff80 	bl	800a358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008458:	f3ef 8211 	mrs	r2, BASEPRI
 800845c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	61fa      	str	r2, [r7, #28]
 800846e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008470:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008472:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847c:	429a      	cmp	r2, r3
 800847e:	d302      	bcc.n	8008486 <xQueueGenericSendFromISR+0xc2>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d12f      	bne.n	80084e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008488:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800848c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008494:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	68b9      	ldr	r1, [r7, #8]
 800849a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800849c:	f000 f912 	bl	80086c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a8:	d112      	bne.n	80084d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d016      	beq.n	80084e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b4:	3324      	adds	r3, #36	@ 0x24
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 ff14 	bl	80092e4 <xTaskRemoveFromEventList>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00e      	beq.n	80084e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	e007      	b.n	80084e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80084d4:	3301      	adds	r3, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	b25a      	sxtb	r2, r3
 80084da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80084e0:	2301      	movs	r3, #1
 80084e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80084e4:	e001      	b.n	80084ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3740      	adds	r7, #64	@ 0x40
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08c      	sub	sp, #48	@ 0x30
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800850c:	2300      	movs	r3, #0
 800850e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <xQueueReceive+0x32>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	623b      	str	r3, [r7, #32]
}
 800852c:	bf00      	nop
 800852e:	bf00      	nop
 8008530:	e7fd      	b.n	800852e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d103      	bne.n	8008540 <xQueueReceive+0x40>
 8008538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <xQueueReceive+0x44>
 8008540:	2301      	movs	r3, #1
 8008542:	e000      	b.n	8008546 <xQueueReceive+0x46>
 8008544:	2300      	movs	r3, #0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10b      	bne.n	8008562 <xQueueReceive+0x62>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	61fb      	str	r3, [r7, #28]
}
 800855c:	bf00      	nop
 800855e:	bf00      	nop
 8008560:	e7fd      	b.n	800855e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008562:	f001 f8a9 	bl	80096b8 <xTaskGetSchedulerState>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <xQueueReceive+0x72>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <xQueueReceive+0x76>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <xQueueReceive+0x78>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10b      	bne.n	8008594 <xQueueReceive+0x94>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61bb      	str	r3, [r7, #24]
}
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	e7fd      	b.n	8008590 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008594:	f001 fe00 	bl	800a198 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d01f      	beq.n	80085e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085a4:	68b9      	ldr	r1, [r7, #8]
 80085a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085a8:	f000 f8f6 	bl	8008798 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ae:	1e5a      	subs	r2, r3, #1
 80085b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00f      	beq.n	80085dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	3310      	adds	r3, #16
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fe8f 	bl	80092e4 <xTaskRemoveFromEventList>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085cc:	4b3c      	ldr	r3, [pc, #240]	@ (80086c0 <xQueueReceive+0x1c0>)
 80085ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085dc:	f001 fe0e 	bl	800a1fc <vPortExitCritical>
				return pdPASS;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e069      	b.n	80086b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d103      	bne.n	80085f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085ea:	f001 fe07 	bl	800a1fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085ee:	2300      	movs	r3, #0
 80085f0:	e062      	b.n	80086b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d106      	bne.n	8008606 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085f8:	f107 0310 	add.w	r3, r7, #16
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fed7 	bl	80093b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008602:	2301      	movs	r3, #1
 8008604:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008606:	f001 fdf9 	bl	800a1fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800860a:	f000 fc0d 	bl	8008e28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800860e:	f001 fdc3 	bl	800a198 <vPortEnterCritical>
 8008612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008614:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008618:	b25b      	sxtb	r3, r3
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861e:	d103      	bne.n	8008628 <xQueueReceive+0x128>
 8008620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800862e:	b25b      	sxtb	r3, r3
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d103      	bne.n	800863e <xQueueReceive+0x13e>
 8008636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800863e:	f001 fddd 	bl	800a1fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008642:	1d3a      	adds	r2, r7, #4
 8008644:	f107 0310 	add.w	r3, r7, #16
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f000 fec6 	bl	80093dc <xTaskCheckForTimeOut>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d123      	bne.n	800869e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008658:	f000 f916 	bl	8008888 <prvIsQueueEmpty>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d017      	beq.n	8008692 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008664:	3324      	adds	r3, #36	@ 0x24
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fde8 	bl	8009240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008672:	f000 f8b7 	bl	80087e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008676:	f000 fc1d 	bl	8008eb4 <xTaskResumeAll>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d189      	bne.n	8008594 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008680:	4b0f      	ldr	r3, [pc, #60]	@ (80086c0 <xQueueReceive+0x1c0>)
 8008682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	e780      	b.n	8008594 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008694:	f000 f8a6 	bl	80087e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008698:	f000 fc0c 	bl	8008eb4 <xTaskResumeAll>
 800869c:	e77a      	b.n	8008594 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800869e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086a0:	f000 f8a0 	bl	80087e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086a4:	f000 fc06 	bl	8008eb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086aa:	f000 f8ed 	bl	8008888 <prvIsQueueEmpty>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f43f af6f 	beq.w	8008594 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3730      	adds	r7, #48	@ 0x30
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086d0:	2300      	movs	r3, #0
 80086d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10d      	bne.n	80086fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d14d      	bne.n	8008786 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f001 f800 	bl	80096f4 <xTaskPriorityDisinherit>
 80086f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	609a      	str	r2, [r3, #8]
 80086fc:	e043      	b.n	8008786 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d119      	bne.n	8008738 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6858      	ldr	r0, [r3, #4]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870c:	461a      	mov	r2, r3
 800870e:	68b9      	ldr	r1, [r7, #8]
 8008710:	f002 feeb 	bl	800b4ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871c:	441a      	add	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	429a      	cmp	r2, r3
 800872c:	d32b      	bcc.n	8008786 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	605a      	str	r2, [r3, #4]
 8008736:	e026      	b.n	8008786 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	68d8      	ldr	r0, [r3, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008740:	461a      	mov	r2, r3
 8008742:	68b9      	ldr	r1, [r7, #8]
 8008744:	f002 fed1 	bl	800b4ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008750:	425b      	negs	r3, r3
 8008752:	441a      	add	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d207      	bcs.n	8008774 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	689a      	ldr	r2, [r3, #8]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800876c:	425b      	negs	r3, r3
 800876e:	441a      	add	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d105      	bne.n	8008786 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	3b01      	subs	r3, #1
 8008784:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800878e:	697b      	ldr	r3, [r7, #20]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d018      	beq.n	80087dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b2:	441a      	add	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d303      	bcc.n	80087cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68d9      	ldr	r1, [r3, #12]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d4:	461a      	mov	r2, r3
 80087d6:	6838      	ldr	r0, [r7, #0]
 80087d8:	f002 fe87 	bl	800b4ea <memcpy>
	}
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087ec:	f001 fcd4 	bl	800a198 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087f8:	e011      	b.n	800881e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d012      	beq.n	8008828 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3324      	adds	r3, #36	@ 0x24
 8008806:	4618      	mov	r0, r3
 8008808:	f000 fd6c 	bl	80092e4 <xTaskRemoveFromEventList>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008812:	f000 fe47 	bl	80094a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	3b01      	subs	r3, #1
 800881a:	b2db      	uxtb	r3, r3
 800881c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800881e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008822:	2b00      	cmp	r3, #0
 8008824:	dce9      	bgt.n	80087fa <prvUnlockQueue+0x16>
 8008826:	e000      	b.n	800882a <prvUnlockQueue+0x46>
					break;
 8008828:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	22ff      	movs	r2, #255	@ 0xff
 800882e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008832:	f001 fce3 	bl	800a1fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008836:	f001 fcaf 	bl	800a198 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008840:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008842:	e011      	b.n	8008868 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d012      	beq.n	8008872 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3310      	adds	r3, #16
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fd47 	bl	80092e4 <xTaskRemoveFromEventList>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800885c:	f000 fe22 	bl	80094a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	3b01      	subs	r3, #1
 8008864:	b2db      	uxtb	r3, r3
 8008866:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800886c:	2b00      	cmp	r3, #0
 800886e:	dce9      	bgt.n	8008844 <prvUnlockQueue+0x60>
 8008870:	e000      	b.n	8008874 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008872:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	22ff      	movs	r2, #255	@ 0xff
 8008878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800887c:	f001 fcbe 	bl	800a1fc <vPortExitCritical>
}
 8008880:	bf00      	nop
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008890:	f001 fc82 	bl	800a198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800889c:	2301      	movs	r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e001      	b.n	80088a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088a6:	f001 fca9 	bl	800a1fc <vPortExitCritical>

	return xReturn;
 80088aa:	68fb      	ldr	r3, [r7, #12]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088bc:	f001 fc6c 	bl	800a198 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d102      	bne.n	80088d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088cc:	2301      	movs	r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	e001      	b.n	80088d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088d6:	f001 fc91 	bl	800a1fc <vPortExitCritical>

	return xReturn;
 80088da:	68fb      	ldr	r3, [r7, #12]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088ee:	2300      	movs	r3, #0
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	e014      	b.n	800891e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088f4:	4a0f      	ldr	r2, [pc, #60]	@ (8008934 <vQueueAddToRegistry+0x50>)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008900:	490c      	ldr	r1, [pc, #48]	@ (8008934 <vQueueAddToRegistry+0x50>)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800890a:	4a0a      	ldr	r2, [pc, #40]	@ (8008934 <vQueueAddToRegistry+0x50>)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	4413      	add	r3, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008916:	e006      	b.n	8008926 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3301      	adds	r3, #1
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b07      	cmp	r3, #7
 8008922:	d9e7      	bls.n	80088f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20000ac8 	.word	0x20000ac8

08008938 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008948:	f001 fc26 	bl	800a198 <vPortEnterCritical>
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008952:	b25b      	sxtb	r3, r3
 8008954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008958:	d103      	bne.n	8008962 <vQueueWaitForMessageRestricted+0x2a>
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008968:	b25b      	sxtb	r3, r3
 800896a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896e:	d103      	bne.n	8008978 <vQueueWaitForMessageRestricted+0x40>
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008978:	f001 fc40 	bl	800a1fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008980:	2b00      	cmp	r3, #0
 8008982:	d106      	bne.n	8008992 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	3324      	adds	r3, #36	@ 0x24
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68b9      	ldr	r1, [r7, #8]
 800898c:	4618      	mov	r0, r3
 800898e:	f000 fc7d 	bl	800928c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008992:	6978      	ldr	r0, [r7, #20]
 8008994:	f7ff ff26 	bl	80087e4 <prvUnlockQueue>
	}
 8008998:	bf00      	nop
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b08e      	sub	sp, #56	@ 0x38
 80089a4:	af04      	add	r7, sp, #16
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	623b      	str	r3, [r7, #32]
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	e7fd      	b.n	80089c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10b      	bne.n	80089ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	61fb      	str	r3, [r7, #28]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089ea:	235c      	movs	r3, #92	@ 0x5c
 80089ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80089f2:	d00b      	beq.n	8008a0c <xTaskCreateStatic+0x6c>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	61bb      	str	r3, [r7, #24]
}
 8008a06:	bf00      	nop
 8008a08:	bf00      	nop
 8008a0a:	e7fd      	b.n	8008a08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d01e      	beq.n	8008a52 <xTaskCreateStatic+0xb2>
 8008a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01b      	beq.n	8008a52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a32:	9302      	str	r3, [sp, #8]
 8008a34:	f107 0314 	add.w	r3, r7, #20
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f000 f850 	bl	8008aea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a4c:	f000 f8de 	bl	8008c0c <prvAddNewTaskToReadyList>
 8008a50:	e001      	b.n	8008a56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a56:	697b      	ldr	r3, [r7, #20]
	}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3728      	adds	r7, #40	@ 0x28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08c      	sub	sp, #48	@ 0x30
 8008a64:	af04      	add	r7, sp, #16
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	603b      	str	r3, [r7, #0]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a70:	88fb      	ldrh	r3, [r7, #6]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4618      	mov	r0, r3
 8008a76:	f001 fcb1 	bl	800a3dc <pvPortMalloc>
 8008a7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00e      	beq.n	8008aa0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a82:	205c      	movs	r0, #92	@ 0x5c
 8008a84:	f001 fcaa 	bl	800a3dc <pvPortMalloc>
 8008a88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a96:	e005      	b.n	8008aa4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a98:	6978      	ldr	r0, [r7, #20]
 8008a9a:	f001 fd6d 	bl	800a578 <vPortFree>
 8008a9e:	e001      	b.n	8008aa4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d017      	beq.n	8008ada <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ab2:	88fa      	ldrh	r2, [r7, #6]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	9303      	str	r3, [sp, #12]
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	9302      	str	r3, [sp, #8]
 8008abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f000 f80e 	bl	8008aea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ace:	69f8      	ldr	r0, [r7, #28]
 8008ad0:	f000 f89c 	bl	8008c0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	e002      	b.n	8008ae0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ae0:	69bb      	ldr	r3, [r7, #24]
	}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3720      	adds	r7, #32
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b088      	sub	sp, #32
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	607a      	str	r2, [r7, #4]
 8008af6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	461a      	mov	r2, r3
 8008b02:	21a5      	movs	r1, #165	@ 0xa5
 8008b04:	f002 fc71 	bl	800b3ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b12:	3b01      	subs	r3, #1
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f023 0307 	bic.w	r3, r3, #7
 8008b20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	f003 0307 	and.w	r3, r3, #7
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	617b      	str	r3, [r7, #20]
}
 8008b3e:	bf00      	nop
 8008b40:	bf00      	nop
 8008b42:	e7fd      	b.n	8008b40 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d01f      	beq.n	8008b8a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	61fb      	str	r3, [r7, #28]
 8008b4e:	e012      	b.n	8008b76 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	7819      	ldrb	r1, [r3, #0]
 8008b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	3334      	adds	r3, #52	@ 0x34
 8008b60:	460a      	mov	r2, r1
 8008b62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	4413      	add	r3, r2
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d006      	beq.n	8008b7e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	3301      	adds	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	2b0f      	cmp	r3, #15
 8008b7a:	d9e9      	bls.n	8008b50 <prvInitialiseNewTask+0x66>
 8008b7c:	e000      	b.n	8008b80 <prvInitialiseNewTask+0x96>
			{
				break;
 8008b7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b88:	e003      	b.n	8008b92 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b94:	2b37      	cmp	r3, #55	@ 0x37
 8008b96:	d901      	bls.n	8008b9c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b98:	2337      	movs	r3, #55	@ 0x37
 8008b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ba6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008baa:	2200      	movs	r2, #0
 8008bac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7ff f966 	bl	8007e84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bba:	3318      	adds	r3, #24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff f961 	bl	8007e84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bd6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	2200      	movs	r2, #0
 8008bdc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	68f9      	ldr	r1, [r7, #12]
 8008bea:	69b8      	ldr	r0, [r7, #24]
 8008bec:	f001 f9a0 	bl	8009f30 <pxPortInitialiseStack>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d002      	beq.n	8008c02 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c02:	bf00      	nop
 8008c04:	3720      	adds	r7, #32
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c14:	f001 fac0 	bl	800a198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c18:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd0 <prvAddNewTaskToReadyList+0xc4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008cd0 <prvAddNewTaskToReadyList+0xc4>)
 8008c20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c22:	4b2c      	ldr	r3, [pc, #176]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d109      	bne.n	8008c3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c30:	4b27      	ldr	r3, [pc, #156]	@ (8008cd0 <prvAddNewTaskToReadyList+0xc4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d110      	bne.n	8008c5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c38:	f000 fc80 	bl	800953c <prvInitialiseTaskLists>
 8008c3c:	e00d      	b.n	8008c5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c3e:	4b26      	ldr	r3, [pc, #152]	@ (8008cd8 <prvAddNewTaskToReadyList+0xcc>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d109      	bne.n	8008c5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c46:	4b23      	ldr	r3, [pc, #140]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d802      	bhi.n	8008c5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c54:	4a1f      	ldr	r2, [pc, #124]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c5a:	4b20      	ldr	r3, [pc, #128]	@ (8008cdc <prvAddNewTaskToReadyList+0xd0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	4a1e      	ldr	r2, [pc, #120]	@ (8008cdc <prvAddNewTaskToReadyList+0xd0>)
 8008c62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c64:	4b1d      	ldr	r3, [pc, #116]	@ (8008cdc <prvAddNewTaskToReadyList+0xd0>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c70:	4b1b      	ldr	r3, [pc, #108]	@ (8008ce0 <prvAddNewTaskToReadyList+0xd4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d903      	bls.n	8008c80 <prvAddNewTaskToReadyList+0x74>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7c:	4a18      	ldr	r2, [pc, #96]	@ (8008ce0 <prvAddNewTaskToReadyList+0xd4>)
 8008c7e:	6013      	str	r3, [r2, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4a15      	ldr	r2, [pc, #84]	@ (8008ce4 <prvAddNewTaskToReadyList+0xd8>)
 8008c8e:	441a      	add	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3304      	adds	r3, #4
 8008c94:	4619      	mov	r1, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	f7ff f901 	bl	8007e9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c9c:	f001 faae 	bl	800a1fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd8 <prvAddNewTaskToReadyList+0xcc>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00e      	beq.n	8008cc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd4 <prvAddNewTaskToReadyList+0xc8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d207      	bcs.n	8008cc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce8 <prvAddNewTaskToReadyList+0xdc>)
 8008cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20000fdc 	.word	0x20000fdc
 8008cd4:	20000b08 	.word	0x20000b08
 8008cd8:	20000fe8 	.word	0x20000fe8
 8008cdc:	20000ff8 	.word	0x20000ff8
 8008ce0:	20000fe4 	.word	0x20000fe4
 8008ce4:	20000b0c 	.word	0x20000b0c
 8008ce8:	e000ed04 	.word	0xe000ed04

08008cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d018      	beq.n	8008d30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cfe:	4b14      	ldr	r3, [pc, #80]	@ (8008d50 <vTaskDelay+0x64>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00b      	beq.n	8008d1e <vTaskDelay+0x32>
	__asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	60bb      	str	r3, [r7, #8]
}
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d1e:	f000 f883 	bl	8008e28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d22:	2100      	movs	r1, #0
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fd55 	bl	80097d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d2a:	f000 f8c3 	bl	8008eb4 <xTaskResumeAll>
 8008d2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d107      	bne.n	8008d46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008d36:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <vTaskDelay+0x68>)
 8008d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d46:	bf00      	nop
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	20001004 	.word	0x20001004
 8008d54:	e000ed04 	.word	0xe000ed04

08008d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	@ 0x28
 8008d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d66:	463a      	mov	r2, r7
 8008d68:	1d39      	adds	r1, r7, #4
 8008d6a:	f107 0308 	add.w	r3, r7, #8
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7ff f834 	bl	8007ddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	9202      	str	r2, [sp, #8]
 8008d7c:	9301      	str	r3, [sp, #4]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	2300      	movs	r3, #0
 8008d84:	460a      	mov	r2, r1
 8008d86:	4922      	ldr	r1, [pc, #136]	@ (8008e10 <vTaskStartScheduler+0xb8>)
 8008d88:	4822      	ldr	r0, [pc, #136]	@ (8008e14 <vTaskStartScheduler+0xbc>)
 8008d8a:	f7ff fe09 	bl	80089a0 <xTaskCreateStatic>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4a21      	ldr	r2, [pc, #132]	@ (8008e18 <vTaskStartScheduler+0xc0>)
 8008d92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d94:	4b20      	ldr	r3, [pc, #128]	@ (8008e18 <vTaskStartScheduler+0xc0>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	617b      	str	r3, [r7, #20]
 8008da0:	e001      	b.n	8008da6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008da2:	2300      	movs	r3, #0
 8008da4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d102      	bne.n	8008db2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dac:	f000 fd66 	bl	800987c <xTimerCreateTimerTask>
 8008db0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d116      	bne.n	8008de6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	613b      	str	r3, [r7, #16]
}
 8008dca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dcc:	4b13      	ldr	r3, [pc, #76]	@ (8008e1c <vTaskStartScheduler+0xc4>)
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dd4:	4b12      	ldr	r3, [pc, #72]	@ (8008e20 <vTaskStartScheduler+0xc8>)
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dda:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <vTaskStartScheduler+0xcc>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008de0:	f001 f936 	bl	800a050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008de4:	e00f      	b.n	8008e06 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d10b      	bne.n	8008e06 <vTaskStartScheduler+0xae>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	60fb      	str	r3, [r7, #12]
}
 8008e00:	bf00      	nop
 8008e02:	bf00      	nop
 8008e04:	e7fd      	b.n	8008e02 <vTaskStartScheduler+0xaa>
}
 8008e06:	bf00      	nop
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	0800d8e8 	.word	0x0800d8e8
 8008e14:	080094bd 	.word	0x080094bd
 8008e18:	20001000 	.word	0x20001000
 8008e1c:	20000ffc 	.word	0x20000ffc
 8008e20:	20000fe8 	.word	0x20000fe8
 8008e24:	20000fe0 	.word	0x20000fe0

08008e28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e2c:	4b04      	ldr	r3, [pc, #16]	@ (8008e40 <vTaskSuspendAll+0x18>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3301      	adds	r3, #1
 8008e32:	4a03      	ldr	r2, [pc, #12]	@ (8008e40 <vTaskSuspendAll+0x18>)
 8008e34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e36:	bf00      	nop
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	20001004 	.word	0x20001004

08008e44 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008e4e:	4b14      	ldr	r3, [pc, #80]	@ (8008ea0 <prvGetExpectedIdleTime+0x5c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8008e56:	2301      	movs	r3, #1
 8008e58:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008e5a:	4b12      	ldr	r3, [pc, #72]	@ (8008ea4 <prvGetExpectedIdleTime+0x60>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	607b      	str	r3, [r7, #4]
 8008e68:	e012      	b.n	8008e90 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea8 <prvGetExpectedIdleTime+0x64>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d902      	bls.n	8008e78 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	607b      	str	r3, [r7, #4]
 8008e76:	e00b      	b.n	8008e90 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	607b      	str	r3, [r7, #4]
 8008e82:	e005      	b.n	8008e90 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008e84:	4b09      	ldr	r3, [pc, #36]	@ (8008eac <prvGetExpectedIdleTime+0x68>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	4b09      	ldr	r3, [pc, #36]	@ (8008eb0 <prvGetExpectedIdleTime+0x6c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8008e90:	687b      	ldr	r3, [r7, #4]
	}
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	20000fe4 	.word	0x20000fe4
 8008ea4:	20000b08 	.word	0x20000b08
 8008ea8:	20000b0c 	.word	0x20000b0c
 8008eac:	20000ffc 	.word	0x20000ffc
 8008eb0:	20000fe0 	.word	0x20000fe0

08008eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ec2:	4b42      	ldr	r3, [pc, #264]	@ (8008fcc <xTaskResumeAll+0x118>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10b      	bne.n	8008ee2 <xTaskResumeAll+0x2e>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	603b      	str	r3, [r7, #0]
}
 8008edc:	bf00      	nop
 8008ede:	bf00      	nop
 8008ee0:	e7fd      	b.n	8008ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ee2:	f001 f959 	bl	800a198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ee6:	4b39      	ldr	r3, [pc, #228]	@ (8008fcc <xTaskResumeAll+0x118>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	4a37      	ldr	r2, [pc, #220]	@ (8008fcc <xTaskResumeAll+0x118>)
 8008eee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef0:	4b36      	ldr	r3, [pc, #216]	@ (8008fcc <xTaskResumeAll+0x118>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d162      	bne.n	8008fbe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ef8:	4b35      	ldr	r3, [pc, #212]	@ (8008fd0 <xTaskResumeAll+0x11c>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d05e      	beq.n	8008fbe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f00:	e02f      	b.n	8008f62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f02:	4b34      	ldr	r3, [pc, #208]	@ (8008fd4 <xTaskResumeAll+0x120>)
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3318      	adds	r3, #24
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff f822 	bl	8007f58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff f81d 	bl	8007f58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f22:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd8 <xTaskResumeAll+0x124>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d903      	bls.n	8008f32 <xTaskResumeAll+0x7e>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8008fd8 <xTaskResumeAll+0x124>)
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4a27      	ldr	r2, [pc, #156]	@ (8008fdc <xTaskResumeAll+0x128>)
 8008f40:	441a      	add	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3304      	adds	r3, #4
 8008f46:	4619      	mov	r1, r3
 8008f48:	4610      	mov	r0, r2
 8008f4a:	f7fe ffa8 	bl	8007e9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f52:	4b23      	ldr	r3, [pc, #140]	@ (8008fe0 <xTaskResumeAll+0x12c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d302      	bcc.n	8008f62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008f5c:	4b21      	ldr	r3, [pc, #132]	@ (8008fe4 <xTaskResumeAll+0x130>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f62:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd4 <xTaskResumeAll+0x120>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1cb      	bne.n	8008f02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f70:	f000 fb82 	bl	8009678 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f74:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe8 <xTaskResumeAll+0x134>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d010      	beq.n	8008fa2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f80:	f000 f846 	bl	8009010 <xTaskIncrementTick>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d002      	beq.n	8008f90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008f8a:	4b16      	ldr	r3, [pc, #88]	@ (8008fe4 <xTaskResumeAll+0x130>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1f1      	bne.n	8008f80 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008f9c:	4b12      	ldr	r3, [pc, #72]	@ (8008fe8 <xTaskResumeAll+0x134>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fa2:	4b10      	ldr	r3, [pc, #64]	@ (8008fe4 <xTaskResumeAll+0x130>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d009      	beq.n	8008fbe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008faa:	2301      	movs	r3, #1
 8008fac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fae:	4b0f      	ldr	r3, [pc, #60]	@ (8008fec <xTaskResumeAll+0x138>)
 8008fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fbe:	f001 f91d 	bl	800a1fc <vPortExitCritical>

	return xAlreadyYielded;
 8008fc2:	68bb      	ldr	r3, [r7, #8]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20001004 	.word	0x20001004
 8008fd0:	20000fdc 	.word	0x20000fdc
 8008fd4:	20000f9c 	.word	0x20000f9c
 8008fd8:	20000fe4 	.word	0x20000fe4
 8008fdc:	20000b0c 	.word	0x20000b0c
 8008fe0:	20000b08 	.word	0x20000b08
 8008fe4:	20000ff0 	.word	0x20000ff0
 8008fe8:	20000fec 	.word	0x20000fec
 8008fec:	e000ed04 	.word	0xe000ed04

08008ff0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ff6:	4b05      	ldr	r3, [pc, #20]	@ (800900c <xTaskGetTickCount+0x1c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ffc:	687b      	ldr	r3, [r7, #4]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	20000fe0 	.word	0x20000fe0

08009010 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009016:	2300      	movs	r3, #0
 8009018:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800901a:	4b4f      	ldr	r3, [pc, #316]	@ (8009158 <xTaskIncrementTick+0x148>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	f040 8090 	bne.w	8009144 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009024:	4b4d      	ldr	r3, [pc, #308]	@ (800915c <xTaskIncrementTick+0x14c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3301      	adds	r3, #1
 800902a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800902c:	4a4b      	ldr	r2, [pc, #300]	@ (800915c <xTaskIncrementTick+0x14c>)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d121      	bne.n	800907c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009038:	4b49      	ldr	r3, [pc, #292]	@ (8009160 <xTaskIncrementTick+0x150>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	603b      	str	r3, [r7, #0]
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <xTaskIncrementTick+0x46>
 800905a:	4b41      	ldr	r3, [pc, #260]	@ (8009160 <xTaskIncrementTick+0x150>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	4b40      	ldr	r3, [pc, #256]	@ (8009164 <xTaskIncrementTick+0x154>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a3e      	ldr	r2, [pc, #248]	@ (8009160 <xTaskIncrementTick+0x150>)
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	4a3e      	ldr	r2, [pc, #248]	@ (8009164 <xTaskIncrementTick+0x154>)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	4b3e      	ldr	r3, [pc, #248]	@ (8009168 <xTaskIncrementTick+0x158>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3301      	adds	r3, #1
 8009074:	4a3c      	ldr	r2, [pc, #240]	@ (8009168 <xTaskIncrementTick+0x158>)
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	f000 fafe 	bl	8009678 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800907c:	4b3b      	ldr	r3, [pc, #236]	@ (800916c <xTaskIncrementTick+0x15c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	429a      	cmp	r2, r3
 8009084:	d349      	bcc.n	800911a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009086:	4b36      	ldr	r3, [pc, #216]	@ (8009160 <xTaskIncrementTick+0x150>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d104      	bne.n	800909a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009090:	4b36      	ldr	r3, [pc, #216]	@ (800916c <xTaskIncrementTick+0x15c>)
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	601a      	str	r2, [r3, #0]
					break;
 8009098:	e03f      	b.n	800911a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800909a:	4b31      	ldr	r3, [pc, #196]	@ (8009160 <xTaskIncrementTick+0x150>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d203      	bcs.n	80090ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090b2:	4a2e      	ldr	r2, [pc, #184]	@ (800916c <xTaskIncrementTick+0x15c>)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090b8:	e02f      	b.n	800911a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	3304      	adds	r3, #4
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe ff4a 	bl	8007f58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d004      	beq.n	80090d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	3318      	adds	r3, #24
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe ff41 	bl	8007f58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090da:	4b25      	ldr	r3, [pc, #148]	@ (8009170 <xTaskIncrementTick+0x160>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d903      	bls.n	80090ea <xTaskIncrementTick+0xda>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e6:	4a22      	ldr	r2, [pc, #136]	@ (8009170 <xTaskIncrementTick+0x160>)
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ee:	4613      	mov	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009174 <xTaskIncrementTick+0x164>)
 80090f8:	441a      	add	r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	3304      	adds	r3, #4
 80090fe:	4619      	mov	r1, r3
 8009100:	4610      	mov	r0, r2
 8009102:	f7fe fecc 	bl	8007e9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800910a:	4b1b      	ldr	r3, [pc, #108]	@ (8009178 <xTaskIncrementTick+0x168>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009110:	429a      	cmp	r2, r3
 8009112:	d3b8      	bcc.n	8009086 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009114:	2301      	movs	r3, #1
 8009116:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009118:	e7b5      	b.n	8009086 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800911a:	4b17      	ldr	r3, [pc, #92]	@ (8009178 <xTaskIncrementTick+0x168>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009120:	4914      	ldr	r1, [pc, #80]	@ (8009174 <xTaskIncrementTick+0x164>)
 8009122:	4613      	mov	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4413      	add	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d901      	bls.n	8009136 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009132:	2301      	movs	r3, #1
 8009134:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009136:	4b11      	ldr	r3, [pc, #68]	@ (800917c <xTaskIncrementTick+0x16c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800913e:	2301      	movs	r3, #1
 8009140:	617b      	str	r3, [r7, #20]
 8009142:	e004      	b.n	800914e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009144:	4b0e      	ldr	r3, [pc, #56]	@ (8009180 <xTaskIncrementTick+0x170>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3301      	adds	r3, #1
 800914a:	4a0d      	ldr	r2, [pc, #52]	@ (8009180 <xTaskIncrementTick+0x170>)
 800914c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800914e:	697b      	ldr	r3, [r7, #20]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20001004 	.word	0x20001004
 800915c:	20000fe0 	.word	0x20000fe0
 8009160:	20000f94 	.word	0x20000f94
 8009164:	20000f98 	.word	0x20000f98
 8009168:	20000ff4 	.word	0x20000ff4
 800916c:	20000ffc 	.word	0x20000ffc
 8009170:	20000fe4 	.word	0x20000fe4
 8009174:	20000b0c 	.word	0x20000b0c
 8009178:	20000b08 	.word	0x20000b08
 800917c:	20000ff0 	.word	0x20000ff0
 8009180:	20000fec 	.word	0x20000fec

08009184 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800918a:	4b28      	ldr	r3, [pc, #160]	@ (800922c <vTaskSwitchContext+0xa8>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009192:	4b27      	ldr	r3, [pc, #156]	@ (8009230 <vTaskSwitchContext+0xac>)
 8009194:	2201      	movs	r2, #1
 8009196:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009198:	e042      	b.n	8009220 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800919a:	4b25      	ldr	r3, [pc, #148]	@ (8009230 <vTaskSwitchContext+0xac>)
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a0:	4b24      	ldr	r3, [pc, #144]	@ (8009234 <vTaskSwitchContext+0xb0>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	e011      	b.n	80091cc <vTaskSwitchContext+0x48>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10b      	bne.n	80091c6 <vTaskSwitchContext+0x42>
	__asm volatile
 80091ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	607b      	str	r3, [r7, #4]
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	e7fd      	b.n	80091c2 <vTaskSwitchContext+0x3e>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	491a      	ldr	r1, [pc, #104]	@ (8009238 <vTaskSwitchContext+0xb4>)
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	4613      	mov	r3, r2
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	440b      	add	r3, r1
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0e3      	beq.n	80091a8 <vTaskSwitchContext+0x24>
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4a13      	ldr	r2, [pc, #76]	@ (8009238 <vTaskSwitchContext+0xb4>)
 80091ec:	4413      	add	r3, r2
 80091ee:	60bb      	str	r3, [r7, #8]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	605a      	str	r2, [r3, #4]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	3308      	adds	r3, #8
 8009202:	429a      	cmp	r2, r3
 8009204:	d104      	bne.n	8009210 <vTaskSwitchContext+0x8c>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	605a      	str	r2, [r3, #4]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	4a09      	ldr	r2, [pc, #36]	@ (800923c <vTaskSwitchContext+0xb8>)
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	4a06      	ldr	r2, [pc, #24]	@ (8009234 <vTaskSwitchContext+0xb0>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6013      	str	r3, [r2, #0]
}
 8009220:	bf00      	nop
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	20001004 	.word	0x20001004
 8009230:	20000ff0 	.word	0x20000ff0
 8009234:	20000fe4 	.word	0x20000fe4
 8009238:	20000b0c 	.word	0x20000b0c
 800923c:	20000b08 	.word	0x20000b08

08009240 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10b      	bne.n	8009268 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	60fb      	str	r3, [r7, #12]
}
 8009262:	bf00      	nop
 8009264:	bf00      	nop
 8009266:	e7fd      	b.n	8009264 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009268:	4b07      	ldr	r3, [pc, #28]	@ (8009288 <vTaskPlaceOnEventList+0x48>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3318      	adds	r3, #24
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7fe fe38 	bl	8007ee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009276:	2101      	movs	r1, #1
 8009278:	6838      	ldr	r0, [r7, #0]
 800927a:	f000 faab 	bl	80097d4 <prvAddCurrentTaskToDelayedList>
}
 800927e:	bf00      	nop
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000b08 	.word	0x20000b08

0800928c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10b      	bne.n	80092b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	617b      	str	r3, [r7, #20]
}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	e7fd      	b.n	80092b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092b6:	4b0a      	ldr	r3, [pc, #40]	@ (80092e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3318      	adds	r3, #24
 80092bc:	4619      	mov	r1, r3
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f7fe fded 	bl	8007e9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80092ca:	f04f 33ff 	mov.w	r3, #4294967295
 80092ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	68b8      	ldr	r0, [r7, #8]
 80092d4:	f000 fa7e 	bl	80097d4 <prvAddCurrentTaskToDelayedList>
	}
 80092d8:	bf00      	nop
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	20000b08 	.word	0x20000b08

080092e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10b      	bne.n	8009312 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	60fb      	str	r3, [r7, #12]
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3318      	adds	r3, #24
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fe1e 	bl	8007f58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800931c:	4b1e      	ldr	r3, [pc, #120]	@ (8009398 <xTaskRemoveFromEventList+0xb4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d11f      	bne.n	8009364 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	3304      	adds	r3, #4
 8009328:	4618      	mov	r0, r3
 800932a:	f7fe fe15 	bl	8007f58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009332:	4b1a      	ldr	r3, [pc, #104]	@ (800939c <xTaskRemoveFromEventList+0xb8>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d903      	bls.n	8009342 <xTaskRemoveFromEventList+0x5e>
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933e:	4a17      	ldr	r2, [pc, #92]	@ (800939c <xTaskRemoveFromEventList+0xb8>)
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009346:	4613      	mov	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4a14      	ldr	r2, [pc, #80]	@ (80093a0 <xTaskRemoveFromEventList+0xbc>)
 8009350:	441a      	add	r2, r3
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	3304      	adds	r3, #4
 8009356:	4619      	mov	r1, r3
 8009358:	4610      	mov	r0, r2
 800935a:	f7fe fda0 	bl	8007e9e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800935e:	f000 f98b 	bl	8009678 <prvResetNextTaskUnblockTime>
 8009362:	e005      	b.n	8009370 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	3318      	adds	r3, #24
 8009368:	4619      	mov	r1, r3
 800936a:	480e      	ldr	r0, [pc, #56]	@ (80093a4 <xTaskRemoveFromEventList+0xc0>)
 800936c:	f7fe fd97 	bl	8007e9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009374:	4b0c      	ldr	r3, [pc, #48]	@ (80093a8 <xTaskRemoveFromEventList+0xc4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937a:	429a      	cmp	r2, r3
 800937c:	d905      	bls.n	800938a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800937e:	2301      	movs	r3, #1
 8009380:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009382:	4b0a      	ldr	r3, [pc, #40]	@ (80093ac <xTaskRemoveFromEventList+0xc8>)
 8009384:	2201      	movs	r2, #1
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	e001      	b.n	800938e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800938e:	697b      	ldr	r3, [r7, #20]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	20001004 	.word	0x20001004
 800939c:	20000fe4 	.word	0x20000fe4
 80093a0:	20000b0c 	.word	0x20000b0c
 80093a4:	20000f9c 	.word	0x20000f9c
 80093a8:	20000b08 	.word	0x20000b08
 80093ac:	20000ff0 	.word	0x20000ff0

080093b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093b8:	4b06      	ldr	r3, [pc, #24]	@ (80093d4 <vTaskInternalSetTimeOutState+0x24>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093c0:	4b05      	ldr	r3, [pc, #20]	@ (80093d8 <vTaskInternalSetTimeOutState+0x28>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	605a      	str	r2, [r3, #4]
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	20000ff4 	.word	0x20000ff4
 80093d8:	20000fe0 	.word	0x20000fe0

080093dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b088      	sub	sp, #32
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10b      	bne.n	8009404 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	613b      	str	r3, [r7, #16]
}
 80093fe:	bf00      	nop
 8009400:	bf00      	nop
 8009402:	e7fd      	b.n	8009400 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10b      	bne.n	8009422 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	60fb      	str	r3, [r7, #12]
}
 800941c:	bf00      	nop
 800941e:	bf00      	nop
 8009420:	e7fd      	b.n	800941e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009422:	f000 feb9 	bl	800a198 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009426:	4b1d      	ldr	r3, [pc, #116]	@ (800949c <xTaskCheckForTimeOut+0xc0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943e:	d102      	bne.n	8009446 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009440:	2300      	movs	r3, #0
 8009442:	61fb      	str	r3, [r7, #28]
 8009444:	e023      	b.n	800948e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	4b15      	ldr	r3, [pc, #84]	@ (80094a0 <xTaskCheckForTimeOut+0xc4>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d007      	beq.n	8009462 <xTaskCheckForTimeOut+0x86>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	429a      	cmp	r2, r3
 800945a:	d302      	bcc.n	8009462 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800945c:	2301      	movs	r3, #1
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e015      	b.n	800948e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	429a      	cmp	r2, r3
 800946a:	d20b      	bcs.n	8009484 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	1ad2      	subs	r2, r2, r3
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff ff99 	bl	80093b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800947e:	2300      	movs	r3, #0
 8009480:	61fb      	str	r3, [r7, #28]
 8009482:	e004      	b.n	800948e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800948a:	2301      	movs	r3, #1
 800948c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800948e:	f000 feb5 	bl	800a1fc <vPortExitCritical>

	return xReturn;
 8009492:	69fb      	ldr	r3, [r7, #28]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3720      	adds	r7, #32
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20000fe0 	.word	0x20000fe0
 80094a0:	20000ff4 	.word	0x20000ff4

080094a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094a8:	4b03      	ldr	r3, [pc, #12]	@ (80094b8 <vTaskMissedYield+0x14>)
 80094aa:	2201      	movs	r2, #1
 80094ac:	601a      	str	r2, [r3, #0]
}
 80094ae:	bf00      	nop
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	20000ff0 	.word	0x20000ff0

080094bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094c4:	f000 f87a 	bl	80095bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094c8:	4b18      	ldr	r3, [pc, #96]	@ (800952c <prvIdleTask+0x70>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d907      	bls.n	80094e0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80094d0:	4b17      	ldr	r3, [pc, #92]	@ (8009530 <prvIdleTask+0x74>)
 80094d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80094e0:	f7ff fcb0 	bl	8008e44 <prvGetExpectedIdleTime>
 80094e4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d9eb      	bls.n	80094c4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80094ec:	f7ff fc9c 	bl	8008e28 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80094f0:	4b10      	ldr	r3, [pc, #64]	@ (8009534 <prvIdleTask+0x78>)
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	4b10      	ldr	r3, [pc, #64]	@ (8009538 <prvIdleTask+0x7c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d20b      	bcs.n	8009514 <prvIdleTask+0x58>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	60bb      	str	r3, [r7, #8]
}
 800950e:	bf00      	nop
 8009510:	bf00      	nop
 8009512:	e7fd      	b.n	8009510 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8009514:	f7ff fc96 	bl	8008e44 <prvGetExpectedIdleTime>
 8009518:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d902      	bls.n	8009526 <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f7f8 fa63 	bl	80019ec <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8009526:	f7ff fcc5 	bl	8008eb4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800952a:	e7cb      	b.n	80094c4 <prvIdleTask+0x8>
 800952c:	20000b0c 	.word	0x20000b0c
 8009530:	e000ed04 	.word	0xe000ed04
 8009534:	20000ffc 	.word	0x20000ffc
 8009538:	20000fe0 	.word	0x20000fe0

0800953c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009542:	2300      	movs	r3, #0
 8009544:	607b      	str	r3, [r7, #4]
 8009546:	e00c      	b.n	8009562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	4613      	mov	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4a12      	ldr	r2, [pc, #72]	@ (800959c <prvInitialiseTaskLists+0x60>)
 8009554:	4413      	add	r3, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fc74 	bl	8007e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	3301      	adds	r3, #1
 8009560:	607b      	str	r3, [r7, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b37      	cmp	r3, #55	@ 0x37
 8009566:	d9ef      	bls.n	8009548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009568:	480d      	ldr	r0, [pc, #52]	@ (80095a0 <prvInitialiseTaskLists+0x64>)
 800956a:	f7fe fc6b 	bl	8007e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800956e:	480d      	ldr	r0, [pc, #52]	@ (80095a4 <prvInitialiseTaskLists+0x68>)
 8009570:	f7fe fc68 	bl	8007e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009574:	480c      	ldr	r0, [pc, #48]	@ (80095a8 <prvInitialiseTaskLists+0x6c>)
 8009576:	f7fe fc65 	bl	8007e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800957a:	480c      	ldr	r0, [pc, #48]	@ (80095ac <prvInitialiseTaskLists+0x70>)
 800957c:	f7fe fc62 	bl	8007e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009580:	480b      	ldr	r0, [pc, #44]	@ (80095b0 <prvInitialiseTaskLists+0x74>)
 8009582:	f7fe fc5f 	bl	8007e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009586:	4b0b      	ldr	r3, [pc, #44]	@ (80095b4 <prvInitialiseTaskLists+0x78>)
 8009588:	4a05      	ldr	r2, [pc, #20]	@ (80095a0 <prvInitialiseTaskLists+0x64>)
 800958a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800958c:	4b0a      	ldr	r3, [pc, #40]	@ (80095b8 <prvInitialiseTaskLists+0x7c>)
 800958e:	4a05      	ldr	r2, [pc, #20]	@ (80095a4 <prvInitialiseTaskLists+0x68>)
 8009590:	601a      	str	r2, [r3, #0]
}
 8009592:	bf00      	nop
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	20000b0c 	.word	0x20000b0c
 80095a0:	20000f6c 	.word	0x20000f6c
 80095a4:	20000f80 	.word	0x20000f80
 80095a8:	20000f9c 	.word	0x20000f9c
 80095ac:	20000fb0 	.word	0x20000fb0
 80095b0:	20000fc8 	.word	0x20000fc8
 80095b4:	20000f94 	.word	0x20000f94
 80095b8:	20000f98 	.word	0x20000f98

080095bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095c2:	e019      	b.n	80095f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095c4:	f000 fde8 	bl	800a198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c8:	4b10      	ldr	r3, [pc, #64]	@ (800960c <prvCheckTasksWaitingTermination+0x50>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3304      	adds	r3, #4
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fcbf 	bl	8007f58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095da:	4b0d      	ldr	r3, [pc, #52]	@ (8009610 <prvCheckTasksWaitingTermination+0x54>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3b01      	subs	r3, #1
 80095e0:	4a0b      	ldr	r2, [pc, #44]	@ (8009610 <prvCheckTasksWaitingTermination+0x54>)
 80095e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009614 <prvCheckTasksWaitingTermination+0x58>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009614 <prvCheckTasksWaitingTermination+0x58>)
 80095ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095ee:	f000 fe05 	bl	800a1fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f810 	bl	8009618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095f8:	4b06      	ldr	r3, [pc, #24]	@ (8009614 <prvCheckTasksWaitingTermination+0x58>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e1      	bne.n	80095c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20000fb0 	.word	0x20000fb0
 8009610:	20000fdc 	.word	0x20000fdc
 8009614:	20000fc4 	.word	0x20000fc4

08009618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009626:	2b00      	cmp	r3, #0
 8009628:	d108      	bne.n	800963c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800962e:	4618      	mov	r0, r3
 8009630:	f000 ffa2 	bl	800a578 <vPortFree>
				vPortFree( pxTCB );
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 ff9f 	bl	800a578 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800963a:	e019      	b.n	8009670 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009642:	2b01      	cmp	r3, #1
 8009644:	d103      	bne.n	800964e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 ff96 	bl	800a578 <vPortFree>
	}
 800964c:	e010      	b.n	8009670 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009654:	2b02      	cmp	r3, #2
 8009656:	d00b      	beq.n	8009670 <prvDeleteTCB+0x58>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	60fb      	str	r3, [r7, #12]
}
 800966a:	bf00      	nop
 800966c:	bf00      	nop
 800966e:	e7fd      	b.n	800966c <prvDeleteTCB+0x54>
	}
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800967e:	4b0c      	ldr	r3, [pc, #48]	@ (80096b0 <prvResetNextTaskUnblockTime+0x38>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009688:	4b0a      	ldr	r3, [pc, #40]	@ (80096b4 <prvResetNextTaskUnblockTime+0x3c>)
 800968a:	f04f 32ff 	mov.w	r2, #4294967295
 800968e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009690:	e008      	b.n	80096a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009692:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <prvResetNextTaskUnblockTime+0x38>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	4a04      	ldr	r2, [pc, #16]	@ (80096b4 <prvResetNextTaskUnblockTime+0x3c>)
 80096a2:	6013      	str	r3, [r2, #0]
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	20000f94 	.word	0x20000f94
 80096b4:	20000ffc 	.word	0x20000ffc

080096b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096be:	4b0b      	ldr	r3, [pc, #44]	@ (80096ec <xTaskGetSchedulerState+0x34>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d102      	bne.n	80096cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096c6:	2301      	movs	r3, #1
 80096c8:	607b      	str	r3, [r7, #4]
 80096ca:	e008      	b.n	80096de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096cc:	4b08      	ldr	r3, [pc, #32]	@ (80096f0 <xTaskGetSchedulerState+0x38>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d102      	bne.n	80096da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096d4:	2302      	movs	r3, #2
 80096d6:	607b      	str	r3, [r7, #4]
 80096d8:	e001      	b.n	80096de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096da:	2300      	movs	r3, #0
 80096dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096de:	687b      	ldr	r3, [r7, #4]
	}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	20000fe8 	.word	0x20000fe8
 80096f0:	20001004 	.word	0x20001004

080096f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d058      	beq.n	80097bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800970a:	4b2f      	ldr	r3, [pc, #188]	@ (80097c8 <xTaskPriorityDisinherit+0xd4>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	429a      	cmp	r2, r3
 8009712:	d00b      	beq.n	800972c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	60fb      	str	r3, [r7, #12]
}
 8009726:	bf00      	nop
 8009728:	bf00      	nop
 800972a:	e7fd      	b.n	8009728 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10b      	bne.n	800974c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	60bb      	str	r3, [r7, #8]
}
 8009746:	bf00      	nop
 8009748:	bf00      	nop
 800974a:	e7fd      	b.n	8009748 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009750:	1e5a      	subs	r2, r3, #1
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800975e:	429a      	cmp	r2, r3
 8009760:	d02c      	beq.n	80097bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009766:	2b00      	cmp	r3, #0
 8009768:	d128      	bne.n	80097bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3304      	adds	r3, #4
 800976e:	4618      	mov	r0, r3
 8009770:	f7fe fbf2 	bl	8007f58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009780:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978c:	4b0f      	ldr	r3, [pc, #60]	@ (80097cc <xTaskPriorityDisinherit+0xd8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	429a      	cmp	r2, r3
 8009792:	d903      	bls.n	800979c <xTaskPriorityDisinherit+0xa8>
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009798:	4a0c      	ldr	r2, [pc, #48]	@ (80097cc <xTaskPriorityDisinherit+0xd8>)
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a0:	4613      	mov	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4a09      	ldr	r2, [pc, #36]	@ (80097d0 <xTaskPriorityDisinherit+0xdc>)
 80097aa:	441a      	add	r2, r3
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	3304      	adds	r3, #4
 80097b0:	4619      	mov	r1, r3
 80097b2:	4610      	mov	r0, r2
 80097b4:	f7fe fb73 	bl	8007e9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097bc:	697b      	ldr	r3, [r7, #20]
	}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20000b08 	.word	0x20000b08
 80097cc:	20000fe4 	.word	0x20000fe4
 80097d0:	20000b0c 	.word	0x20000b0c

080097d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097de:	4b21      	ldr	r3, [pc, #132]	@ (8009864 <prvAddCurrentTaskToDelayedList+0x90>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097e4:	4b20      	ldr	r3, [pc, #128]	@ (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3304      	adds	r3, #4
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fe fbb4 	bl	8007f58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f6:	d10a      	bne.n	800980e <prvAddCurrentTaskToDelayedList+0x3a>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d007      	beq.n	800980e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3304      	adds	r3, #4
 8009804:	4619      	mov	r1, r3
 8009806:	4819      	ldr	r0, [pc, #100]	@ (800986c <prvAddCurrentTaskToDelayedList+0x98>)
 8009808:	f7fe fb49 	bl	8007e9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800980c:	e026      	b.n	800985c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4413      	add	r3, r2
 8009814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009816:	4b14      	ldr	r3, [pc, #80]	@ (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	429a      	cmp	r2, r3
 8009824:	d209      	bcs.n	800983a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009826:	4b12      	ldr	r3, [pc, #72]	@ (8009870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	4b0f      	ldr	r3, [pc, #60]	@ (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3304      	adds	r3, #4
 8009830:	4619      	mov	r1, r3
 8009832:	4610      	mov	r0, r2
 8009834:	f7fe fb57 	bl	8007ee6 <vListInsert>
}
 8009838:	e010      	b.n	800985c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800983a:	4b0e      	ldr	r3, [pc, #56]	@ (8009874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b0a      	ldr	r3, [pc, #40]	@ (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3304      	adds	r3, #4
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f7fe fb4d 	bl	8007ee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800984c:	4b0a      	ldr	r3, [pc, #40]	@ (8009878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	429a      	cmp	r2, r3
 8009854:	d202      	bcs.n	800985c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009856:	4a08      	ldr	r2, [pc, #32]	@ (8009878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6013      	str	r3, [r2, #0]
}
 800985c:	bf00      	nop
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20000fe0 	.word	0x20000fe0
 8009868:	20000b08 	.word	0x20000b08
 800986c:	20000fc8 	.word	0x20000fc8
 8009870:	20000f98 	.word	0x20000f98
 8009874:	20000f94 	.word	0x20000f94
 8009878:	20000ffc 	.word	0x20000ffc

0800987c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08a      	sub	sp, #40	@ 0x28
 8009880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009886:	f000 fb13 	bl	8009eb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800988a:	4b1d      	ldr	r3, [pc, #116]	@ (8009900 <xTimerCreateTimerTask+0x84>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d021      	beq.n	80098d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800989a:	1d3a      	adds	r2, r7, #4
 800989c:	f107 0108 	add.w	r1, r7, #8
 80098a0:	f107 030c 	add.w	r3, r7, #12
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fab3 	bl	8007e10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	9202      	str	r2, [sp, #8]
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	2302      	movs	r3, #2
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	2300      	movs	r3, #0
 80098ba:	460a      	mov	r2, r1
 80098bc:	4911      	ldr	r1, [pc, #68]	@ (8009904 <xTimerCreateTimerTask+0x88>)
 80098be:	4812      	ldr	r0, [pc, #72]	@ (8009908 <xTimerCreateTimerTask+0x8c>)
 80098c0:	f7ff f86e 	bl	80089a0 <xTaskCreateStatic>
 80098c4:	4603      	mov	r3, r0
 80098c6:	4a11      	ldr	r2, [pc, #68]	@ (800990c <xTimerCreateTimerTask+0x90>)
 80098c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098ca:	4b10      	ldr	r3, [pc, #64]	@ (800990c <xTimerCreateTimerTask+0x90>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098d2:	2301      	movs	r3, #1
 80098d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10b      	bne.n	80098f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	613b      	str	r3, [r7, #16]
}
 80098ee:	bf00      	nop
 80098f0:	bf00      	nop
 80098f2:	e7fd      	b.n	80098f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098f4:	697b      	ldr	r3, [r7, #20]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20001038 	.word	0x20001038
 8009904:	0800d8f0 	.word	0x0800d8f0
 8009908:	08009a49 	.word	0x08009a49
 800990c:	2000103c 	.word	0x2000103c

08009910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b08a      	sub	sp, #40	@ 0x28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800991e:	2300      	movs	r3, #0
 8009920:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10b      	bne.n	8009940 <xTimerGenericCommand+0x30>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	623b      	str	r3, [r7, #32]
}
 800993a:	bf00      	nop
 800993c:	bf00      	nop
 800993e:	e7fd      	b.n	800993c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009940:	4b19      	ldr	r3, [pc, #100]	@ (80099a8 <xTimerGenericCommand+0x98>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d02a      	beq.n	800999e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b05      	cmp	r3, #5
 8009958:	dc18      	bgt.n	800998c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800995a:	f7ff fead 	bl	80096b8 <xTaskGetSchedulerState>
 800995e:	4603      	mov	r3, r0
 8009960:	2b02      	cmp	r3, #2
 8009962:	d109      	bne.n	8009978 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009964:	4b10      	ldr	r3, [pc, #64]	@ (80099a8 <xTimerGenericCommand+0x98>)
 8009966:	6818      	ldr	r0, [r3, #0]
 8009968:	f107 0110 	add.w	r1, r7, #16
 800996c:	2300      	movs	r3, #0
 800996e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009970:	f7fe fc26 	bl	80081c0 <xQueueGenericSend>
 8009974:	6278      	str	r0, [r7, #36]	@ 0x24
 8009976:	e012      	b.n	800999e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009978:	4b0b      	ldr	r3, [pc, #44]	@ (80099a8 <xTimerGenericCommand+0x98>)
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	f107 0110 	add.w	r1, r7, #16
 8009980:	2300      	movs	r3, #0
 8009982:	2200      	movs	r2, #0
 8009984:	f7fe fc1c 	bl	80081c0 <xQueueGenericSend>
 8009988:	6278      	str	r0, [r7, #36]	@ 0x24
 800998a:	e008      	b.n	800999e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800998c:	4b06      	ldr	r3, [pc, #24]	@ (80099a8 <xTimerGenericCommand+0x98>)
 800998e:	6818      	ldr	r0, [r3, #0]
 8009990:	f107 0110 	add.w	r1, r7, #16
 8009994:	2300      	movs	r3, #0
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	f7fe fd14 	bl	80083c4 <xQueueGenericSendFromISR>
 800999c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800999e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3728      	adds	r7, #40	@ 0x28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20001038 	.word	0x20001038

080099ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b6:	4b23      	ldr	r3, [pc, #140]	@ (8009a44 <prvProcessExpiredTimer+0x98>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fe fac7 	bl	8007f58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099d0:	f003 0304 	and.w	r3, r3, #4
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d023      	beq.n	8009a20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	699a      	ldr	r2, [r3, #24]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	18d1      	adds	r1, r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	6978      	ldr	r0, [r7, #20]
 80099e6:	f000 f8d5 	bl	8009b94 <prvInsertTimerInActiveList>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d020      	beq.n	8009a32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099f0:	2300      	movs	r3, #0
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	2300      	movs	r3, #0
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	2100      	movs	r1, #0
 80099fa:	6978      	ldr	r0, [r7, #20]
 80099fc:	f7ff ff88 	bl	8009910 <xTimerGenericCommand>
 8009a00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d114      	bne.n	8009a32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	60fb      	str	r3, [r7, #12]
}
 8009a1a:	bf00      	nop
 8009a1c:	bf00      	nop
 8009a1e:	e7fd      	b.n	8009a1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a26:	f023 0301 	bic.w	r3, r3, #1
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	6a1b      	ldr	r3, [r3, #32]
 8009a36:	6978      	ldr	r0, [r7, #20]
 8009a38:	4798      	blx	r3
}
 8009a3a:	bf00      	nop
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20001030 	.word	0x20001030

08009a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a50:	f107 0308 	add.w	r3, r7, #8
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 f859 	bl	8009b0c <prvGetNextExpireTime>
 8009a5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f805 	bl	8009a70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a66:	f000 f8d7 	bl	8009c18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a6a:	bf00      	nop
 8009a6c:	e7f0      	b.n	8009a50 <prvTimerTask+0x8>
	...

08009a70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a7a:	f7ff f9d5 	bl	8008e28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a7e:	f107 0308 	add.w	r3, r7, #8
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 f866 	bl	8009b54 <prvSampleTimeNow>
 8009a88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d130      	bne.n	8009af2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10a      	bne.n	8009aac <prvProcessTimerOrBlockTask+0x3c>
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d806      	bhi.n	8009aac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a9e:	f7ff fa09 	bl	8008eb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009aa2:	68f9      	ldr	r1, [r7, #12]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff ff81 	bl	80099ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009aaa:	e024      	b.n	8009af6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d008      	beq.n	8009ac4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ab2:	4b13      	ldr	r3, [pc, #76]	@ (8009b00 <prvProcessTimerOrBlockTask+0x90>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <prvProcessTimerOrBlockTask+0x50>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e000      	b.n	8009ac2 <prvProcessTimerOrBlockTask+0x52>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8009b04 <prvProcessTimerOrBlockTask+0x94>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	f7fe ff31 	bl	8008938 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ad6:	f7ff f9ed 	bl	8008eb4 <xTaskResumeAll>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10a      	bne.n	8009af6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ae0:	4b09      	ldr	r3, [pc, #36]	@ (8009b08 <prvProcessTimerOrBlockTask+0x98>)
 8009ae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	f3bf 8f6f 	isb	sy
}
 8009af0:	e001      	b.n	8009af6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009af2:	f7ff f9df 	bl	8008eb4 <xTaskResumeAll>
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20001034 	.word	0x20001034
 8009b04:	20001038 	.word	0x20001038
 8009b08:	e000ed04 	.word	0xe000ed04

08009b0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b14:	4b0e      	ldr	r3, [pc, #56]	@ (8009b50 <prvGetNextExpireTime+0x44>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <prvGetNextExpireTime+0x16>
 8009b1e:	2201      	movs	r2, #1
 8009b20:	e000      	b.n	8009b24 <prvGetNextExpireTime+0x18>
 8009b22:	2200      	movs	r2, #0
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d105      	bne.n	8009b3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b30:	4b07      	ldr	r3, [pc, #28]	@ (8009b50 <prvGetNextExpireTime+0x44>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	e001      	b.n	8009b40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b40:	68fb      	ldr	r3, [r7, #12]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	20001030 	.word	0x20001030

08009b54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b5c:	f7ff fa48 	bl	8008ff0 <xTaskGetTickCount>
 8009b60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b62:	4b0b      	ldr	r3, [pc, #44]	@ (8009b90 <prvSampleTimeNow+0x3c>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d205      	bcs.n	8009b78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b6c:	f000 f93a 	bl	8009de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	e002      	b.n	8009b7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b7e:	4a04      	ldr	r2, [pc, #16]	@ (8009b90 <prvSampleTimeNow+0x3c>)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b84:	68fb      	ldr	r3, [r7, #12]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	20001040 	.word	0x20001040

08009b94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d812      	bhi.n	8009be0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	1ad2      	subs	r2, r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d302      	bcc.n	8009bce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	e01b      	b.n	8009c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bce:	4b10      	ldr	r3, [pc, #64]	@ (8009c10 <prvInsertTimerInActiveList+0x7c>)
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fe f984 	bl	8007ee6 <vListInsert>
 8009bde:	e012      	b.n	8009c06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d206      	bcs.n	8009bf6 <prvInsertTimerInActiveList+0x62>
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d302      	bcc.n	8009bf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	e007      	b.n	8009c06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bf6:	4b07      	ldr	r3, [pc, #28]	@ (8009c14 <prvInsertTimerInActiveList+0x80>)
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	f7fe f970 	bl	8007ee6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c06:	697b      	ldr	r3, [r7, #20]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20001034 	.word	0x20001034
 8009c14:	20001030 	.word	0x20001030

08009c18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08e      	sub	sp, #56	@ 0x38
 8009c1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c1e:	e0ce      	b.n	8009dbe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da19      	bge.n	8009c5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c26:	1d3b      	adds	r3, r7, #4
 8009c28:	3304      	adds	r3, #4
 8009c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10b      	bne.n	8009c4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	61fb      	str	r3, [r7, #28]
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop
 8009c48:	e7fd      	b.n	8009c46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c50:	6850      	ldr	r0, [r2, #4]
 8009c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c54:	6892      	ldr	r2, [r2, #8]
 8009c56:	4611      	mov	r1, r2
 8009c58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f2c0 80ae 	blt.w	8009dbe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c68:	695b      	ldr	r3, [r3, #20]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c70:	3304      	adds	r3, #4
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe f970 	bl	8007f58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c78:	463b      	mov	r3, r7
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff ff6a 	bl	8009b54 <prvSampleTimeNow>
 8009c80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b09      	cmp	r3, #9
 8009c86:	f200 8097 	bhi.w	8009db8 <prvProcessReceivedCommands+0x1a0>
 8009c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c90 <prvProcessReceivedCommands+0x78>)
 8009c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cb9 	.word	0x08009cb9
 8009c98:	08009cb9 	.word	0x08009cb9
 8009c9c:	08009d2f 	.word	0x08009d2f
 8009ca0:	08009d43 	.word	0x08009d43
 8009ca4:	08009d8f 	.word	0x08009d8f
 8009ca8:	08009cb9 	.word	0x08009cb9
 8009cac:	08009cb9 	.word	0x08009cb9
 8009cb0:	08009d2f 	.word	0x08009d2f
 8009cb4:	08009d43 	.word	0x08009d43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cbe:	f043 0301 	orr.w	r3, r3, #1
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	18d1      	adds	r1, r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cd8:	f7ff ff5c 	bl	8009b94 <prvInsertTimerInActiveList>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d06c      	beq.n	8009dbc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ce8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d061      	beq.n	8009dbc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	441a      	add	r2, r3
 8009d00:	2300      	movs	r3, #0
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	2300      	movs	r3, #0
 8009d06:	2100      	movs	r1, #0
 8009d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d0a:	f7ff fe01 	bl	8009910 <xTimerGenericCommand>
 8009d0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d152      	bne.n	8009dbc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	61bb      	str	r3, [r7, #24]
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	e7fd      	b.n	8009d2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d34:	f023 0301 	bic.w	r3, r3, #1
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d40:	e03d      	b.n	8009dbe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d48:	f043 0301 	orr.w	r3, r3, #1
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10b      	bne.n	8009d7a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	617b      	str	r3, [r7, #20]
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	e7fd      	b.n	8009d76 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7c:	699a      	ldr	r2, [r3, #24]
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d80:	18d1      	adds	r1, r2, r3
 8009d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d88:	f7ff ff04 	bl	8009b94 <prvInsertTimerInActiveList>
					break;
 8009d8c:	e017      	b.n	8009dbe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d94:	f003 0302 	and.w	r3, r3, #2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d103      	bne.n	8009da4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d9e:	f000 fbeb 	bl	800a578 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009da2:	e00c      	b.n	8009dbe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009daa:	f023 0301 	bic.w	r3, r3, #1
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009db6:	e002      	b.n	8009dbe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009db8:	bf00      	nop
 8009dba:	e000      	b.n	8009dbe <prvProcessReceivedCommands+0x1a6>
					break;
 8009dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dbe:	4b08      	ldr	r3, [pc, #32]	@ (8009de0 <prvProcessReceivedCommands+0x1c8>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	1d39      	adds	r1, r7, #4
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fe fb9a 	bl	8008500 <xQueueReceive>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f47f af26 	bne.w	8009c20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	3730      	adds	r7, #48	@ 0x30
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	20001038 	.word	0x20001038

08009de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dea:	e049      	b.n	8009e80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dec:	4b2e      	ldr	r3, [pc, #184]	@ (8009ea8 <prvSwitchTimerLists+0xc4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df6:	4b2c      	ldr	r3, [pc, #176]	@ (8009ea8 <prvSwitchTimerLists+0xc4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe f8a7 	bl	8007f58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d02f      	beq.n	8009e80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	4413      	add	r3, r2
 8009e28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d90e      	bls.n	8009e50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea8 <prvSwitchTimerLists+0xc4>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4619      	mov	r1, r3
 8009e48:	4610      	mov	r0, r2
 8009e4a:	f7fe f84c 	bl	8007ee6 <vListInsert>
 8009e4e:	e017      	b.n	8009e80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e50:	2300      	movs	r3, #0
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2300      	movs	r3, #0
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	2100      	movs	r1, #0
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff fd58 	bl	8009910 <xTimerGenericCommand>
 8009e60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10b      	bne.n	8009e80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	603b      	str	r3, [r7, #0]
}
 8009e7a:	bf00      	nop
 8009e7c:	bf00      	nop
 8009e7e:	e7fd      	b.n	8009e7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e80:	4b09      	ldr	r3, [pc, #36]	@ (8009ea8 <prvSwitchTimerLists+0xc4>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1b0      	bne.n	8009dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ea8 <prvSwitchTimerLists+0xc4>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e90:	4b06      	ldr	r3, [pc, #24]	@ (8009eac <prvSwitchTimerLists+0xc8>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a04      	ldr	r2, [pc, #16]	@ (8009ea8 <prvSwitchTimerLists+0xc4>)
 8009e96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e98:	4a04      	ldr	r2, [pc, #16]	@ (8009eac <prvSwitchTimerLists+0xc8>)
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	6013      	str	r3, [r2, #0]
}
 8009e9e:	bf00      	nop
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20001030 	.word	0x20001030
 8009eac:	20001034 	.word	0x20001034

08009eb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009eb6:	f000 f96f 	bl	800a198 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009eba:	4b15      	ldr	r3, [pc, #84]	@ (8009f10 <prvCheckForValidListAndQueue+0x60>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d120      	bne.n	8009f04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ec2:	4814      	ldr	r0, [pc, #80]	@ (8009f14 <prvCheckForValidListAndQueue+0x64>)
 8009ec4:	f7fd ffbe 	bl	8007e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ec8:	4813      	ldr	r0, [pc, #76]	@ (8009f18 <prvCheckForValidListAndQueue+0x68>)
 8009eca:	f7fd ffbb 	bl	8007e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ece:	4b13      	ldr	r3, [pc, #76]	@ (8009f1c <prvCheckForValidListAndQueue+0x6c>)
 8009ed0:	4a10      	ldr	r2, [pc, #64]	@ (8009f14 <prvCheckForValidListAndQueue+0x64>)
 8009ed2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ed4:	4b12      	ldr	r3, [pc, #72]	@ (8009f20 <prvCheckForValidListAndQueue+0x70>)
 8009ed6:	4a10      	ldr	r2, [pc, #64]	@ (8009f18 <prvCheckForValidListAndQueue+0x68>)
 8009ed8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009eda:	2300      	movs	r3, #0
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	4b11      	ldr	r3, [pc, #68]	@ (8009f24 <prvCheckForValidListAndQueue+0x74>)
 8009ee0:	4a11      	ldr	r2, [pc, #68]	@ (8009f28 <prvCheckForValidListAndQueue+0x78>)
 8009ee2:	2110      	movs	r1, #16
 8009ee4:	200a      	movs	r0, #10
 8009ee6:	f7fe f8cb 	bl	8008080 <xQueueGenericCreateStatic>
 8009eea:	4603      	mov	r3, r0
 8009eec:	4a08      	ldr	r2, [pc, #32]	@ (8009f10 <prvCheckForValidListAndQueue+0x60>)
 8009eee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ef0:	4b07      	ldr	r3, [pc, #28]	@ (8009f10 <prvCheckForValidListAndQueue+0x60>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d005      	beq.n	8009f04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ef8:	4b05      	ldr	r3, [pc, #20]	@ (8009f10 <prvCheckForValidListAndQueue+0x60>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	490b      	ldr	r1, [pc, #44]	@ (8009f2c <prvCheckForValidListAndQueue+0x7c>)
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe fcf0 	bl	80088e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f04:	f000 f97a 	bl	800a1fc <vPortExitCritical>
}
 8009f08:	bf00      	nop
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20001038 	.word	0x20001038
 8009f14:	20001008 	.word	0x20001008
 8009f18:	2000101c 	.word	0x2000101c
 8009f1c:	20001030 	.word	0x20001030
 8009f20:	20001034 	.word	0x20001034
 8009f24:	200010e4 	.word	0x200010e4
 8009f28:	20001044 	.word	0x20001044
 8009f2c:	0800d8f8 	.word	0x0800d8f8

08009f30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	3b04      	subs	r3, #4
 8009f40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3b04      	subs	r3, #4
 8009f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	f023 0201 	bic.w	r2, r3, #1
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3b04      	subs	r3, #4
 8009f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f60:	4a0c      	ldr	r2, [pc, #48]	@ (8009f94 <pxPortInitialiseStack+0x64>)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3b14      	subs	r3, #20
 8009f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3b04      	subs	r3, #4
 8009f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f06f 0202 	mvn.w	r2, #2
 8009f7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3b20      	subs	r3, #32
 8009f84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f86:	68fb      	ldr	r3, [r7, #12]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	08009f99 	.word	0x08009f99

08009f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fa2:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <prvTaskExitError+0x58>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009faa:	d00b      	beq.n	8009fc4 <prvTaskExitError+0x2c>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	60fb      	str	r3, [r7, #12]
}
 8009fbe:	bf00      	nop
 8009fc0:	bf00      	nop
 8009fc2:	e7fd      	b.n	8009fc0 <prvTaskExitError+0x28>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	60bb      	str	r3, [r7, #8]
}
 8009fd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fd8:	bf00      	nop
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0fc      	beq.n	8009fda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20000028 	.word	0x20000028
	...

0800a000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a000:	4b07      	ldr	r3, [pc, #28]	@ (800a020 <pxCurrentTCBConst2>)
 800a002:	6819      	ldr	r1, [r3, #0]
 800a004:	6808      	ldr	r0, [r1, #0]
 800a006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00a:	f380 8809 	msr	PSP, r0
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f04f 0000 	mov.w	r0, #0
 800a016:	f380 8811 	msr	BASEPRI, r0
 800a01a:	4770      	bx	lr
 800a01c:	f3af 8000 	nop.w

0800a020 <pxCurrentTCBConst2>:
 800a020:	20000b08 	.word	0x20000b08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop

0800a028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a028:	4808      	ldr	r0, [pc, #32]	@ (800a04c <prvPortStartFirstTask+0x24>)
 800a02a:	6800      	ldr	r0, [r0, #0]
 800a02c:	6800      	ldr	r0, [r0, #0]
 800a02e:	f380 8808 	msr	MSP, r0
 800a032:	f04f 0000 	mov.w	r0, #0
 800a036:	f380 8814 	msr	CONTROL, r0
 800a03a:	b662      	cpsie	i
 800a03c:	b661      	cpsie	f
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	df00      	svc	0
 800a048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a04a:	bf00      	nop
 800a04c:	e000ed08 	.word	0xe000ed08

0800a050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a056:	4b47      	ldr	r3, [pc, #284]	@ (800a174 <xPortStartScheduler+0x124>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a47      	ldr	r2, [pc, #284]	@ (800a178 <xPortStartScheduler+0x128>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d10b      	bne.n	800a078 <xPortStartScheduler+0x28>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	60fb      	str	r3, [r7, #12]
}
 800a072:	bf00      	nop
 800a074:	bf00      	nop
 800a076:	e7fd      	b.n	800a074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a078:	4b3e      	ldr	r3, [pc, #248]	@ (800a174 <xPortStartScheduler+0x124>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a3f      	ldr	r2, [pc, #252]	@ (800a17c <xPortStartScheduler+0x12c>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d10b      	bne.n	800a09a <xPortStartScheduler+0x4a>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	613b      	str	r3, [r7, #16]
}
 800a094:	bf00      	nop
 800a096:	bf00      	nop
 800a098:	e7fd      	b.n	800a096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a09a:	4b39      	ldr	r3, [pc, #228]	@ (800a180 <xPortStartScheduler+0x130>)
 800a09c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	22ff      	movs	r2, #255	@ 0xff
 800a0aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	4b31      	ldr	r3, [pc, #196]	@ (800a184 <xPortStartScheduler+0x134>)
 800a0c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0c2:	4b31      	ldr	r3, [pc, #196]	@ (800a188 <xPortStartScheduler+0x138>)
 800a0c4:	2207      	movs	r2, #7
 800a0c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0c8:	e009      	b.n	800a0de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a0ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a188 <xPortStartScheduler+0x138>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	4a2d      	ldr	r2, [pc, #180]	@ (800a188 <xPortStartScheduler+0x138>)
 800a0d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0de:	78fb      	ldrb	r3, [r7, #3]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0e6:	2b80      	cmp	r3, #128	@ 0x80
 800a0e8:	d0ef      	beq.n	800a0ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0ea:	4b27      	ldr	r3, [pc, #156]	@ (800a188 <xPortStartScheduler+0x138>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f1c3 0307 	rsb	r3, r3, #7
 800a0f2:	2b04      	cmp	r3, #4
 800a0f4:	d00b      	beq.n	800a10e <xPortStartScheduler+0xbe>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	60bb      	str	r3, [r7, #8]
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	e7fd      	b.n	800a10a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a10e:	4b1e      	ldr	r3, [pc, #120]	@ (800a188 <xPortStartScheduler+0x138>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	021b      	lsls	r3, r3, #8
 800a114:	4a1c      	ldr	r2, [pc, #112]	@ (800a188 <xPortStartScheduler+0x138>)
 800a116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a118:	4b1b      	ldr	r3, [pc, #108]	@ (800a188 <xPortStartScheduler+0x138>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a120:	4a19      	ldr	r2, [pc, #100]	@ (800a188 <xPortStartScheduler+0x138>)
 800a122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	b2da      	uxtb	r2, r3
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a12c:	4b17      	ldr	r3, [pc, #92]	@ (800a18c <xPortStartScheduler+0x13c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a16      	ldr	r2, [pc, #88]	@ (800a18c <xPortStartScheduler+0x13c>)
 800a132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a138:	4b14      	ldr	r3, [pc, #80]	@ (800a18c <xPortStartScheduler+0x13c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a13      	ldr	r2, [pc, #76]	@ (800a18c <xPortStartScheduler+0x13c>)
 800a13e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a144:	f000 f8da 	bl	800a2fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a148:	4b11      	ldr	r3, [pc, #68]	@ (800a190 <xPortStartScheduler+0x140>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a14e:	f000 f8f9 	bl	800a344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a152:	4b10      	ldr	r3, [pc, #64]	@ (800a194 <xPortStartScheduler+0x144>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a0f      	ldr	r2, [pc, #60]	@ (800a194 <xPortStartScheduler+0x144>)
 800a158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a15c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a15e:	f7ff ff63 	bl	800a028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a162:	f7ff f80f 	bl	8009184 <vTaskSwitchContext>
	prvTaskExitError();
 800a166:	f7ff ff17 	bl	8009f98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3718      	adds	r7, #24
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	e000ed00 	.word	0xe000ed00
 800a178:	410fc271 	.word	0x410fc271
 800a17c:	410fc270 	.word	0x410fc270
 800a180:	e000e400 	.word	0xe000e400
 800a184:	20001134 	.word	0x20001134
 800a188:	20001138 	.word	0x20001138
 800a18c:	e000ed20 	.word	0xe000ed20
 800a190:	20000028 	.word	0x20000028
 800a194:	e000ef34 	.word	0xe000ef34

0800a198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1b2:	4b10      	ldr	r3, [pc, #64]	@ (800a1f4 <vPortEnterCritical+0x5c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	4a0e      	ldr	r2, [pc, #56]	@ (800a1f4 <vPortEnterCritical+0x5c>)
 800a1ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f4 <vPortEnterCritical+0x5c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d110      	bne.n	800a1e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a1f8 <vPortEnterCritical+0x60>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00b      	beq.n	800a1e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	603b      	str	r3, [r7, #0]
}
 800a1e0:	bf00      	nop
 800a1e2:	bf00      	nop
 800a1e4:	e7fd      	b.n	800a1e2 <vPortEnterCritical+0x4a>
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20000028 	.word	0x20000028
 800a1f8:	e000ed04 	.word	0xe000ed04

0800a1fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a202:	4b12      	ldr	r3, [pc, #72]	@ (800a24c <vPortExitCritical+0x50>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10b      	bne.n	800a222 <vPortExitCritical+0x26>
	__asm volatile
 800a20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	607b      	str	r3, [r7, #4]
}
 800a21c:	bf00      	nop
 800a21e:	bf00      	nop
 800a220:	e7fd      	b.n	800a21e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a222:	4b0a      	ldr	r3, [pc, #40]	@ (800a24c <vPortExitCritical+0x50>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	3b01      	subs	r3, #1
 800a228:	4a08      	ldr	r2, [pc, #32]	@ (800a24c <vPortExitCritical+0x50>)
 800a22a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a22c:	4b07      	ldr	r3, [pc, #28]	@ (800a24c <vPortExitCritical+0x50>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d105      	bne.n	800a240 <vPortExitCritical+0x44>
 800a234:	2300      	movs	r3, #0
 800a236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	f383 8811 	msr	BASEPRI, r3
}
 800a23e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	20000028 	.word	0x20000028

0800a250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a250:	f3ef 8009 	mrs	r0, PSP
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	4b15      	ldr	r3, [pc, #84]	@ (800a2b0 <pxCurrentTCBConst>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	f01e 0f10 	tst.w	lr, #16
 800a260:	bf08      	it	eq
 800a262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26a:	6010      	str	r0, [r2, #0]
 800a26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a274:	f380 8811 	msr	BASEPRI, r0
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f7fe ff80 	bl	8009184 <vTaskSwitchContext>
 800a284:	f04f 0000 	mov.w	r0, #0
 800a288:	f380 8811 	msr	BASEPRI, r0
 800a28c:	bc09      	pop	{r0, r3}
 800a28e:	6819      	ldr	r1, [r3, #0]
 800a290:	6808      	ldr	r0, [r1, #0]
 800a292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a296:	f01e 0f10 	tst.w	lr, #16
 800a29a:	bf08      	it	eq
 800a29c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2a0:	f380 8809 	msr	PSP, r0
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	f3af 8000 	nop.w

0800a2b0 <pxCurrentTCBConst>:
 800a2b0:	20000b08 	.word	0x20000b08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop

0800a2b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	607b      	str	r3, [r7, #4]
}
 800a2d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2d2:	f7fe fe9d 	bl	8009010 <xTaskIncrementTick>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d003      	beq.n	800a2e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2dc:	4b06      	ldr	r3, [pc, #24]	@ (800a2f8 <xPortSysTickHandler+0x40>)
 800a2de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2e2:	601a      	str	r2, [r3, #0]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	f383 8811 	msr	BASEPRI, r3
}
 800a2ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	e000ed04 	.word	0xe000ed04

0800a2fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a300:	4b0b      	ldr	r3, [pc, #44]	@ (800a330 <vPortSetupTimerInterrupt+0x34>)
 800a302:	2200      	movs	r2, #0
 800a304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a306:	4b0b      	ldr	r3, [pc, #44]	@ (800a334 <vPortSetupTimerInterrupt+0x38>)
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a30c:	4b0a      	ldr	r3, [pc, #40]	@ (800a338 <vPortSetupTimerInterrupt+0x3c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a0a      	ldr	r2, [pc, #40]	@ (800a33c <vPortSetupTimerInterrupt+0x40>)
 800a312:	fba2 2303 	umull	r2, r3, r2, r3
 800a316:	099b      	lsrs	r3, r3, #6
 800a318:	4a09      	ldr	r2, [pc, #36]	@ (800a340 <vPortSetupTimerInterrupt+0x44>)
 800a31a:	3b01      	subs	r3, #1
 800a31c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a31e:	4b04      	ldr	r3, [pc, #16]	@ (800a330 <vPortSetupTimerInterrupt+0x34>)
 800a320:	2207      	movs	r2, #7
 800a322:	601a      	str	r2, [r3, #0]
}
 800a324:	bf00      	nop
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	e000e010 	.word	0xe000e010
 800a334:	e000e018 	.word	0xe000e018
 800a338:	2000001c 	.word	0x2000001c
 800a33c:	10624dd3 	.word	0x10624dd3
 800a340:	e000e014 	.word	0xe000e014

0800a344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a354 <vPortEnableVFP+0x10>
 800a348:	6801      	ldr	r1, [r0, #0]
 800a34a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a34e:	6001      	str	r1, [r0, #0]
 800a350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a352:	bf00      	nop
 800a354:	e000ed88 	.word	0xe000ed88

0800a358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a35e:	f3ef 8305 	mrs	r3, IPSR
 800a362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b0f      	cmp	r3, #15
 800a368:	d915      	bls.n	800a396 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a36a:	4a18      	ldr	r2, [pc, #96]	@ (800a3cc <vPortValidateInterruptPriority+0x74>)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4413      	add	r3, r2
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a374:	4b16      	ldr	r3, [pc, #88]	@ (800a3d0 <vPortValidateInterruptPriority+0x78>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	7afa      	ldrb	r2, [r7, #11]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d20b      	bcs.n	800a396 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	607b      	str	r3, [r7, #4]
}
 800a390:	bf00      	nop
 800a392:	bf00      	nop
 800a394:	e7fd      	b.n	800a392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a396:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d4 <vPortValidateInterruptPriority+0x7c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a39e:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d8 <vPortValidateInterruptPriority+0x80>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d90b      	bls.n	800a3be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	603b      	str	r3, [r7, #0]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <vPortValidateInterruptPriority+0x62>
	}
 800a3be:	bf00      	nop
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	e000e3f0 	.word	0xe000e3f0
 800a3d0:	20001134 	.word	0x20001134
 800a3d4:	e000ed0c 	.word	0xe000ed0c
 800a3d8:	20001138 	.word	0x20001138

0800a3dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08a      	sub	sp, #40	@ 0x28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3e8:	f7fe fd1e 	bl	8008e28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a560 <pvPortMalloc+0x184>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3f4:	f000 f924 	bl	800a640 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3f8:	4b5a      	ldr	r3, [pc, #360]	@ (800a564 <pvPortMalloc+0x188>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4013      	ands	r3, r2
 800a400:	2b00      	cmp	r3, #0
 800a402:	f040 8095 	bne.w	800a530 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d01e      	beq.n	800a44a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a40c:	2208      	movs	r2, #8
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4413      	add	r3, r2
 800a412:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d015      	beq.n	800a44a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f023 0307 	bic.w	r3, r3, #7
 800a424:	3308      	adds	r3, #8
 800a426:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f003 0307 	and.w	r3, r3, #7
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00b      	beq.n	800a44a <pvPortMalloc+0x6e>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	617b      	str	r3, [r7, #20]
}
 800a444:	bf00      	nop
 800a446:	bf00      	nop
 800a448:	e7fd      	b.n	800a446 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d06f      	beq.n	800a530 <pvPortMalloc+0x154>
 800a450:	4b45      	ldr	r3, [pc, #276]	@ (800a568 <pvPortMalloc+0x18c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	429a      	cmp	r2, r3
 800a458:	d86a      	bhi.n	800a530 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a45a:	4b44      	ldr	r3, [pc, #272]	@ (800a56c <pvPortMalloc+0x190>)
 800a45c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a45e:	4b43      	ldr	r3, [pc, #268]	@ (800a56c <pvPortMalloc+0x190>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a464:	e004      	b.n	800a470 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a468:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	429a      	cmp	r2, r3
 800a478:	d903      	bls.n	800a482 <pvPortMalloc+0xa6>
 800a47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1f1      	bne.n	800a466 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a482:	4b37      	ldr	r3, [pc, #220]	@ (800a560 <pvPortMalloc+0x184>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a488:	429a      	cmp	r2, r3
 800a48a:	d051      	beq.n	800a530 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2208      	movs	r2, #8
 800a492:	4413      	add	r3, r2
 800a494:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	1ad2      	subs	r2, r2, r3
 800a4a6:	2308      	movs	r3, #8
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d920      	bls.n	800a4f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	f003 0307 	and.w	r3, r3, #7
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00b      	beq.n	800a4d8 <pvPortMalloc+0xfc>
	__asm volatile
 800a4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c4:	f383 8811 	msr	BASEPRI, r3
 800a4c8:	f3bf 8f6f 	isb	sy
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	613b      	str	r3, [r7, #16]
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	1ad2      	subs	r2, r2, r3
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4ea:	69b8      	ldr	r0, [r7, #24]
 800a4ec:	f000 f90a 	bl	800a704 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a568 <pvPortMalloc+0x18c>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a568 <pvPortMalloc+0x18c>)
 800a4fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a568 <pvPortMalloc+0x18c>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	4b1b      	ldr	r3, [pc, #108]	@ (800a570 <pvPortMalloc+0x194>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	429a      	cmp	r2, r3
 800a508:	d203      	bcs.n	800a512 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a50a:	4b17      	ldr	r3, [pc, #92]	@ (800a568 <pvPortMalloc+0x18c>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a18      	ldr	r2, [pc, #96]	@ (800a570 <pvPortMalloc+0x194>)
 800a510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	4b13      	ldr	r3, [pc, #76]	@ (800a564 <pvPortMalloc+0x188>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	431a      	orrs	r2, r3
 800a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a526:	4b13      	ldr	r3, [pc, #76]	@ (800a574 <pvPortMalloc+0x198>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3301      	adds	r3, #1
 800a52c:	4a11      	ldr	r2, [pc, #68]	@ (800a574 <pvPortMalloc+0x198>)
 800a52e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a530:	f7fe fcc0 	bl	8008eb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00b      	beq.n	800a556 <pvPortMalloc+0x17a>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	60fb      	str	r3, [r7, #12]
}
 800a550:	bf00      	nop
 800a552:	bf00      	nop
 800a554:	e7fd      	b.n	800a552 <pvPortMalloc+0x176>
	return pvReturn;
 800a556:	69fb      	ldr	r3, [r7, #28]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3728      	adds	r7, #40	@ 0x28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20004d44 	.word	0x20004d44
 800a564:	20004d58 	.word	0x20004d58
 800a568:	20004d48 	.word	0x20004d48
 800a56c:	20004d3c 	.word	0x20004d3c
 800a570:	20004d4c 	.word	0x20004d4c
 800a574:	20004d50 	.word	0x20004d50

0800a578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d04f      	beq.n	800a62a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a58a:	2308      	movs	r3, #8
 800a58c:	425b      	negs	r3, r3
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	4413      	add	r3, r2
 800a592:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	4b25      	ldr	r3, [pc, #148]	@ (800a634 <vPortFree+0xbc>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10b      	bne.n	800a5be <vPortFree+0x46>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	60fb      	str	r3, [r7, #12]
}
 800a5b8:	bf00      	nop
 800a5ba:	bf00      	nop
 800a5bc:	e7fd      	b.n	800a5ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00b      	beq.n	800a5de <vPortFree+0x66>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	60bb      	str	r3, [r7, #8]
}
 800a5d8:	bf00      	nop
 800a5da:	bf00      	nop
 800a5dc:	e7fd      	b.n	800a5da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	4b14      	ldr	r3, [pc, #80]	@ (800a634 <vPortFree+0xbc>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01e      	beq.n	800a62a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d11a      	bne.n	800a62a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	685a      	ldr	r2, [r3, #4]
 800a5f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a634 <vPortFree+0xbc>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	43db      	mvns	r3, r3
 800a5fe:	401a      	ands	r2, r3
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a604:	f7fe fc10 	bl	8008e28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	4b0a      	ldr	r3, [pc, #40]	@ (800a638 <vPortFree+0xc0>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4413      	add	r3, r2
 800a612:	4a09      	ldr	r2, [pc, #36]	@ (800a638 <vPortFree+0xc0>)
 800a614:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a616:	6938      	ldr	r0, [r7, #16]
 800a618:	f000 f874 	bl	800a704 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a61c:	4b07      	ldr	r3, [pc, #28]	@ (800a63c <vPortFree+0xc4>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3301      	adds	r3, #1
 800a622:	4a06      	ldr	r2, [pc, #24]	@ (800a63c <vPortFree+0xc4>)
 800a624:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a626:	f7fe fc45 	bl	8008eb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a62a:	bf00      	nop
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20004d58 	.word	0x20004d58
 800a638:	20004d48 	.word	0x20004d48
 800a63c:	20004d54 	.word	0x20004d54

0800a640 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a646:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a64a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a64c:	4b27      	ldr	r3, [pc, #156]	@ (800a6ec <prvHeapInit+0xac>)
 800a64e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f003 0307 	and.w	r3, r3, #7
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00c      	beq.n	800a674 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3307      	adds	r3, #7
 800a65e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 0307 	bic.w	r3, r3, #7
 800a666:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	4a1f      	ldr	r2, [pc, #124]	@ (800a6ec <prvHeapInit+0xac>)
 800a670:	4413      	add	r3, r2
 800a672:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a678:	4a1d      	ldr	r2, [pc, #116]	@ (800a6f0 <prvHeapInit+0xb0>)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a67e:	4b1c      	ldr	r3, [pc, #112]	@ (800a6f0 <prvHeapInit+0xb0>)
 800a680:	2200      	movs	r2, #0
 800a682:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	4413      	add	r3, r2
 800a68a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a68c:	2208      	movs	r2, #8
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	1a9b      	subs	r3, r3, r2
 800a692:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 0307 	bic.w	r3, r3, #7
 800a69a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4a15      	ldr	r2, [pc, #84]	@ (800a6f4 <prvHeapInit+0xb4>)
 800a6a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6a2:	4b14      	ldr	r3, [pc, #80]	@ (800a6f4 <prvHeapInit+0xb4>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a6aa:	4b12      	ldr	r3, [pc, #72]	@ (800a6f4 <prvHeapInit+0xb4>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	1ad2      	subs	r2, r2, r3
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a6f4 <prvHeapInit+0xb4>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a6f8 <prvHeapInit+0xb8>)
 800a6ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	4a09      	ldr	r2, [pc, #36]	@ (800a6fc <prvHeapInit+0xbc>)
 800a6d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6d8:	4b09      	ldr	r3, [pc, #36]	@ (800a700 <prvHeapInit+0xc0>)
 800a6da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a6de:	601a      	str	r2, [r3, #0]
}
 800a6e0:	bf00      	nop
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	2000113c 	.word	0x2000113c
 800a6f0:	20004d3c 	.word	0x20004d3c
 800a6f4:	20004d44 	.word	0x20004d44
 800a6f8:	20004d4c 	.word	0x20004d4c
 800a6fc:	20004d48 	.word	0x20004d48
 800a700:	20004d58 	.word	0x20004d58

0800a704 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a70c:	4b28      	ldr	r3, [pc, #160]	@ (800a7b0 <prvInsertBlockIntoFreeList+0xac>)
 800a70e:	60fb      	str	r3, [r7, #12]
 800a710:	e002      	b.n	800a718 <prvInsertBlockIntoFreeList+0x14>
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	60fb      	str	r3, [r7, #12]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d8f7      	bhi.n	800a712 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	68ba      	ldr	r2, [r7, #8]
 800a72c:	4413      	add	r3, r2
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	429a      	cmp	r2, r3
 800a732:	d108      	bne.n	800a746 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	441a      	add	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	441a      	add	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	429a      	cmp	r2, r3
 800a758:	d118      	bne.n	800a78c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	4b15      	ldr	r3, [pc, #84]	@ (800a7b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d00d      	beq.n	800a782 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	441a      	add	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	e008      	b.n	800a794 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a782:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	601a      	str	r2, [r3, #0]
 800a78a:	e003      	b.n	800a794 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d002      	beq.n	800a7a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7a2:	bf00      	nop
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	20004d3c 	.word	0x20004d3c
 800a7b4:	20004d44 	.word	0x20004d44

0800a7b8 <atoi>:
 800a7b8:	220a      	movs	r2, #10
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	f000 b87a 	b.w	800a8b4 <strtol>

0800a7c0 <_strtol_l.isra.0>:
 800a7c0:	2b24      	cmp	r3, #36	@ 0x24
 800a7c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c6:	4686      	mov	lr, r0
 800a7c8:	4690      	mov	r8, r2
 800a7ca:	d801      	bhi.n	800a7d0 <_strtol_l.isra.0+0x10>
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d106      	bne.n	800a7de <_strtol_l.isra.0+0x1e>
 800a7d0:	f000 fe5e 	bl	800b490 <__errno>
 800a7d4:	2316      	movs	r3, #22
 800a7d6:	6003      	str	r3, [r0, #0]
 800a7d8:	2000      	movs	r0, #0
 800a7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7de:	4834      	ldr	r0, [pc, #208]	@ (800a8b0 <_strtol_l.isra.0+0xf0>)
 800a7e0:	460d      	mov	r5, r1
 800a7e2:	462a      	mov	r2, r5
 800a7e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7e8:	5d06      	ldrb	r6, [r0, r4]
 800a7ea:	f016 0608 	ands.w	r6, r6, #8
 800a7ee:	d1f8      	bne.n	800a7e2 <_strtol_l.isra.0+0x22>
 800a7f0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a7f2:	d110      	bne.n	800a816 <_strtol_l.isra.0+0x56>
 800a7f4:	782c      	ldrb	r4, [r5, #0]
 800a7f6:	2601      	movs	r6, #1
 800a7f8:	1c95      	adds	r5, r2, #2
 800a7fa:	f033 0210 	bics.w	r2, r3, #16
 800a7fe:	d115      	bne.n	800a82c <_strtol_l.isra.0+0x6c>
 800a800:	2c30      	cmp	r4, #48	@ 0x30
 800a802:	d10d      	bne.n	800a820 <_strtol_l.isra.0+0x60>
 800a804:	782a      	ldrb	r2, [r5, #0]
 800a806:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a80a:	2a58      	cmp	r2, #88	@ 0x58
 800a80c:	d108      	bne.n	800a820 <_strtol_l.isra.0+0x60>
 800a80e:	786c      	ldrb	r4, [r5, #1]
 800a810:	3502      	adds	r5, #2
 800a812:	2310      	movs	r3, #16
 800a814:	e00a      	b.n	800a82c <_strtol_l.isra.0+0x6c>
 800a816:	2c2b      	cmp	r4, #43	@ 0x2b
 800a818:	bf04      	itt	eq
 800a81a:	782c      	ldrbeq	r4, [r5, #0]
 800a81c:	1c95      	addeq	r5, r2, #2
 800a81e:	e7ec      	b.n	800a7fa <_strtol_l.isra.0+0x3a>
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1f6      	bne.n	800a812 <_strtol_l.isra.0+0x52>
 800a824:	2c30      	cmp	r4, #48	@ 0x30
 800a826:	bf14      	ite	ne
 800a828:	230a      	movne	r3, #10
 800a82a:	2308      	moveq	r3, #8
 800a82c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a830:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a834:	2200      	movs	r2, #0
 800a836:	fbbc f9f3 	udiv	r9, ip, r3
 800a83a:	4610      	mov	r0, r2
 800a83c:	fb03 ca19 	mls	sl, r3, r9, ip
 800a840:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a844:	2f09      	cmp	r7, #9
 800a846:	d80f      	bhi.n	800a868 <_strtol_l.isra.0+0xa8>
 800a848:	463c      	mov	r4, r7
 800a84a:	42a3      	cmp	r3, r4
 800a84c:	dd1b      	ble.n	800a886 <_strtol_l.isra.0+0xc6>
 800a84e:	1c57      	adds	r7, r2, #1
 800a850:	d007      	beq.n	800a862 <_strtol_l.isra.0+0xa2>
 800a852:	4581      	cmp	r9, r0
 800a854:	d314      	bcc.n	800a880 <_strtol_l.isra.0+0xc0>
 800a856:	d101      	bne.n	800a85c <_strtol_l.isra.0+0x9c>
 800a858:	45a2      	cmp	sl, r4
 800a85a:	db11      	blt.n	800a880 <_strtol_l.isra.0+0xc0>
 800a85c:	fb00 4003 	mla	r0, r0, r3, r4
 800a860:	2201      	movs	r2, #1
 800a862:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a866:	e7eb      	b.n	800a840 <_strtol_l.isra.0+0x80>
 800a868:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a86c:	2f19      	cmp	r7, #25
 800a86e:	d801      	bhi.n	800a874 <_strtol_l.isra.0+0xb4>
 800a870:	3c37      	subs	r4, #55	@ 0x37
 800a872:	e7ea      	b.n	800a84a <_strtol_l.isra.0+0x8a>
 800a874:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a878:	2f19      	cmp	r7, #25
 800a87a:	d804      	bhi.n	800a886 <_strtol_l.isra.0+0xc6>
 800a87c:	3c57      	subs	r4, #87	@ 0x57
 800a87e:	e7e4      	b.n	800a84a <_strtol_l.isra.0+0x8a>
 800a880:	f04f 32ff 	mov.w	r2, #4294967295
 800a884:	e7ed      	b.n	800a862 <_strtol_l.isra.0+0xa2>
 800a886:	1c53      	adds	r3, r2, #1
 800a888:	d108      	bne.n	800a89c <_strtol_l.isra.0+0xdc>
 800a88a:	2322      	movs	r3, #34	@ 0x22
 800a88c:	f8ce 3000 	str.w	r3, [lr]
 800a890:	4660      	mov	r0, ip
 800a892:	f1b8 0f00 	cmp.w	r8, #0
 800a896:	d0a0      	beq.n	800a7da <_strtol_l.isra.0+0x1a>
 800a898:	1e69      	subs	r1, r5, #1
 800a89a:	e006      	b.n	800a8aa <_strtol_l.isra.0+0xea>
 800a89c:	b106      	cbz	r6, 800a8a0 <_strtol_l.isra.0+0xe0>
 800a89e:	4240      	negs	r0, r0
 800a8a0:	f1b8 0f00 	cmp.w	r8, #0
 800a8a4:	d099      	beq.n	800a7da <_strtol_l.isra.0+0x1a>
 800a8a6:	2a00      	cmp	r2, #0
 800a8a8:	d1f6      	bne.n	800a898 <_strtol_l.isra.0+0xd8>
 800a8aa:	f8c8 1000 	str.w	r1, [r8]
 800a8ae:	e794      	b.n	800a7da <_strtol_l.isra.0+0x1a>
 800a8b0:	0800e465 	.word	0x0800e465

0800a8b4 <strtol>:
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	460a      	mov	r2, r1
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	4802      	ldr	r0, [pc, #8]	@ (800a8c4 <strtol+0x10>)
 800a8bc:	6800      	ldr	r0, [r0, #0]
 800a8be:	f7ff bf7f 	b.w	800a7c0 <_strtol_l.isra.0>
 800a8c2:	bf00      	nop
 800a8c4:	20000038 	.word	0x20000038

0800a8c8 <__cvt>:
 800a8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8cc:	ec57 6b10 	vmov	r6, r7, d0
 800a8d0:	2f00      	cmp	r7, #0
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	bfbb      	ittet	lt
 800a8da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a8de:	461f      	movlt	r7, r3
 800a8e0:	2300      	movge	r3, #0
 800a8e2:	232d      	movlt	r3, #45	@ 0x2d
 800a8e4:	700b      	strb	r3, [r1, #0]
 800a8e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a8ec:	4691      	mov	r9, r2
 800a8ee:	f023 0820 	bic.w	r8, r3, #32
 800a8f2:	bfbc      	itt	lt
 800a8f4:	4632      	movlt	r2, r6
 800a8f6:	4616      	movlt	r6, r2
 800a8f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a8fc:	d005      	beq.n	800a90a <__cvt+0x42>
 800a8fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a902:	d100      	bne.n	800a906 <__cvt+0x3e>
 800a904:	3401      	adds	r4, #1
 800a906:	2102      	movs	r1, #2
 800a908:	e000      	b.n	800a90c <__cvt+0x44>
 800a90a:	2103      	movs	r1, #3
 800a90c:	ab03      	add	r3, sp, #12
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	ab02      	add	r3, sp, #8
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	ec47 6b10 	vmov	d0, r6, r7
 800a918:	4653      	mov	r3, sl
 800a91a:	4622      	mov	r2, r4
 800a91c:	f000 fe7c 	bl	800b618 <_dtoa_r>
 800a920:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a924:	4605      	mov	r5, r0
 800a926:	d119      	bne.n	800a95c <__cvt+0x94>
 800a928:	f019 0f01 	tst.w	r9, #1
 800a92c:	d00e      	beq.n	800a94c <__cvt+0x84>
 800a92e:	eb00 0904 	add.w	r9, r0, r4
 800a932:	2200      	movs	r2, #0
 800a934:	2300      	movs	r3, #0
 800a936:	4630      	mov	r0, r6
 800a938:	4639      	mov	r1, r7
 800a93a:	f7f6 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a93e:	b108      	cbz	r0, 800a944 <__cvt+0x7c>
 800a940:	f8cd 900c 	str.w	r9, [sp, #12]
 800a944:	2230      	movs	r2, #48	@ 0x30
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	454b      	cmp	r3, r9
 800a94a:	d31e      	bcc.n	800a98a <__cvt+0xc2>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a950:	1b5b      	subs	r3, r3, r5
 800a952:	4628      	mov	r0, r5
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	b004      	add	sp, #16
 800a958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a960:	eb00 0904 	add.w	r9, r0, r4
 800a964:	d1e5      	bne.n	800a932 <__cvt+0x6a>
 800a966:	7803      	ldrb	r3, [r0, #0]
 800a968:	2b30      	cmp	r3, #48	@ 0x30
 800a96a:	d10a      	bne.n	800a982 <__cvt+0xba>
 800a96c:	2200      	movs	r2, #0
 800a96e:	2300      	movs	r3, #0
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f7f6 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a978:	b918      	cbnz	r0, 800a982 <__cvt+0xba>
 800a97a:	f1c4 0401 	rsb	r4, r4, #1
 800a97e:	f8ca 4000 	str.w	r4, [sl]
 800a982:	f8da 3000 	ldr.w	r3, [sl]
 800a986:	4499      	add	r9, r3
 800a988:	e7d3      	b.n	800a932 <__cvt+0x6a>
 800a98a:	1c59      	adds	r1, r3, #1
 800a98c:	9103      	str	r1, [sp, #12]
 800a98e:	701a      	strb	r2, [r3, #0]
 800a990:	e7d9      	b.n	800a946 <__cvt+0x7e>

0800a992 <__exponent>:
 800a992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a994:	2900      	cmp	r1, #0
 800a996:	bfba      	itte	lt
 800a998:	4249      	neglt	r1, r1
 800a99a:	232d      	movlt	r3, #45	@ 0x2d
 800a99c:	232b      	movge	r3, #43	@ 0x2b
 800a99e:	2909      	cmp	r1, #9
 800a9a0:	7002      	strb	r2, [r0, #0]
 800a9a2:	7043      	strb	r3, [r0, #1]
 800a9a4:	dd29      	ble.n	800a9fa <__exponent+0x68>
 800a9a6:	f10d 0307 	add.w	r3, sp, #7
 800a9aa:	461d      	mov	r5, r3
 800a9ac:	270a      	movs	r7, #10
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a9b4:	fb07 1416 	mls	r4, r7, r6, r1
 800a9b8:	3430      	adds	r4, #48	@ 0x30
 800a9ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a9be:	460c      	mov	r4, r1
 800a9c0:	2c63      	cmp	r4, #99	@ 0x63
 800a9c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	dcf1      	bgt.n	800a9ae <__exponent+0x1c>
 800a9ca:	3130      	adds	r1, #48	@ 0x30
 800a9cc:	1e94      	subs	r4, r2, #2
 800a9ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a9d2:	1c41      	adds	r1, r0, #1
 800a9d4:	4623      	mov	r3, r4
 800a9d6:	42ab      	cmp	r3, r5
 800a9d8:	d30a      	bcc.n	800a9f0 <__exponent+0x5e>
 800a9da:	f10d 0309 	add.w	r3, sp, #9
 800a9de:	1a9b      	subs	r3, r3, r2
 800a9e0:	42ac      	cmp	r4, r5
 800a9e2:	bf88      	it	hi
 800a9e4:	2300      	movhi	r3, #0
 800a9e6:	3302      	adds	r3, #2
 800a9e8:	4403      	add	r3, r0
 800a9ea:	1a18      	subs	r0, r3, r0
 800a9ec:	b003      	add	sp, #12
 800a9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a9f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a9f8:	e7ed      	b.n	800a9d6 <__exponent+0x44>
 800a9fa:	2330      	movs	r3, #48	@ 0x30
 800a9fc:	3130      	adds	r1, #48	@ 0x30
 800a9fe:	7083      	strb	r3, [r0, #2]
 800aa00:	70c1      	strb	r1, [r0, #3]
 800aa02:	1d03      	adds	r3, r0, #4
 800aa04:	e7f1      	b.n	800a9ea <__exponent+0x58>
	...

0800aa08 <_printf_float>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	b08d      	sub	sp, #52	@ 0x34
 800aa0e:	460c      	mov	r4, r1
 800aa10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aa14:	4616      	mov	r6, r2
 800aa16:	461f      	mov	r7, r3
 800aa18:	4605      	mov	r5, r0
 800aa1a:	f000 fcef 	bl	800b3fc <_localeconv_r>
 800aa1e:	6803      	ldr	r3, [r0, #0]
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7f5 fc24 	bl	8000270 <strlen>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa2c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa30:	9005      	str	r0, [sp, #20]
 800aa32:	3307      	adds	r3, #7
 800aa34:	f023 0307 	bic.w	r3, r3, #7
 800aa38:	f103 0208 	add.w	r2, r3, #8
 800aa3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa40:	f8d4 b000 	ldr.w	fp, [r4]
 800aa44:	f8c8 2000 	str.w	r2, [r8]
 800aa48:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aa50:	9307      	str	r3, [sp, #28]
 800aa52:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aa5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa5e:	4b9c      	ldr	r3, [pc, #624]	@ (800acd0 <_printf_float+0x2c8>)
 800aa60:	f04f 32ff 	mov.w	r2, #4294967295
 800aa64:	f7f6 f862 	bl	8000b2c <__aeabi_dcmpun>
 800aa68:	bb70      	cbnz	r0, 800aac8 <_printf_float+0xc0>
 800aa6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa6e:	4b98      	ldr	r3, [pc, #608]	@ (800acd0 <_printf_float+0x2c8>)
 800aa70:	f04f 32ff 	mov.w	r2, #4294967295
 800aa74:	f7f6 f83c 	bl	8000af0 <__aeabi_dcmple>
 800aa78:	bb30      	cbnz	r0, 800aac8 <_printf_float+0xc0>
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4640      	mov	r0, r8
 800aa80:	4649      	mov	r1, r9
 800aa82:	f7f6 f82b 	bl	8000adc <__aeabi_dcmplt>
 800aa86:	b110      	cbz	r0, 800aa8e <_printf_float+0x86>
 800aa88:	232d      	movs	r3, #45	@ 0x2d
 800aa8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa8e:	4a91      	ldr	r2, [pc, #580]	@ (800acd4 <_printf_float+0x2cc>)
 800aa90:	4b91      	ldr	r3, [pc, #580]	@ (800acd8 <_printf_float+0x2d0>)
 800aa92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aa96:	bf8c      	ite	hi
 800aa98:	4690      	movhi	r8, r2
 800aa9a:	4698      	movls	r8, r3
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	6123      	str	r3, [r4, #16]
 800aaa0:	f02b 0304 	bic.w	r3, fp, #4
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	f04f 0900 	mov.w	r9, #0
 800aaaa:	9700      	str	r7, [sp, #0]
 800aaac:	4633      	mov	r3, r6
 800aaae:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aab0:	4621      	mov	r1, r4
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 f9d2 	bl	800ae5c <_printf_common>
 800aab8:	3001      	adds	r0, #1
 800aaba:	f040 808d 	bne.w	800abd8 <_printf_float+0x1d0>
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295
 800aac2:	b00d      	add	sp, #52	@ 0x34
 800aac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac8:	4642      	mov	r2, r8
 800aaca:	464b      	mov	r3, r9
 800aacc:	4640      	mov	r0, r8
 800aace:	4649      	mov	r1, r9
 800aad0:	f7f6 f82c 	bl	8000b2c <__aeabi_dcmpun>
 800aad4:	b140      	cbz	r0, 800aae8 <_printf_float+0xe0>
 800aad6:	464b      	mov	r3, r9
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bfbc      	itt	lt
 800aadc:	232d      	movlt	r3, #45	@ 0x2d
 800aade:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aae2:	4a7e      	ldr	r2, [pc, #504]	@ (800acdc <_printf_float+0x2d4>)
 800aae4:	4b7e      	ldr	r3, [pc, #504]	@ (800ace0 <_printf_float+0x2d8>)
 800aae6:	e7d4      	b.n	800aa92 <_printf_float+0x8a>
 800aae8:	6863      	ldr	r3, [r4, #4]
 800aaea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aaee:	9206      	str	r2, [sp, #24]
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	d13b      	bne.n	800ab6c <_printf_float+0x164>
 800aaf4:	2306      	movs	r3, #6
 800aaf6:	6063      	str	r3, [r4, #4]
 800aaf8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aafc:	2300      	movs	r3, #0
 800aafe:	6022      	str	r2, [r4, #0]
 800ab00:	9303      	str	r3, [sp, #12]
 800ab02:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab04:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ab08:	ab09      	add	r3, sp, #36	@ 0x24
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	6861      	ldr	r1, [r4, #4]
 800ab0e:	ec49 8b10 	vmov	d0, r8, r9
 800ab12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ab16:	4628      	mov	r0, r5
 800ab18:	f7ff fed6 	bl	800a8c8 <__cvt>
 800ab1c:	9b06      	ldr	r3, [sp, #24]
 800ab1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab20:	2b47      	cmp	r3, #71	@ 0x47
 800ab22:	4680      	mov	r8, r0
 800ab24:	d129      	bne.n	800ab7a <_printf_float+0x172>
 800ab26:	1cc8      	adds	r0, r1, #3
 800ab28:	db02      	blt.n	800ab30 <_printf_float+0x128>
 800ab2a:	6863      	ldr	r3, [r4, #4]
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	dd41      	ble.n	800abb4 <_printf_float+0x1ac>
 800ab30:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab34:	fa5f fa8a 	uxtb.w	sl, sl
 800ab38:	3901      	subs	r1, #1
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ab40:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab42:	f7ff ff26 	bl	800a992 <__exponent>
 800ab46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab48:	1813      	adds	r3, r2, r0
 800ab4a:	2a01      	cmp	r2, #1
 800ab4c:	4681      	mov	r9, r0
 800ab4e:	6123      	str	r3, [r4, #16]
 800ab50:	dc02      	bgt.n	800ab58 <_printf_float+0x150>
 800ab52:	6822      	ldr	r2, [r4, #0]
 800ab54:	07d2      	lsls	r2, r2, #31
 800ab56:	d501      	bpl.n	800ab5c <_printf_float+0x154>
 800ab58:	3301      	adds	r3, #1
 800ab5a:	6123      	str	r3, [r4, #16]
 800ab5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d0a2      	beq.n	800aaaa <_printf_float+0xa2>
 800ab64:	232d      	movs	r3, #45	@ 0x2d
 800ab66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab6a:	e79e      	b.n	800aaaa <_printf_float+0xa2>
 800ab6c:	9a06      	ldr	r2, [sp, #24]
 800ab6e:	2a47      	cmp	r2, #71	@ 0x47
 800ab70:	d1c2      	bne.n	800aaf8 <_printf_float+0xf0>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1c0      	bne.n	800aaf8 <_printf_float+0xf0>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e7bd      	b.n	800aaf6 <_printf_float+0xee>
 800ab7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ab7e:	d9db      	bls.n	800ab38 <_printf_float+0x130>
 800ab80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ab84:	d118      	bne.n	800abb8 <_printf_float+0x1b0>
 800ab86:	2900      	cmp	r1, #0
 800ab88:	6863      	ldr	r3, [r4, #4]
 800ab8a:	dd0b      	ble.n	800aba4 <_printf_float+0x19c>
 800ab8c:	6121      	str	r1, [r4, #16]
 800ab8e:	b913      	cbnz	r3, 800ab96 <_printf_float+0x18e>
 800ab90:	6822      	ldr	r2, [r4, #0]
 800ab92:	07d0      	lsls	r0, r2, #31
 800ab94:	d502      	bpl.n	800ab9c <_printf_float+0x194>
 800ab96:	3301      	adds	r3, #1
 800ab98:	440b      	add	r3, r1
 800ab9a:	6123      	str	r3, [r4, #16]
 800ab9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ab9e:	f04f 0900 	mov.w	r9, #0
 800aba2:	e7db      	b.n	800ab5c <_printf_float+0x154>
 800aba4:	b913      	cbnz	r3, 800abac <_printf_float+0x1a4>
 800aba6:	6822      	ldr	r2, [r4, #0]
 800aba8:	07d2      	lsls	r2, r2, #31
 800abaa:	d501      	bpl.n	800abb0 <_printf_float+0x1a8>
 800abac:	3302      	adds	r3, #2
 800abae:	e7f4      	b.n	800ab9a <_printf_float+0x192>
 800abb0:	2301      	movs	r3, #1
 800abb2:	e7f2      	b.n	800ab9a <_printf_float+0x192>
 800abb4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800abb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abba:	4299      	cmp	r1, r3
 800abbc:	db05      	blt.n	800abca <_printf_float+0x1c2>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	6121      	str	r1, [r4, #16]
 800abc2:	07d8      	lsls	r0, r3, #31
 800abc4:	d5ea      	bpl.n	800ab9c <_printf_float+0x194>
 800abc6:	1c4b      	adds	r3, r1, #1
 800abc8:	e7e7      	b.n	800ab9a <_printf_float+0x192>
 800abca:	2900      	cmp	r1, #0
 800abcc:	bfd4      	ite	le
 800abce:	f1c1 0202 	rsble	r2, r1, #2
 800abd2:	2201      	movgt	r2, #1
 800abd4:	4413      	add	r3, r2
 800abd6:	e7e0      	b.n	800ab9a <_printf_float+0x192>
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	055a      	lsls	r2, r3, #21
 800abdc:	d407      	bmi.n	800abee <_printf_float+0x1e6>
 800abde:	6923      	ldr	r3, [r4, #16]
 800abe0:	4642      	mov	r2, r8
 800abe2:	4631      	mov	r1, r6
 800abe4:	4628      	mov	r0, r5
 800abe6:	47b8      	blx	r7
 800abe8:	3001      	adds	r0, #1
 800abea:	d12b      	bne.n	800ac44 <_printf_float+0x23c>
 800abec:	e767      	b.n	800aabe <_printf_float+0xb6>
 800abee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800abf2:	f240 80dd 	bls.w	800adb0 <_printf_float+0x3a8>
 800abf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800abfa:	2200      	movs	r2, #0
 800abfc:	2300      	movs	r3, #0
 800abfe:	f7f5 ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d033      	beq.n	800ac6e <_printf_float+0x266>
 800ac06:	4a37      	ldr	r2, [pc, #220]	@ (800ace4 <_printf_float+0x2dc>)
 800ac08:	2301      	movs	r3, #1
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	47b8      	blx	r7
 800ac10:	3001      	adds	r0, #1
 800ac12:	f43f af54 	beq.w	800aabe <_printf_float+0xb6>
 800ac16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ac1a:	4543      	cmp	r3, r8
 800ac1c:	db02      	blt.n	800ac24 <_printf_float+0x21c>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	07d8      	lsls	r0, r3, #31
 800ac22:	d50f      	bpl.n	800ac44 <_printf_float+0x23c>
 800ac24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac28:	4631      	mov	r1, r6
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	47b8      	blx	r7
 800ac2e:	3001      	adds	r0, #1
 800ac30:	f43f af45 	beq.w	800aabe <_printf_float+0xb6>
 800ac34:	f04f 0900 	mov.w	r9, #0
 800ac38:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac3c:	f104 0a1a 	add.w	sl, r4, #26
 800ac40:	45c8      	cmp	r8, r9
 800ac42:	dc09      	bgt.n	800ac58 <_printf_float+0x250>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	079b      	lsls	r3, r3, #30
 800ac48:	f100 8103 	bmi.w	800ae52 <_printf_float+0x44a>
 800ac4c:	68e0      	ldr	r0, [r4, #12]
 800ac4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac50:	4298      	cmp	r0, r3
 800ac52:	bfb8      	it	lt
 800ac54:	4618      	movlt	r0, r3
 800ac56:	e734      	b.n	800aac2 <_printf_float+0xba>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	4652      	mov	r2, sl
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4628      	mov	r0, r5
 800ac60:	47b8      	blx	r7
 800ac62:	3001      	adds	r0, #1
 800ac64:	f43f af2b 	beq.w	800aabe <_printf_float+0xb6>
 800ac68:	f109 0901 	add.w	r9, r9, #1
 800ac6c:	e7e8      	b.n	800ac40 <_printf_float+0x238>
 800ac6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	dc39      	bgt.n	800ace8 <_printf_float+0x2e0>
 800ac74:	4a1b      	ldr	r2, [pc, #108]	@ (800ace4 <_printf_float+0x2dc>)
 800ac76:	2301      	movs	r3, #1
 800ac78:	4631      	mov	r1, r6
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	47b8      	blx	r7
 800ac7e:	3001      	adds	r0, #1
 800ac80:	f43f af1d 	beq.w	800aabe <_printf_float+0xb6>
 800ac84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ac88:	ea59 0303 	orrs.w	r3, r9, r3
 800ac8c:	d102      	bne.n	800ac94 <_printf_float+0x28c>
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	07d9      	lsls	r1, r3, #31
 800ac92:	d5d7      	bpl.n	800ac44 <_printf_float+0x23c>
 800ac94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac98:	4631      	mov	r1, r6
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	47b8      	blx	r7
 800ac9e:	3001      	adds	r0, #1
 800aca0:	f43f af0d 	beq.w	800aabe <_printf_float+0xb6>
 800aca4:	f04f 0a00 	mov.w	sl, #0
 800aca8:	f104 0b1a 	add.w	fp, r4, #26
 800acac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acae:	425b      	negs	r3, r3
 800acb0:	4553      	cmp	r3, sl
 800acb2:	dc01      	bgt.n	800acb8 <_printf_float+0x2b0>
 800acb4:	464b      	mov	r3, r9
 800acb6:	e793      	b.n	800abe0 <_printf_float+0x1d8>
 800acb8:	2301      	movs	r3, #1
 800acba:	465a      	mov	r2, fp
 800acbc:	4631      	mov	r1, r6
 800acbe:	4628      	mov	r0, r5
 800acc0:	47b8      	blx	r7
 800acc2:	3001      	adds	r0, #1
 800acc4:	f43f aefb 	beq.w	800aabe <_printf_float+0xb6>
 800acc8:	f10a 0a01 	add.w	sl, sl, #1
 800accc:	e7ee      	b.n	800acac <_printf_float+0x2a4>
 800acce:	bf00      	nop
 800acd0:	7fefffff 	.word	0x7fefffff
 800acd4:	0800e569 	.word	0x0800e569
 800acd8:	0800e565 	.word	0x0800e565
 800acdc:	0800e571 	.word	0x0800e571
 800ace0:	0800e56d 	.word	0x0800e56d
 800ace4:	0800e575 	.word	0x0800e575
 800ace8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800acea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800acee:	4553      	cmp	r3, sl
 800acf0:	bfa8      	it	ge
 800acf2:	4653      	movge	r3, sl
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	4699      	mov	r9, r3
 800acf8:	dc36      	bgt.n	800ad68 <_printf_float+0x360>
 800acfa:	f04f 0b00 	mov.w	fp, #0
 800acfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad02:	f104 021a 	add.w	r2, r4, #26
 800ad06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad08:	9306      	str	r3, [sp, #24]
 800ad0a:	eba3 0309 	sub.w	r3, r3, r9
 800ad0e:	455b      	cmp	r3, fp
 800ad10:	dc31      	bgt.n	800ad76 <_printf_float+0x36e>
 800ad12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad14:	459a      	cmp	sl, r3
 800ad16:	dc3a      	bgt.n	800ad8e <_printf_float+0x386>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	07da      	lsls	r2, r3, #31
 800ad1c:	d437      	bmi.n	800ad8e <_printf_float+0x386>
 800ad1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad20:	ebaa 0903 	sub.w	r9, sl, r3
 800ad24:	9b06      	ldr	r3, [sp, #24]
 800ad26:	ebaa 0303 	sub.w	r3, sl, r3
 800ad2a:	4599      	cmp	r9, r3
 800ad2c:	bfa8      	it	ge
 800ad2e:	4699      	movge	r9, r3
 800ad30:	f1b9 0f00 	cmp.w	r9, #0
 800ad34:	dc33      	bgt.n	800ad9e <_printf_float+0x396>
 800ad36:	f04f 0800 	mov.w	r8, #0
 800ad3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad3e:	f104 0b1a 	add.w	fp, r4, #26
 800ad42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad44:	ebaa 0303 	sub.w	r3, sl, r3
 800ad48:	eba3 0309 	sub.w	r3, r3, r9
 800ad4c:	4543      	cmp	r3, r8
 800ad4e:	f77f af79 	ble.w	800ac44 <_printf_float+0x23c>
 800ad52:	2301      	movs	r3, #1
 800ad54:	465a      	mov	r2, fp
 800ad56:	4631      	mov	r1, r6
 800ad58:	4628      	mov	r0, r5
 800ad5a:	47b8      	blx	r7
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	f43f aeae 	beq.w	800aabe <_printf_float+0xb6>
 800ad62:	f108 0801 	add.w	r8, r8, #1
 800ad66:	e7ec      	b.n	800ad42 <_printf_float+0x33a>
 800ad68:	4642      	mov	r2, r8
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	47b8      	blx	r7
 800ad70:	3001      	adds	r0, #1
 800ad72:	d1c2      	bne.n	800acfa <_printf_float+0x2f2>
 800ad74:	e6a3      	b.n	800aabe <_printf_float+0xb6>
 800ad76:	2301      	movs	r3, #1
 800ad78:	4631      	mov	r1, r6
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	9206      	str	r2, [sp, #24]
 800ad7e:	47b8      	blx	r7
 800ad80:	3001      	adds	r0, #1
 800ad82:	f43f ae9c 	beq.w	800aabe <_printf_float+0xb6>
 800ad86:	9a06      	ldr	r2, [sp, #24]
 800ad88:	f10b 0b01 	add.w	fp, fp, #1
 800ad8c:	e7bb      	b.n	800ad06 <_printf_float+0x2fe>
 800ad8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b8      	blx	r7
 800ad98:	3001      	adds	r0, #1
 800ad9a:	d1c0      	bne.n	800ad1e <_printf_float+0x316>
 800ad9c:	e68f      	b.n	800aabe <_printf_float+0xb6>
 800ad9e:	9a06      	ldr	r2, [sp, #24]
 800ada0:	464b      	mov	r3, r9
 800ada2:	4442      	add	r2, r8
 800ada4:	4631      	mov	r1, r6
 800ada6:	4628      	mov	r0, r5
 800ada8:	47b8      	blx	r7
 800adaa:	3001      	adds	r0, #1
 800adac:	d1c3      	bne.n	800ad36 <_printf_float+0x32e>
 800adae:	e686      	b.n	800aabe <_printf_float+0xb6>
 800adb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800adb4:	f1ba 0f01 	cmp.w	sl, #1
 800adb8:	dc01      	bgt.n	800adbe <_printf_float+0x3b6>
 800adba:	07db      	lsls	r3, r3, #31
 800adbc:	d536      	bpl.n	800ae2c <_printf_float+0x424>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4642      	mov	r2, r8
 800adc2:	4631      	mov	r1, r6
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b8      	blx	r7
 800adc8:	3001      	adds	r0, #1
 800adca:	f43f ae78 	beq.w	800aabe <_printf_float+0xb6>
 800adce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800add2:	4631      	mov	r1, r6
 800add4:	4628      	mov	r0, r5
 800add6:	47b8      	blx	r7
 800add8:	3001      	adds	r0, #1
 800adda:	f43f ae70 	beq.w	800aabe <_printf_float+0xb6>
 800adde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ade2:	2200      	movs	r2, #0
 800ade4:	2300      	movs	r3, #0
 800ade6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adea:	f7f5 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800adee:	b9c0      	cbnz	r0, 800ae22 <_printf_float+0x41a>
 800adf0:	4653      	mov	r3, sl
 800adf2:	f108 0201 	add.w	r2, r8, #1
 800adf6:	4631      	mov	r1, r6
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b8      	blx	r7
 800adfc:	3001      	adds	r0, #1
 800adfe:	d10c      	bne.n	800ae1a <_printf_float+0x412>
 800ae00:	e65d      	b.n	800aabe <_printf_float+0xb6>
 800ae02:	2301      	movs	r3, #1
 800ae04:	465a      	mov	r2, fp
 800ae06:	4631      	mov	r1, r6
 800ae08:	4628      	mov	r0, r5
 800ae0a:	47b8      	blx	r7
 800ae0c:	3001      	adds	r0, #1
 800ae0e:	f43f ae56 	beq.w	800aabe <_printf_float+0xb6>
 800ae12:	f108 0801 	add.w	r8, r8, #1
 800ae16:	45d0      	cmp	r8, sl
 800ae18:	dbf3      	blt.n	800ae02 <_printf_float+0x3fa>
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae20:	e6df      	b.n	800abe2 <_printf_float+0x1da>
 800ae22:	f04f 0800 	mov.w	r8, #0
 800ae26:	f104 0b1a 	add.w	fp, r4, #26
 800ae2a:	e7f4      	b.n	800ae16 <_printf_float+0x40e>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	4642      	mov	r2, r8
 800ae30:	e7e1      	b.n	800adf6 <_printf_float+0x3ee>
 800ae32:	2301      	movs	r3, #1
 800ae34:	464a      	mov	r2, r9
 800ae36:	4631      	mov	r1, r6
 800ae38:	4628      	mov	r0, r5
 800ae3a:	47b8      	blx	r7
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	f43f ae3e 	beq.w	800aabe <_printf_float+0xb6>
 800ae42:	f108 0801 	add.w	r8, r8, #1
 800ae46:	68e3      	ldr	r3, [r4, #12]
 800ae48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae4a:	1a5b      	subs	r3, r3, r1
 800ae4c:	4543      	cmp	r3, r8
 800ae4e:	dcf0      	bgt.n	800ae32 <_printf_float+0x42a>
 800ae50:	e6fc      	b.n	800ac4c <_printf_float+0x244>
 800ae52:	f04f 0800 	mov.w	r8, #0
 800ae56:	f104 0919 	add.w	r9, r4, #25
 800ae5a:	e7f4      	b.n	800ae46 <_printf_float+0x43e>

0800ae5c <_printf_common>:
 800ae5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae60:	4616      	mov	r6, r2
 800ae62:	4698      	mov	r8, r3
 800ae64:	688a      	ldr	r2, [r1, #8]
 800ae66:	690b      	ldr	r3, [r1, #16]
 800ae68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	bfb8      	it	lt
 800ae70:	4613      	movlt	r3, r2
 800ae72:	6033      	str	r3, [r6, #0]
 800ae74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae78:	4607      	mov	r7, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	b10a      	cbz	r2, 800ae82 <_printf_common+0x26>
 800ae7e:	3301      	adds	r3, #1
 800ae80:	6033      	str	r3, [r6, #0]
 800ae82:	6823      	ldr	r3, [r4, #0]
 800ae84:	0699      	lsls	r1, r3, #26
 800ae86:	bf42      	ittt	mi
 800ae88:	6833      	ldrmi	r3, [r6, #0]
 800ae8a:	3302      	addmi	r3, #2
 800ae8c:	6033      	strmi	r3, [r6, #0]
 800ae8e:	6825      	ldr	r5, [r4, #0]
 800ae90:	f015 0506 	ands.w	r5, r5, #6
 800ae94:	d106      	bne.n	800aea4 <_printf_common+0x48>
 800ae96:	f104 0a19 	add.w	sl, r4, #25
 800ae9a:	68e3      	ldr	r3, [r4, #12]
 800ae9c:	6832      	ldr	r2, [r6, #0]
 800ae9e:	1a9b      	subs	r3, r3, r2
 800aea0:	42ab      	cmp	r3, r5
 800aea2:	dc26      	bgt.n	800aef2 <_printf_common+0x96>
 800aea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aea8:	6822      	ldr	r2, [r4, #0]
 800aeaa:	3b00      	subs	r3, #0
 800aeac:	bf18      	it	ne
 800aeae:	2301      	movne	r3, #1
 800aeb0:	0692      	lsls	r2, r2, #26
 800aeb2:	d42b      	bmi.n	800af0c <_printf_common+0xb0>
 800aeb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aeb8:	4641      	mov	r1, r8
 800aeba:	4638      	mov	r0, r7
 800aebc:	47c8      	blx	r9
 800aebe:	3001      	adds	r0, #1
 800aec0:	d01e      	beq.n	800af00 <_printf_common+0xa4>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	6922      	ldr	r2, [r4, #16]
 800aec6:	f003 0306 	and.w	r3, r3, #6
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	bf02      	ittt	eq
 800aece:	68e5      	ldreq	r5, [r4, #12]
 800aed0:	6833      	ldreq	r3, [r6, #0]
 800aed2:	1aed      	subeq	r5, r5, r3
 800aed4:	68a3      	ldr	r3, [r4, #8]
 800aed6:	bf0c      	ite	eq
 800aed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aedc:	2500      	movne	r5, #0
 800aede:	4293      	cmp	r3, r2
 800aee0:	bfc4      	itt	gt
 800aee2:	1a9b      	subgt	r3, r3, r2
 800aee4:	18ed      	addgt	r5, r5, r3
 800aee6:	2600      	movs	r6, #0
 800aee8:	341a      	adds	r4, #26
 800aeea:	42b5      	cmp	r5, r6
 800aeec:	d11a      	bne.n	800af24 <_printf_common+0xc8>
 800aeee:	2000      	movs	r0, #0
 800aef0:	e008      	b.n	800af04 <_printf_common+0xa8>
 800aef2:	2301      	movs	r3, #1
 800aef4:	4652      	mov	r2, sl
 800aef6:	4641      	mov	r1, r8
 800aef8:	4638      	mov	r0, r7
 800aefa:	47c8      	blx	r9
 800aefc:	3001      	adds	r0, #1
 800aefe:	d103      	bne.n	800af08 <_printf_common+0xac>
 800af00:	f04f 30ff 	mov.w	r0, #4294967295
 800af04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af08:	3501      	adds	r5, #1
 800af0a:	e7c6      	b.n	800ae9a <_printf_common+0x3e>
 800af0c:	18e1      	adds	r1, r4, r3
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	2030      	movs	r0, #48	@ 0x30
 800af12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af16:	4422      	add	r2, r4
 800af18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af20:	3302      	adds	r3, #2
 800af22:	e7c7      	b.n	800aeb4 <_printf_common+0x58>
 800af24:	2301      	movs	r3, #1
 800af26:	4622      	mov	r2, r4
 800af28:	4641      	mov	r1, r8
 800af2a:	4638      	mov	r0, r7
 800af2c:	47c8      	blx	r9
 800af2e:	3001      	adds	r0, #1
 800af30:	d0e6      	beq.n	800af00 <_printf_common+0xa4>
 800af32:	3601      	adds	r6, #1
 800af34:	e7d9      	b.n	800aeea <_printf_common+0x8e>
	...

0800af38 <_printf_i>:
 800af38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af3c:	7e0f      	ldrb	r7, [r1, #24]
 800af3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af40:	2f78      	cmp	r7, #120	@ 0x78
 800af42:	4691      	mov	r9, r2
 800af44:	4680      	mov	r8, r0
 800af46:	460c      	mov	r4, r1
 800af48:	469a      	mov	sl, r3
 800af4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af4e:	d807      	bhi.n	800af60 <_printf_i+0x28>
 800af50:	2f62      	cmp	r7, #98	@ 0x62
 800af52:	d80a      	bhi.n	800af6a <_printf_i+0x32>
 800af54:	2f00      	cmp	r7, #0
 800af56:	f000 80d1 	beq.w	800b0fc <_printf_i+0x1c4>
 800af5a:	2f58      	cmp	r7, #88	@ 0x58
 800af5c:	f000 80b8 	beq.w	800b0d0 <_printf_i+0x198>
 800af60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af68:	e03a      	b.n	800afe0 <_printf_i+0xa8>
 800af6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af6e:	2b15      	cmp	r3, #21
 800af70:	d8f6      	bhi.n	800af60 <_printf_i+0x28>
 800af72:	a101      	add	r1, pc, #4	@ (adr r1, 800af78 <_printf_i+0x40>)
 800af74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af78:	0800afd1 	.word	0x0800afd1
 800af7c:	0800afe5 	.word	0x0800afe5
 800af80:	0800af61 	.word	0x0800af61
 800af84:	0800af61 	.word	0x0800af61
 800af88:	0800af61 	.word	0x0800af61
 800af8c:	0800af61 	.word	0x0800af61
 800af90:	0800afe5 	.word	0x0800afe5
 800af94:	0800af61 	.word	0x0800af61
 800af98:	0800af61 	.word	0x0800af61
 800af9c:	0800af61 	.word	0x0800af61
 800afa0:	0800af61 	.word	0x0800af61
 800afa4:	0800b0e3 	.word	0x0800b0e3
 800afa8:	0800b00f 	.word	0x0800b00f
 800afac:	0800b09d 	.word	0x0800b09d
 800afb0:	0800af61 	.word	0x0800af61
 800afb4:	0800af61 	.word	0x0800af61
 800afb8:	0800b105 	.word	0x0800b105
 800afbc:	0800af61 	.word	0x0800af61
 800afc0:	0800b00f 	.word	0x0800b00f
 800afc4:	0800af61 	.word	0x0800af61
 800afc8:	0800af61 	.word	0x0800af61
 800afcc:	0800b0a5 	.word	0x0800b0a5
 800afd0:	6833      	ldr	r3, [r6, #0]
 800afd2:	1d1a      	adds	r2, r3, #4
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6032      	str	r2, [r6, #0]
 800afd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afe0:	2301      	movs	r3, #1
 800afe2:	e09c      	b.n	800b11e <_printf_i+0x1e6>
 800afe4:	6833      	ldr	r3, [r6, #0]
 800afe6:	6820      	ldr	r0, [r4, #0]
 800afe8:	1d19      	adds	r1, r3, #4
 800afea:	6031      	str	r1, [r6, #0]
 800afec:	0606      	lsls	r6, r0, #24
 800afee:	d501      	bpl.n	800aff4 <_printf_i+0xbc>
 800aff0:	681d      	ldr	r5, [r3, #0]
 800aff2:	e003      	b.n	800affc <_printf_i+0xc4>
 800aff4:	0645      	lsls	r5, r0, #25
 800aff6:	d5fb      	bpl.n	800aff0 <_printf_i+0xb8>
 800aff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800affc:	2d00      	cmp	r5, #0
 800affe:	da03      	bge.n	800b008 <_printf_i+0xd0>
 800b000:	232d      	movs	r3, #45	@ 0x2d
 800b002:	426d      	negs	r5, r5
 800b004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b008:	4858      	ldr	r0, [pc, #352]	@ (800b16c <_printf_i+0x234>)
 800b00a:	230a      	movs	r3, #10
 800b00c:	e011      	b.n	800b032 <_printf_i+0xfa>
 800b00e:	6821      	ldr	r1, [r4, #0]
 800b010:	6833      	ldr	r3, [r6, #0]
 800b012:	0608      	lsls	r0, r1, #24
 800b014:	f853 5b04 	ldr.w	r5, [r3], #4
 800b018:	d402      	bmi.n	800b020 <_printf_i+0xe8>
 800b01a:	0649      	lsls	r1, r1, #25
 800b01c:	bf48      	it	mi
 800b01e:	b2ad      	uxthmi	r5, r5
 800b020:	2f6f      	cmp	r7, #111	@ 0x6f
 800b022:	4852      	ldr	r0, [pc, #328]	@ (800b16c <_printf_i+0x234>)
 800b024:	6033      	str	r3, [r6, #0]
 800b026:	bf14      	ite	ne
 800b028:	230a      	movne	r3, #10
 800b02a:	2308      	moveq	r3, #8
 800b02c:	2100      	movs	r1, #0
 800b02e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b032:	6866      	ldr	r6, [r4, #4]
 800b034:	60a6      	str	r6, [r4, #8]
 800b036:	2e00      	cmp	r6, #0
 800b038:	db05      	blt.n	800b046 <_printf_i+0x10e>
 800b03a:	6821      	ldr	r1, [r4, #0]
 800b03c:	432e      	orrs	r6, r5
 800b03e:	f021 0104 	bic.w	r1, r1, #4
 800b042:	6021      	str	r1, [r4, #0]
 800b044:	d04b      	beq.n	800b0de <_printf_i+0x1a6>
 800b046:	4616      	mov	r6, r2
 800b048:	fbb5 f1f3 	udiv	r1, r5, r3
 800b04c:	fb03 5711 	mls	r7, r3, r1, r5
 800b050:	5dc7      	ldrb	r7, [r0, r7]
 800b052:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b056:	462f      	mov	r7, r5
 800b058:	42bb      	cmp	r3, r7
 800b05a:	460d      	mov	r5, r1
 800b05c:	d9f4      	bls.n	800b048 <_printf_i+0x110>
 800b05e:	2b08      	cmp	r3, #8
 800b060:	d10b      	bne.n	800b07a <_printf_i+0x142>
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	07df      	lsls	r7, r3, #31
 800b066:	d508      	bpl.n	800b07a <_printf_i+0x142>
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	6861      	ldr	r1, [r4, #4]
 800b06c:	4299      	cmp	r1, r3
 800b06e:	bfde      	ittt	le
 800b070:	2330      	movle	r3, #48	@ 0x30
 800b072:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b076:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b07a:	1b92      	subs	r2, r2, r6
 800b07c:	6122      	str	r2, [r4, #16]
 800b07e:	f8cd a000 	str.w	sl, [sp]
 800b082:	464b      	mov	r3, r9
 800b084:	aa03      	add	r2, sp, #12
 800b086:	4621      	mov	r1, r4
 800b088:	4640      	mov	r0, r8
 800b08a:	f7ff fee7 	bl	800ae5c <_printf_common>
 800b08e:	3001      	adds	r0, #1
 800b090:	d14a      	bne.n	800b128 <_printf_i+0x1f0>
 800b092:	f04f 30ff 	mov.w	r0, #4294967295
 800b096:	b004      	add	sp, #16
 800b098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	f043 0320 	orr.w	r3, r3, #32
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	4832      	ldr	r0, [pc, #200]	@ (800b170 <_printf_i+0x238>)
 800b0a6:	2778      	movs	r7, #120	@ 0x78
 800b0a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	6831      	ldr	r1, [r6, #0]
 800b0b0:	061f      	lsls	r7, r3, #24
 800b0b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0b6:	d402      	bmi.n	800b0be <_printf_i+0x186>
 800b0b8:	065f      	lsls	r7, r3, #25
 800b0ba:	bf48      	it	mi
 800b0bc:	b2ad      	uxthmi	r5, r5
 800b0be:	6031      	str	r1, [r6, #0]
 800b0c0:	07d9      	lsls	r1, r3, #31
 800b0c2:	bf44      	itt	mi
 800b0c4:	f043 0320 	orrmi.w	r3, r3, #32
 800b0c8:	6023      	strmi	r3, [r4, #0]
 800b0ca:	b11d      	cbz	r5, 800b0d4 <_printf_i+0x19c>
 800b0cc:	2310      	movs	r3, #16
 800b0ce:	e7ad      	b.n	800b02c <_printf_i+0xf4>
 800b0d0:	4826      	ldr	r0, [pc, #152]	@ (800b16c <_printf_i+0x234>)
 800b0d2:	e7e9      	b.n	800b0a8 <_printf_i+0x170>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	f023 0320 	bic.w	r3, r3, #32
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	e7f6      	b.n	800b0cc <_printf_i+0x194>
 800b0de:	4616      	mov	r6, r2
 800b0e0:	e7bd      	b.n	800b05e <_printf_i+0x126>
 800b0e2:	6833      	ldr	r3, [r6, #0]
 800b0e4:	6825      	ldr	r5, [r4, #0]
 800b0e6:	6961      	ldr	r1, [r4, #20]
 800b0e8:	1d18      	adds	r0, r3, #4
 800b0ea:	6030      	str	r0, [r6, #0]
 800b0ec:	062e      	lsls	r6, r5, #24
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	d501      	bpl.n	800b0f6 <_printf_i+0x1be>
 800b0f2:	6019      	str	r1, [r3, #0]
 800b0f4:	e002      	b.n	800b0fc <_printf_i+0x1c4>
 800b0f6:	0668      	lsls	r0, r5, #25
 800b0f8:	d5fb      	bpl.n	800b0f2 <_printf_i+0x1ba>
 800b0fa:	8019      	strh	r1, [r3, #0]
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	6123      	str	r3, [r4, #16]
 800b100:	4616      	mov	r6, r2
 800b102:	e7bc      	b.n	800b07e <_printf_i+0x146>
 800b104:	6833      	ldr	r3, [r6, #0]
 800b106:	1d1a      	adds	r2, r3, #4
 800b108:	6032      	str	r2, [r6, #0]
 800b10a:	681e      	ldr	r6, [r3, #0]
 800b10c:	6862      	ldr	r2, [r4, #4]
 800b10e:	2100      	movs	r1, #0
 800b110:	4630      	mov	r0, r6
 800b112:	f7f5 f85d 	bl	80001d0 <memchr>
 800b116:	b108      	cbz	r0, 800b11c <_printf_i+0x1e4>
 800b118:	1b80      	subs	r0, r0, r6
 800b11a:	6060      	str	r0, [r4, #4]
 800b11c:	6863      	ldr	r3, [r4, #4]
 800b11e:	6123      	str	r3, [r4, #16]
 800b120:	2300      	movs	r3, #0
 800b122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b126:	e7aa      	b.n	800b07e <_printf_i+0x146>
 800b128:	6923      	ldr	r3, [r4, #16]
 800b12a:	4632      	mov	r2, r6
 800b12c:	4649      	mov	r1, r9
 800b12e:	4640      	mov	r0, r8
 800b130:	47d0      	blx	sl
 800b132:	3001      	adds	r0, #1
 800b134:	d0ad      	beq.n	800b092 <_printf_i+0x15a>
 800b136:	6823      	ldr	r3, [r4, #0]
 800b138:	079b      	lsls	r3, r3, #30
 800b13a:	d413      	bmi.n	800b164 <_printf_i+0x22c>
 800b13c:	68e0      	ldr	r0, [r4, #12]
 800b13e:	9b03      	ldr	r3, [sp, #12]
 800b140:	4298      	cmp	r0, r3
 800b142:	bfb8      	it	lt
 800b144:	4618      	movlt	r0, r3
 800b146:	e7a6      	b.n	800b096 <_printf_i+0x15e>
 800b148:	2301      	movs	r3, #1
 800b14a:	4632      	mov	r2, r6
 800b14c:	4649      	mov	r1, r9
 800b14e:	4640      	mov	r0, r8
 800b150:	47d0      	blx	sl
 800b152:	3001      	adds	r0, #1
 800b154:	d09d      	beq.n	800b092 <_printf_i+0x15a>
 800b156:	3501      	adds	r5, #1
 800b158:	68e3      	ldr	r3, [r4, #12]
 800b15a:	9903      	ldr	r1, [sp, #12]
 800b15c:	1a5b      	subs	r3, r3, r1
 800b15e:	42ab      	cmp	r3, r5
 800b160:	dcf2      	bgt.n	800b148 <_printf_i+0x210>
 800b162:	e7eb      	b.n	800b13c <_printf_i+0x204>
 800b164:	2500      	movs	r5, #0
 800b166:	f104 0619 	add.w	r6, r4, #25
 800b16a:	e7f5      	b.n	800b158 <_printf_i+0x220>
 800b16c:	0800e577 	.word	0x0800e577
 800b170:	0800e588 	.word	0x0800e588

0800b174 <std>:
 800b174:	2300      	movs	r3, #0
 800b176:	b510      	push	{r4, lr}
 800b178:	4604      	mov	r4, r0
 800b17a:	e9c0 3300 	strd	r3, r3, [r0]
 800b17e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b182:	6083      	str	r3, [r0, #8]
 800b184:	8181      	strh	r1, [r0, #12]
 800b186:	6643      	str	r3, [r0, #100]	@ 0x64
 800b188:	81c2      	strh	r2, [r0, #14]
 800b18a:	6183      	str	r3, [r0, #24]
 800b18c:	4619      	mov	r1, r3
 800b18e:	2208      	movs	r2, #8
 800b190:	305c      	adds	r0, #92	@ 0x5c
 800b192:	f000 f92a 	bl	800b3ea <memset>
 800b196:	4b0d      	ldr	r3, [pc, #52]	@ (800b1cc <std+0x58>)
 800b198:	6263      	str	r3, [r4, #36]	@ 0x24
 800b19a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d0 <std+0x5c>)
 800b19c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b19e:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d4 <std+0x60>)
 800b1a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1d8 <std+0x64>)
 800b1a4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1dc <std+0x68>)
 800b1a8:	6224      	str	r4, [r4, #32]
 800b1aa:	429c      	cmp	r4, r3
 800b1ac:	d006      	beq.n	800b1bc <std+0x48>
 800b1ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1b2:	4294      	cmp	r4, r2
 800b1b4:	d002      	beq.n	800b1bc <std+0x48>
 800b1b6:	33d0      	adds	r3, #208	@ 0xd0
 800b1b8:	429c      	cmp	r4, r3
 800b1ba:	d105      	bne.n	800b1c8 <std+0x54>
 800b1bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c4:	f000 b98e 	b.w	800b4e4 <__retarget_lock_init_recursive>
 800b1c8:	bd10      	pop	{r4, pc}
 800b1ca:	bf00      	nop
 800b1cc:	0800b365 	.word	0x0800b365
 800b1d0:	0800b387 	.word	0x0800b387
 800b1d4:	0800b3bf 	.word	0x0800b3bf
 800b1d8:	0800b3e3 	.word	0x0800b3e3
 800b1dc:	20004d5c 	.word	0x20004d5c

0800b1e0 <stdio_exit_handler>:
 800b1e0:	4a02      	ldr	r2, [pc, #8]	@ (800b1ec <stdio_exit_handler+0xc>)
 800b1e2:	4903      	ldr	r1, [pc, #12]	@ (800b1f0 <stdio_exit_handler+0x10>)
 800b1e4:	4803      	ldr	r0, [pc, #12]	@ (800b1f4 <stdio_exit_handler+0x14>)
 800b1e6:	f000 b869 	b.w	800b2bc <_fwalk_sglue>
 800b1ea:	bf00      	nop
 800b1ec:	2000002c 	.word	0x2000002c
 800b1f0:	0800ce65 	.word	0x0800ce65
 800b1f4:	2000003c 	.word	0x2000003c

0800b1f8 <cleanup_stdio>:
 800b1f8:	6841      	ldr	r1, [r0, #4]
 800b1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b22c <cleanup_stdio+0x34>)
 800b1fc:	4299      	cmp	r1, r3
 800b1fe:	b510      	push	{r4, lr}
 800b200:	4604      	mov	r4, r0
 800b202:	d001      	beq.n	800b208 <cleanup_stdio+0x10>
 800b204:	f001 fe2e 	bl	800ce64 <_fflush_r>
 800b208:	68a1      	ldr	r1, [r4, #8]
 800b20a:	4b09      	ldr	r3, [pc, #36]	@ (800b230 <cleanup_stdio+0x38>)
 800b20c:	4299      	cmp	r1, r3
 800b20e:	d002      	beq.n	800b216 <cleanup_stdio+0x1e>
 800b210:	4620      	mov	r0, r4
 800b212:	f001 fe27 	bl	800ce64 <_fflush_r>
 800b216:	68e1      	ldr	r1, [r4, #12]
 800b218:	4b06      	ldr	r3, [pc, #24]	@ (800b234 <cleanup_stdio+0x3c>)
 800b21a:	4299      	cmp	r1, r3
 800b21c:	d004      	beq.n	800b228 <cleanup_stdio+0x30>
 800b21e:	4620      	mov	r0, r4
 800b220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b224:	f001 be1e 	b.w	800ce64 <_fflush_r>
 800b228:	bd10      	pop	{r4, pc}
 800b22a:	bf00      	nop
 800b22c:	20004d5c 	.word	0x20004d5c
 800b230:	20004dc4 	.word	0x20004dc4
 800b234:	20004e2c 	.word	0x20004e2c

0800b238 <global_stdio_init.part.0>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	4b0b      	ldr	r3, [pc, #44]	@ (800b268 <global_stdio_init.part.0+0x30>)
 800b23c:	4c0b      	ldr	r4, [pc, #44]	@ (800b26c <global_stdio_init.part.0+0x34>)
 800b23e:	4a0c      	ldr	r2, [pc, #48]	@ (800b270 <global_stdio_init.part.0+0x38>)
 800b240:	601a      	str	r2, [r3, #0]
 800b242:	4620      	mov	r0, r4
 800b244:	2200      	movs	r2, #0
 800b246:	2104      	movs	r1, #4
 800b248:	f7ff ff94 	bl	800b174 <std>
 800b24c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b250:	2201      	movs	r2, #1
 800b252:	2109      	movs	r1, #9
 800b254:	f7ff ff8e 	bl	800b174 <std>
 800b258:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b25c:	2202      	movs	r2, #2
 800b25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b262:	2112      	movs	r1, #18
 800b264:	f7ff bf86 	b.w	800b174 <std>
 800b268:	20004e94 	.word	0x20004e94
 800b26c:	20004d5c 	.word	0x20004d5c
 800b270:	0800b1e1 	.word	0x0800b1e1

0800b274 <__sfp_lock_acquire>:
 800b274:	4801      	ldr	r0, [pc, #4]	@ (800b27c <__sfp_lock_acquire+0x8>)
 800b276:	f000 b936 	b.w	800b4e6 <__retarget_lock_acquire_recursive>
 800b27a:	bf00      	nop
 800b27c:	20004e9d 	.word	0x20004e9d

0800b280 <__sfp_lock_release>:
 800b280:	4801      	ldr	r0, [pc, #4]	@ (800b288 <__sfp_lock_release+0x8>)
 800b282:	f000 b931 	b.w	800b4e8 <__retarget_lock_release_recursive>
 800b286:	bf00      	nop
 800b288:	20004e9d 	.word	0x20004e9d

0800b28c <__sinit>:
 800b28c:	b510      	push	{r4, lr}
 800b28e:	4604      	mov	r4, r0
 800b290:	f7ff fff0 	bl	800b274 <__sfp_lock_acquire>
 800b294:	6a23      	ldr	r3, [r4, #32]
 800b296:	b11b      	cbz	r3, 800b2a0 <__sinit+0x14>
 800b298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b29c:	f7ff bff0 	b.w	800b280 <__sfp_lock_release>
 800b2a0:	4b04      	ldr	r3, [pc, #16]	@ (800b2b4 <__sinit+0x28>)
 800b2a2:	6223      	str	r3, [r4, #32]
 800b2a4:	4b04      	ldr	r3, [pc, #16]	@ (800b2b8 <__sinit+0x2c>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1f5      	bne.n	800b298 <__sinit+0xc>
 800b2ac:	f7ff ffc4 	bl	800b238 <global_stdio_init.part.0>
 800b2b0:	e7f2      	b.n	800b298 <__sinit+0xc>
 800b2b2:	bf00      	nop
 800b2b4:	0800b1f9 	.word	0x0800b1f9
 800b2b8:	20004e94 	.word	0x20004e94

0800b2bc <_fwalk_sglue>:
 800b2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c0:	4607      	mov	r7, r0
 800b2c2:	4688      	mov	r8, r1
 800b2c4:	4614      	mov	r4, r2
 800b2c6:	2600      	movs	r6, #0
 800b2c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2cc:	f1b9 0901 	subs.w	r9, r9, #1
 800b2d0:	d505      	bpl.n	800b2de <_fwalk_sglue+0x22>
 800b2d2:	6824      	ldr	r4, [r4, #0]
 800b2d4:	2c00      	cmp	r4, #0
 800b2d6:	d1f7      	bne.n	800b2c8 <_fwalk_sglue+0xc>
 800b2d8:	4630      	mov	r0, r6
 800b2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2de:	89ab      	ldrh	r3, [r5, #12]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d907      	bls.n	800b2f4 <_fwalk_sglue+0x38>
 800b2e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	d003      	beq.n	800b2f4 <_fwalk_sglue+0x38>
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	47c0      	blx	r8
 800b2f2:	4306      	orrs	r6, r0
 800b2f4:	3568      	adds	r5, #104	@ 0x68
 800b2f6:	e7e9      	b.n	800b2cc <_fwalk_sglue+0x10>

0800b2f8 <sniprintf>:
 800b2f8:	b40c      	push	{r2, r3}
 800b2fa:	b530      	push	{r4, r5, lr}
 800b2fc:	4b18      	ldr	r3, [pc, #96]	@ (800b360 <sniprintf+0x68>)
 800b2fe:	1e0c      	subs	r4, r1, #0
 800b300:	681d      	ldr	r5, [r3, #0]
 800b302:	b09d      	sub	sp, #116	@ 0x74
 800b304:	da08      	bge.n	800b318 <sniprintf+0x20>
 800b306:	238b      	movs	r3, #139	@ 0x8b
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	f04f 30ff 	mov.w	r0, #4294967295
 800b30e:	b01d      	add	sp, #116	@ 0x74
 800b310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b314:	b002      	add	sp, #8
 800b316:	4770      	bx	lr
 800b318:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b31c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b320:	f04f 0300 	mov.w	r3, #0
 800b324:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b326:	bf14      	ite	ne
 800b328:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b32c:	4623      	moveq	r3, r4
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	9307      	str	r3, [sp, #28]
 800b332:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b336:	9002      	str	r0, [sp, #8]
 800b338:	9006      	str	r0, [sp, #24]
 800b33a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b33e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b340:	ab21      	add	r3, sp, #132	@ 0x84
 800b342:	a902      	add	r1, sp, #8
 800b344:	4628      	mov	r0, r5
 800b346:	9301      	str	r3, [sp, #4]
 800b348:	f001 fc0c 	bl	800cb64 <_svfiprintf_r>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	bfbc      	itt	lt
 800b350:	238b      	movlt	r3, #139	@ 0x8b
 800b352:	602b      	strlt	r3, [r5, #0]
 800b354:	2c00      	cmp	r4, #0
 800b356:	d0da      	beq.n	800b30e <sniprintf+0x16>
 800b358:	9b02      	ldr	r3, [sp, #8]
 800b35a:	2200      	movs	r2, #0
 800b35c:	701a      	strb	r2, [r3, #0]
 800b35e:	e7d6      	b.n	800b30e <sniprintf+0x16>
 800b360:	20000038 	.word	0x20000038

0800b364 <__sread>:
 800b364:	b510      	push	{r4, lr}
 800b366:	460c      	mov	r4, r1
 800b368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36c:	f000 f86c 	bl	800b448 <_read_r>
 800b370:	2800      	cmp	r0, #0
 800b372:	bfab      	itete	ge
 800b374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b376:	89a3      	ldrhlt	r3, [r4, #12]
 800b378:	181b      	addge	r3, r3, r0
 800b37a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b37e:	bfac      	ite	ge
 800b380:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b382:	81a3      	strhlt	r3, [r4, #12]
 800b384:	bd10      	pop	{r4, pc}

0800b386 <__swrite>:
 800b386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38a:	461f      	mov	r7, r3
 800b38c:	898b      	ldrh	r3, [r1, #12]
 800b38e:	05db      	lsls	r3, r3, #23
 800b390:	4605      	mov	r5, r0
 800b392:	460c      	mov	r4, r1
 800b394:	4616      	mov	r6, r2
 800b396:	d505      	bpl.n	800b3a4 <__swrite+0x1e>
 800b398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39c:	2302      	movs	r3, #2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f000 f840 	bl	800b424 <_lseek_r>
 800b3a4:	89a3      	ldrh	r3, [r4, #12]
 800b3a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3ae:	81a3      	strh	r3, [r4, #12]
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ba:	f000 b857 	b.w	800b46c <_write_r>

0800b3be <__sseek>:
 800b3be:	b510      	push	{r4, lr}
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c6:	f000 f82d 	bl	800b424 <_lseek_r>
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	bf15      	itete	ne
 800b3d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3da:	81a3      	strheq	r3, [r4, #12]
 800b3dc:	bf18      	it	ne
 800b3de:	81a3      	strhne	r3, [r4, #12]
 800b3e0:	bd10      	pop	{r4, pc}

0800b3e2 <__sclose>:
 800b3e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e6:	f000 b80d 	b.w	800b404 <_close_r>

0800b3ea <memset>:
 800b3ea:	4402      	add	r2, r0
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d100      	bne.n	800b3f4 <memset+0xa>
 800b3f2:	4770      	bx	lr
 800b3f4:	f803 1b01 	strb.w	r1, [r3], #1
 800b3f8:	e7f9      	b.n	800b3ee <memset+0x4>
	...

0800b3fc <_localeconv_r>:
 800b3fc:	4800      	ldr	r0, [pc, #0]	@ (800b400 <_localeconv_r+0x4>)
 800b3fe:	4770      	bx	lr
 800b400:	20000178 	.word	0x20000178

0800b404 <_close_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4d06      	ldr	r5, [pc, #24]	@ (800b420 <_close_r+0x1c>)
 800b408:	2300      	movs	r3, #0
 800b40a:	4604      	mov	r4, r0
 800b40c:	4608      	mov	r0, r1
 800b40e:	602b      	str	r3, [r5, #0]
 800b410:	f7f8 f9de 	bl	80037d0 <_close>
 800b414:	1c43      	adds	r3, r0, #1
 800b416:	d102      	bne.n	800b41e <_close_r+0x1a>
 800b418:	682b      	ldr	r3, [r5, #0]
 800b41a:	b103      	cbz	r3, 800b41e <_close_r+0x1a>
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	bd38      	pop	{r3, r4, r5, pc}
 800b420:	20004e98 	.word	0x20004e98

0800b424 <_lseek_r>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	4d07      	ldr	r5, [pc, #28]	@ (800b444 <_lseek_r+0x20>)
 800b428:	4604      	mov	r4, r0
 800b42a:	4608      	mov	r0, r1
 800b42c:	4611      	mov	r1, r2
 800b42e:	2200      	movs	r2, #0
 800b430:	602a      	str	r2, [r5, #0]
 800b432:	461a      	mov	r2, r3
 800b434:	f7f8 f9f3 	bl	800381e <_lseek>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d102      	bne.n	800b442 <_lseek_r+0x1e>
 800b43c:	682b      	ldr	r3, [r5, #0]
 800b43e:	b103      	cbz	r3, 800b442 <_lseek_r+0x1e>
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	20004e98 	.word	0x20004e98

0800b448 <_read_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4d07      	ldr	r5, [pc, #28]	@ (800b468 <_read_r+0x20>)
 800b44c:	4604      	mov	r4, r0
 800b44e:	4608      	mov	r0, r1
 800b450:	4611      	mov	r1, r2
 800b452:	2200      	movs	r2, #0
 800b454:	602a      	str	r2, [r5, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	f7f8 f981 	bl	800375e <_read>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d102      	bne.n	800b466 <_read_r+0x1e>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	b103      	cbz	r3, 800b466 <_read_r+0x1e>
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	bd38      	pop	{r3, r4, r5, pc}
 800b468:	20004e98 	.word	0x20004e98

0800b46c <_write_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4d07      	ldr	r5, [pc, #28]	@ (800b48c <_write_r+0x20>)
 800b470:	4604      	mov	r4, r0
 800b472:	4608      	mov	r0, r1
 800b474:	4611      	mov	r1, r2
 800b476:	2200      	movs	r2, #0
 800b478:	602a      	str	r2, [r5, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	f7f8 f98c 	bl	8003798 <_write>
 800b480:	1c43      	adds	r3, r0, #1
 800b482:	d102      	bne.n	800b48a <_write_r+0x1e>
 800b484:	682b      	ldr	r3, [r5, #0]
 800b486:	b103      	cbz	r3, 800b48a <_write_r+0x1e>
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	bd38      	pop	{r3, r4, r5, pc}
 800b48c:	20004e98 	.word	0x20004e98

0800b490 <__errno>:
 800b490:	4b01      	ldr	r3, [pc, #4]	@ (800b498 <__errno+0x8>)
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	20000038 	.word	0x20000038

0800b49c <__libc_init_array>:
 800b49c:	b570      	push	{r4, r5, r6, lr}
 800b49e:	4d0d      	ldr	r5, [pc, #52]	@ (800b4d4 <__libc_init_array+0x38>)
 800b4a0:	4c0d      	ldr	r4, [pc, #52]	@ (800b4d8 <__libc_init_array+0x3c>)
 800b4a2:	1b64      	subs	r4, r4, r5
 800b4a4:	10a4      	asrs	r4, r4, #2
 800b4a6:	2600      	movs	r6, #0
 800b4a8:	42a6      	cmp	r6, r4
 800b4aa:	d109      	bne.n	800b4c0 <__libc_init_array+0x24>
 800b4ac:	4d0b      	ldr	r5, [pc, #44]	@ (800b4dc <__libc_init_array+0x40>)
 800b4ae:	4c0c      	ldr	r4, [pc, #48]	@ (800b4e0 <__libc_init_array+0x44>)
 800b4b0:	f002 f868 	bl	800d584 <_init>
 800b4b4:	1b64      	subs	r4, r4, r5
 800b4b6:	10a4      	asrs	r4, r4, #2
 800b4b8:	2600      	movs	r6, #0
 800b4ba:	42a6      	cmp	r6, r4
 800b4bc:	d105      	bne.n	800b4ca <__libc_init_array+0x2e>
 800b4be:	bd70      	pop	{r4, r5, r6, pc}
 800b4c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4c4:	4798      	blx	r3
 800b4c6:	3601      	adds	r6, #1
 800b4c8:	e7ee      	b.n	800b4a8 <__libc_init_array+0xc>
 800b4ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ce:	4798      	blx	r3
 800b4d0:	3601      	adds	r6, #1
 800b4d2:	e7f2      	b.n	800b4ba <__libc_init_array+0x1e>
 800b4d4:	0800e7e0 	.word	0x0800e7e0
 800b4d8:	0800e7e0 	.word	0x0800e7e0
 800b4dc:	0800e7e0 	.word	0x0800e7e0
 800b4e0:	0800e7e4 	.word	0x0800e7e4

0800b4e4 <__retarget_lock_init_recursive>:
 800b4e4:	4770      	bx	lr

0800b4e6 <__retarget_lock_acquire_recursive>:
 800b4e6:	4770      	bx	lr

0800b4e8 <__retarget_lock_release_recursive>:
 800b4e8:	4770      	bx	lr

0800b4ea <memcpy>:
 800b4ea:	440a      	add	r2, r1
 800b4ec:	4291      	cmp	r1, r2
 800b4ee:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4f2:	d100      	bne.n	800b4f6 <memcpy+0xc>
 800b4f4:	4770      	bx	lr
 800b4f6:	b510      	push	{r4, lr}
 800b4f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b500:	4291      	cmp	r1, r2
 800b502:	d1f9      	bne.n	800b4f8 <memcpy+0xe>
 800b504:	bd10      	pop	{r4, pc}

0800b506 <quorem>:
 800b506:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50a:	6903      	ldr	r3, [r0, #16]
 800b50c:	690c      	ldr	r4, [r1, #16]
 800b50e:	42a3      	cmp	r3, r4
 800b510:	4607      	mov	r7, r0
 800b512:	db7e      	blt.n	800b612 <quorem+0x10c>
 800b514:	3c01      	subs	r4, #1
 800b516:	f101 0814 	add.w	r8, r1, #20
 800b51a:	00a3      	lsls	r3, r4, #2
 800b51c:	f100 0514 	add.w	r5, r0, #20
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b526:	9301      	str	r3, [sp, #4]
 800b528:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b52c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b530:	3301      	adds	r3, #1
 800b532:	429a      	cmp	r2, r3
 800b534:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b538:	fbb2 f6f3 	udiv	r6, r2, r3
 800b53c:	d32e      	bcc.n	800b59c <quorem+0x96>
 800b53e:	f04f 0a00 	mov.w	sl, #0
 800b542:	46c4      	mov	ip, r8
 800b544:	46ae      	mov	lr, r5
 800b546:	46d3      	mov	fp, sl
 800b548:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b54c:	b298      	uxth	r0, r3
 800b54e:	fb06 a000 	mla	r0, r6, r0, sl
 800b552:	0c02      	lsrs	r2, r0, #16
 800b554:	0c1b      	lsrs	r3, r3, #16
 800b556:	fb06 2303 	mla	r3, r6, r3, r2
 800b55a:	f8de 2000 	ldr.w	r2, [lr]
 800b55e:	b280      	uxth	r0, r0
 800b560:	b292      	uxth	r2, r2
 800b562:	1a12      	subs	r2, r2, r0
 800b564:	445a      	add	r2, fp
 800b566:	f8de 0000 	ldr.w	r0, [lr]
 800b56a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b56e:	b29b      	uxth	r3, r3
 800b570:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b574:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b578:	b292      	uxth	r2, r2
 800b57a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b57e:	45e1      	cmp	r9, ip
 800b580:	f84e 2b04 	str.w	r2, [lr], #4
 800b584:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b588:	d2de      	bcs.n	800b548 <quorem+0x42>
 800b58a:	9b00      	ldr	r3, [sp, #0]
 800b58c:	58eb      	ldr	r3, [r5, r3]
 800b58e:	b92b      	cbnz	r3, 800b59c <quorem+0x96>
 800b590:	9b01      	ldr	r3, [sp, #4]
 800b592:	3b04      	subs	r3, #4
 800b594:	429d      	cmp	r5, r3
 800b596:	461a      	mov	r2, r3
 800b598:	d32f      	bcc.n	800b5fa <quorem+0xf4>
 800b59a:	613c      	str	r4, [r7, #16]
 800b59c:	4638      	mov	r0, r7
 800b59e:	f001 f97d 	bl	800c89c <__mcmp>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	db25      	blt.n	800b5f2 <quorem+0xec>
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5ae:	f8d1 c000 	ldr.w	ip, [r1]
 800b5b2:	fa1f fe82 	uxth.w	lr, r2
 800b5b6:	fa1f f38c 	uxth.w	r3, ip
 800b5ba:	eba3 030e 	sub.w	r3, r3, lr
 800b5be:	4403      	add	r3, r0
 800b5c0:	0c12      	lsrs	r2, r2, #16
 800b5c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b5c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5d0:	45c1      	cmp	r9, r8
 800b5d2:	f841 3b04 	str.w	r3, [r1], #4
 800b5d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b5da:	d2e6      	bcs.n	800b5aa <quorem+0xa4>
 800b5dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5e4:	b922      	cbnz	r2, 800b5f0 <quorem+0xea>
 800b5e6:	3b04      	subs	r3, #4
 800b5e8:	429d      	cmp	r5, r3
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	d30b      	bcc.n	800b606 <quorem+0x100>
 800b5ee:	613c      	str	r4, [r7, #16]
 800b5f0:	3601      	adds	r6, #1
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	b003      	add	sp, #12
 800b5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5fa:	6812      	ldr	r2, [r2, #0]
 800b5fc:	3b04      	subs	r3, #4
 800b5fe:	2a00      	cmp	r2, #0
 800b600:	d1cb      	bne.n	800b59a <quorem+0x94>
 800b602:	3c01      	subs	r4, #1
 800b604:	e7c6      	b.n	800b594 <quorem+0x8e>
 800b606:	6812      	ldr	r2, [r2, #0]
 800b608:	3b04      	subs	r3, #4
 800b60a:	2a00      	cmp	r2, #0
 800b60c:	d1ef      	bne.n	800b5ee <quorem+0xe8>
 800b60e:	3c01      	subs	r4, #1
 800b610:	e7ea      	b.n	800b5e8 <quorem+0xe2>
 800b612:	2000      	movs	r0, #0
 800b614:	e7ee      	b.n	800b5f4 <quorem+0xee>
	...

0800b618 <_dtoa_r>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	69c7      	ldr	r7, [r0, #28]
 800b61e:	b097      	sub	sp, #92	@ 0x5c
 800b620:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b624:	ec55 4b10 	vmov	r4, r5, d0
 800b628:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b62a:	9107      	str	r1, [sp, #28]
 800b62c:	4681      	mov	r9, r0
 800b62e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b630:	9311      	str	r3, [sp, #68]	@ 0x44
 800b632:	b97f      	cbnz	r7, 800b654 <_dtoa_r+0x3c>
 800b634:	2010      	movs	r0, #16
 800b636:	f000 fe09 	bl	800c24c <malloc>
 800b63a:	4602      	mov	r2, r0
 800b63c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b640:	b920      	cbnz	r0, 800b64c <_dtoa_r+0x34>
 800b642:	4ba9      	ldr	r3, [pc, #676]	@ (800b8e8 <_dtoa_r+0x2d0>)
 800b644:	21ef      	movs	r1, #239	@ 0xef
 800b646:	48a9      	ldr	r0, [pc, #676]	@ (800b8ec <_dtoa_r+0x2d4>)
 800b648:	f001 fc5e 	bl	800cf08 <__assert_func>
 800b64c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b650:	6007      	str	r7, [r0, #0]
 800b652:	60c7      	str	r7, [r0, #12]
 800b654:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b658:	6819      	ldr	r1, [r3, #0]
 800b65a:	b159      	cbz	r1, 800b674 <_dtoa_r+0x5c>
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	604a      	str	r2, [r1, #4]
 800b660:	2301      	movs	r3, #1
 800b662:	4093      	lsls	r3, r2
 800b664:	608b      	str	r3, [r1, #8]
 800b666:	4648      	mov	r0, r9
 800b668:	f000 fee6 	bl	800c438 <_Bfree>
 800b66c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b670:	2200      	movs	r2, #0
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	1e2b      	subs	r3, r5, #0
 800b676:	bfb9      	ittee	lt
 800b678:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b67c:	9305      	strlt	r3, [sp, #20]
 800b67e:	2300      	movge	r3, #0
 800b680:	6033      	strge	r3, [r6, #0]
 800b682:	9f05      	ldr	r7, [sp, #20]
 800b684:	4b9a      	ldr	r3, [pc, #616]	@ (800b8f0 <_dtoa_r+0x2d8>)
 800b686:	bfbc      	itt	lt
 800b688:	2201      	movlt	r2, #1
 800b68a:	6032      	strlt	r2, [r6, #0]
 800b68c:	43bb      	bics	r3, r7
 800b68e:	d112      	bne.n	800b6b6 <_dtoa_r+0x9e>
 800b690:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b692:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b696:	6013      	str	r3, [r2, #0]
 800b698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b69c:	4323      	orrs	r3, r4
 800b69e:	f000 855a 	beq.w	800c156 <_dtoa_r+0xb3e>
 800b6a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b6a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b904 <_dtoa_r+0x2ec>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 855c 	beq.w	800c166 <_dtoa_r+0xb4e>
 800b6ae:	f10a 0303 	add.w	r3, sl, #3
 800b6b2:	f000 bd56 	b.w	800c162 <_dtoa_r+0xb4a>
 800b6b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	ec51 0b17 	vmov	r0, r1, d7
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b6c6:	f7f5 f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	b158      	cbz	r0, 800b6e6 <_dtoa_r+0xce>
 800b6ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b6d6:	b113      	cbz	r3, 800b6de <_dtoa_r+0xc6>
 800b6d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b6da:	4b86      	ldr	r3, [pc, #536]	@ (800b8f4 <_dtoa_r+0x2dc>)
 800b6dc:	6013      	str	r3, [r2, #0]
 800b6de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b908 <_dtoa_r+0x2f0>
 800b6e2:	f000 bd40 	b.w	800c166 <_dtoa_r+0xb4e>
 800b6e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b6ea:	aa14      	add	r2, sp, #80	@ 0x50
 800b6ec:	a915      	add	r1, sp, #84	@ 0x54
 800b6ee:	4648      	mov	r0, r9
 800b6f0:	f001 f984 	bl	800c9fc <__d2b>
 800b6f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b6f8:	9002      	str	r0, [sp, #8]
 800b6fa:	2e00      	cmp	r6, #0
 800b6fc:	d078      	beq.n	800b7f0 <_dtoa_r+0x1d8>
 800b6fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b700:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b708:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b70c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b710:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b714:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b718:	4619      	mov	r1, r3
 800b71a:	2200      	movs	r2, #0
 800b71c:	4b76      	ldr	r3, [pc, #472]	@ (800b8f8 <_dtoa_r+0x2e0>)
 800b71e:	f7f4 fdb3 	bl	8000288 <__aeabi_dsub>
 800b722:	a36b      	add	r3, pc, #428	@ (adr r3, 800b8d0 <_dtoa_r+0x2b8>)
 800b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b728:	f7f4 ff66 	bl	80005f8 <__aeabi_dmul>
 800b72c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b8d8 <_dtoa_r+0x2c0>)
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	f7f4 fdab 	bl	800028c <__adddf3>
 800b736:	4604      	mov	r4, r0
 800b738:	4630      	mov	r0, r6
 800b73a:	460d      	mov	r5, r1
 800b73c:	f7f4 fef2 	bl	8000524 <__aeabi_i2d>
 800b740:	a367      	add	r3, pc, #412	@ (adr r3, 800b8e0 <_dtoa_r+0x2c8>)
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	f7f4 ff57 	bl	80005f8 <__aeabi_dmul>
 800b74a:	4602      	mov	r2, r0
 800b74c:	460b      	mov	r3, r1
 800b74e:	4620      	mov	r0, r4
 800b750:	4629      	mov	r1, r5
 800b752:	f7f4 fd9b 	bl	800028c <__adddf3>
 800b756:	4604      	mov	r4, r0
 800b758:	460d      	mov	r5, r1
 800b75a:	f7f5 f9fd 	bl	8000b58 <__aeabi_d2iz>
 800b75e:	2200      	movs	r2, #0
 800b760:	4607      	mov	r7, r0
 800b762:	2300      	movs	r3, #0
 800b764:	4620      	mov	r0, r4
 800b766:	4629      	mov	r1, r5
 800b768:	f7f5 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800b76c:	b140      	cbz	r0, 800b780 <_dtoa_r+0x168>
 800b76e:	4638      	mov	r0, r7
 800b770:	f7f4 fed8 	bl	8000524 <__aeabi_i2d>
 800b774:	4622      	mov	r2, r4
 800b776:	462b      	mov	r3, r5
 800b778:	f7f5 f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b77c:	b900      	cbnz	r0, 800b780 <_dtoa_r+0x168>
 800b77e:	3f01      	subs	r7, #1
 800b780:	2f16      	cmp	r7, #22
 800b782:	d852      	bhi.n	800b82a <_dtoa_r+0x212>
 800b784:	4b5d      	ldr	r3, [pc, #372]	@ (800b8fc <_dtoa_r+0x2e4>)
 800b786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b792:	f7f5 f9a3 	bl	8000adc <__aeabi_dcmplt>
 800b796:	2800      	cmp	r0, #0
 800b798:	d049      	beq.n	800b82e <_dtoa_r+0x216>
 800b79a:	3f01      	subs	r7, #1
 800b79c:	2300      	movs	r3, #0
 800b79e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7a2:	1b9b      	subs	r3, r3, r6
 800b7a4:	1e5a      	subs	r2, r3, #1
 800b7a6:	bf45      	ittet	mi
 800b7a8:	f1c3 0301 	rsbmi	r3, r3, #1
 800b7ac:	9300      	strmi	r3, [sp, #0]
 800b7ae:	2300      	movpl	r3, #0
 800b7b0:	2300      	movmi	r3, #0
 800b7b2:	9206      	str	r2, [sp, #24]
 800b7b4:	bf54      	ite	pl
 800b7b6:	9300      	strpl	r3, [sp, #0]
 800b7b8:	9306      	strmi	r3, [sp, #24]
 800b7ba:	2f00      	cmp	r7, #0
 800b7bc:	db39      	blt.n	800b832 <_dtoa_r+0x21a>
 800b7be:	9b06      	ldr	r3, [sp, #24]
 800b7c0:	970d      	str	r7, [sp, #52]	@ 0x34
 800b7c2:	443b      	add	r3, r7
 800b7c4:	9306      	str	r3, [sp, #24]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9308      	str	r3, [sp, #32]
 800b7ca:	9b07      	ldr	r3, [sp, #28]
 800b7cc:	2b09      	cmp	r3, #9
 800b7ce:	d863      	bhi.n	800b898 <_dtoa_r+0x280>
 800b7d0:	2b05      	cmp	r3, #5
 800b7d2:	bfc4      	itt	gt
 800b7d4:	3b04      	subgt	r3, #4
 800b7d6:	9307      	strgt	r3, [sp, #28]
 800b7d8:	9b07      	ldr	r3, [sp, #28]
 800b7da:	f1a3 0302 	sub.w	r3, r3, #2
 800b7de:	bfcc      	ite	gt
 800b7e0:	2400      	movgt	r4, #0
 800b7e2:	2401      	movle	r4, #1
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d863      	bhi.n	800b8b0 <_dtoa_r+0x298>
 800b7e8:	e8df f003 	tbb	[pc, r3]
 800b7ec:	2b375452 	.word	0x2b375452
 800b7f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b7f4:	441e      	add	r6, r3
 800b7f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b7fa:	2b20      	cmp	r3, #32
 800b7fc:	bfc1      	itttt	gt
 800b7fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b802:	409f      	lslgt	r7, r3
 800b804:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b808:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b80c:	bfd6      	itet	le
 800b80e:	f1c3 0320 	rsble	r3, r3, #32
 800b812:	ea47 0003 	orrgt.w	r0, r7, r3
 800b816:	fa04 f003 	lslle.w	r0, r4, r3
 800b81a:	f7f4 fe73 	bl	8000504 <__aeabi_ui2d>
 800b81e:	2201      	movs	r2, #1
 800b820:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b824:	3e01      	subs	r6, #1
 800b826:	9212      	str	r2, [sp, #72]	@ 0x48
 800b828:	e776      	b.n	800b718 <_dtoa_r+0x100>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e7b7      	b.n	800b79e <_dtoa_r+0x186>
 800b82e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b830:	e7b6      	b.n	800b7a0 <_dtoa_r+0x188>
 800b832:	9b00      	ldr	r3, [sp, #0]
 800b834:	1bdb      	subs	r3, r3, r7
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	427b      	negs	r3, r7
 800b83a:	9308      	str	r3, [sp, #32]
 800b83c:	2300      	movs	r3, #0
 800b83e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b840:	e7c3      	b.n	800b7ca <_dtoa_r+0x1b2>
 800b842:	2301      	movs	r3, #1
 800b844:	9309      	str	r3, [sp, #36]	@ 0x24
 800b846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b848:	eb07 0b03 	add.w	fp, r7, r3
 800b84c:	f10b 0301 	add.w	r3, fp, #1
 800b850:	2b01      	cmp	r3, #1
 800b852:	9303      	str	r3, [sp, #12]
 800b854:	bfb8      	it	lt
 800b856:	2301      	movlt	r3, #1
 800b858:	e006      	b.n	800b868 <_dtoa_r+0x250>
 800b85a:	2301      	movs	r3, #1
 800b85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b85e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b860:	2b00      	cmp	r3, #0
 800b862:	dd28      	ble.n	800b8b6 <_dtoa_r+0x29e>
 800b864:	469b      	mov	fp, r3
 800b866:	9303      	str	r3, [sp, #12]
 800b868:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b86c:	2100      	movs	r1, #0
 800b86e:	2204      	movs	r2, #4
 800b870:	f102 0514 	add.w	r5, r2, #20
 800b874:	429d      	cmp	r5, r3
 800b876:	d926      	bls.n	800b8c6 <_dtoa_r+0x2ae>
 800b878:	6041      	str	r1, [r0, #4]
 800b87a:	4648      	mov	r0, r9
 800b87c:	f000 fd9c 	bl	800c3b8 <_Balloc>
 800b880:	4682      	mov	sl, r0
 800b882:	2800      	cmp	r0, #0
 800b884:	d142      	bne.n	800b90c <_dtoa_r+0x2f4>
 800b886:	4b1e      	ldr	r3, [pc, #120]	@ (800b900 <_dtoa_r+0x2e8>)
 800b888:	4602      	mov	r2, r0
 800b88a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b88e:	e6da      	b.n	800b646 <_dtoa_r+0x2e>
 800b890:	2300      	movs	r3, #0
 800b892:	e7e3      	b.n	800b85c <_dtoa_r+0x244>
 800b894:	2300      	movs	r3, #0
 800b896:	e7d5      	b.n	800b844 <_dtoa_r+0x22c>
 800b898:	2401      	movs	r4, #1
 800b89a:	2300      	movs	r3, #0
 800b89c:	9307      	str	r3, [sp, #28]
 800b89e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b8a0:	f04f 3bff 	mov.w	fp, #4294967295
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800b8aa:	2312      	movs	r3, #18
 800b8ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800b8ae:	e7db      	b.n	800b868 <_dtoa_r+0x250>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8b4:	e7f4      	b.n	800b8a0 <_dtoa_r+0x288>
 800b8b6:	f04f 0b01 	mov.w	fp, #1
 800b8ba:	f8cd b00c 	str.w	fp, [sp, #12]
 800b8be:	465b      	mov	r3, fp
 800b8c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b8c4:	e7d0      	b.n	800b868 <_dtoa_r+0x250>
 800b8c6:	3101      	adds	r1, #1
 800b8c8:	0052      	lsls	r2, r2, #1
 800b8ca:	e7d1      	b.n	800b870 <_dtoa_r+0x258>
 800b8cc:	f3af 8000 	nop.w
 800b8d0:	636f4361 	.word	0x636f4361
 800b8d4:	3fd287a7 	.word	0x3fd287a7
 800b8d8:	8b60c8b3 	.word	0x8b60c8b3
 800b8dc:	3fc68a28 	.word	0x3fc68a28
 800b8e0:	509f79fb 	.word	0x509f79fb
 800b8e4:	3fd34413 	.word	0x3fd34413
 800b8e8:	0800e5a6 	.word	0x0800e5a6
 800b8ec:	0800e5bd 	.word	0x0800e5bd
 800b8f0:	7ff00000 	.word	0x7ff00000
 800b8f4:	0800e576 	.word	0x0800e576
 800b8f8:	3ff80000 	.word	0x3ff80000
 800b8fc:	0800e710 	.word	0x0800e710
 800b900:	0800e615 	.word	0x0800e615
 800b904:	0800e5a2 	.word	0x0800e5a2
 800b908:	0800e575 	.word	0x0800e575
 800b90c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b910:	6018      	str	r0, [r3, #0]
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	2b0e      	cmp	r3, #14
 800b916:	f200 80a1 	bhi.w	800ba5c <_dtoa_r+0x444>
 800b91a:	2c00      	cmp	r4, #0
 800b91c:	f000 809e 	beq.w	800ba5c <_dtoa_r+0x444>
 800b920:	2f00      	cmp	r7, #0
 800b922:	dd33      	ble.n	800b98c <_dtoa_r+0x374>
 800b924:	4b9c      	ldr	r3, [pc, #624]	@ (800bb98 <_dtoa_r+0x580>)
 800b926:	f007 020f 	and.w	r2, r7, #15
 800b92a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b92e:	ed93 7b00 	vldr	d7, [r3]
 800b932:	05f8      	lsls	r0, r7, #23
 800b934:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b938:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b93c:	d516      	bpl.n	800b96c <_dtoa_r+0x354>
 800b93e:	4b97      	ldr	r3, [pc, #604]	@ (800bb9c <_dtoa_r+0x584>)
 800b940:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b944:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b948:	f7f4 ff80 	bl	800084c <__aeabi_ddiv>
 800b94c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b950:	f004 040f 	and.w	r4, r4, #15
 800b954:	2603      	movs	r6, #3
 800b956:	4d91      	ldr	r5, [pc, #580]	@ (800bb9c <_dtoa_r+0x584>)
 800b958:	b954      	cbnz	r4, 800b970 <_dtoa_r+0x358>
 800b95a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b95e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b962:	f7f4 ff73 	bl	800084c <__aeabi_ddiv>
 800b966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b96a:	e028      	b.n	800b9be <_dtoa_r+0x3a6>
 800b96c:	2602      	movs	r6, #2
 800b96e:	e7f2      	b.n	800b956 <_dtoa_r+0x33e>
 800b970:	07e1      	lsls	r1, r4, #31
 800b972:	d508      	bpl.n	800b986 <_dtoa_r+0x36e>
 800b974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b97c:	f7f4 fe3c 	bl	80005f8 <__aeabi_dmul>
 800b980:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b984:	3601      	adds	r6, #1
 800b986:	1064      	asrs	r4, r4, #1
 800b988:	3508      	adds	r5, #8
 800b98a:	e7e5      	b.n	800b958 <_dtoa_r+0x340>
 800b98c:	f000 80af 	beq.w	800baee <_dtoa_r+0x4d6>
 800b990:	427c      	negs	r4, r7
 800b992:	4b81      	ldr	r3, [pc, #516]	@ (800bb98 <_dtoa_r+0x580>)
 800b994:	4d81      	ldr	r5, [pc, #516]	@ (800bb9c <_dtoa_r+0x584>)
 800b996:	f004 020f 	and.w	r2, r4, #15
 800b99a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9a6:	f7f4 fe27 	bl	80005f8 <__aeabi_dmul>
 800b9aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9ae:	1124      	asrs	r4, r4, #4
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	2602      	movs	r6, #2
 800b9b4:	2c00      	cmp	r4, #0
 800b9b6:	f040 808f 	bne.w	800bad8 <_dtoa_r+0x4c0>
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1d3      	bne.n	800b966 <_dtoa_r+0x34e>
 800b9be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 8094 	beq.w	800baf2 <_dtoa_r+0x4da>
 800b9ca:	4b75      	ldr	r3, [pc, #468]	@ (800bba0 <_dtoa_r+0x588>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	f7f5 f883 	bl	8000adc <__aeabi_dcmplt>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f000 808b 	beq.w	800baf2 <_dtoa_r+0x4da>
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f000 8087 	beq.w	800baf2 <_dtoa_r+0x4da>
 800b9e4:	f1bb 0f00 	cmp.w	fp, #0
 800b9e8:	dd34      	ble.n	800ba54 <_dtoa_r+0x43c>
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	4b6d      	ldr	r3, [pc, #436]	@ (800bba4 <_dtoa_r+0x58c>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4629      	mov	r1, r5
 800b9f2:	f7f4 fe01 	bl	80005f8 <__aeabi_dmul>
 800b9f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9fa:	f107 38ff 	add.w	r8, r7, #4294967295
 800b9fe:	3601      	adds	r6, #1
 800ba00:	465c      	mov	r4, fp
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7f4 fd8e 	bl	8000524 <__aeabi_i2d>
 800ba08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba0c:	f7f4 fdf4 	bl	80005f8 <__aeabi_dmul>
 800ba10:	4b65      	ldr	r3, [pc, #404]	@ (800bba8 <_dtoa_r+0x590>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	f7f4 fc3a 	bl	800028c <__adddf3>
 800ba18:	4605      	mov	r5, r0
 800ba1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba1e:	2c00      	cmp	r4, #0
 800ba20:	d16a      	bne.n	800baf8 <_dtoa_r+0x4e0>
 800ba22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba26:	4b61      	ldr	r3, [pc, #388]	@ (800bbac <_dtoa_r+0x594>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f7f4 fc2d 	bl	8000288 <__aeabi_dsub>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba36:	462a      	mov	r2, r5
 800ba38:	4633      	mov	r3, r6
 800ba3a:	f7f5 f86d 	bl	8000b18 <__aeabi_dcmpgt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f040 8298 	bne.w	800bf74 <_dtoa_r+0x95c>
 800ba44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba48:	462a      	mov	r2, r5
 800ba4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba4e:	f7f5 f845 	bl	8000adc <__aeabi_dcmplt>
 800ba52:	bb38      	cbnz	r0, 800baa4 <_dtoa_r+0x48c>
 800ba54:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ba58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ba5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f2c0 8157 	blt.w	800bd12 <_dtoa_r+0x6fa>
 800ba64:	2f0e      	cmp	r7, #14
 800ba66:	f300 8154 	bgt.w	800bd12 <_dtoa_r+0x6fa>
 800ba6a:	4b4b      	ldr	r3, [pc, #300]	@ (800bb98 <_dtoa_r+0x580>)
 800ba6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ba70:	ed93 7b00 	vldr	d7, [r3]
 800ba74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	ed8d 7b00 	vstr	d7, [sp]
 800ba7c:	f280 80e5 	bge.w	800bc4a <_dtoa_r+0x632>
 800ba80:	9b03      	ldr	r3, [sp, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f300 80e1 	bgt.w	800bc4a <_dtoa_r+0x632>
 800ba88:	d10c      	bne.n	800baa4 <_dtoa_r+0x48c>
 800ba8a:	4b48      	ldr	r3, [pc, #288]	@ (800bbac <_dtoa_r+0x594>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	ec51 0b17 	vmov	r0, r1, d7
 800ba92:	f7f4 fdb1 	bl	80005f8 <__aeabi_dmul>
 800ba96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba9a:	f7f5 f833 	bl	8000b04 <__aeabi_dcmpge>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	f000 8266 	beq.w	800bf70 <_dtoa_r+0x958>
 800baa4:	2400      	movs	r4, #0
 800baa6:	4625      	mov	r5, r4
 800baa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800baaa:	4656      	mov	r6, sl
 800baac:	ea6f 0803 	mvn.w	r8, r3
 800bab0:	2700      	movs	r7, #0
 800bab2:	4621      	mov	r1, r4
 800bab4:	4648      	mov	r0, r9
 800bab6:	f000 fcbf 	bl	800c438 <_Bfree>
 800baba:	2d00      	cmp	r5, #0
 800babc:	f000 80bd 	beq.w	800bc3a <_dtoa_r+0x622>
 800bac0:	b12f      	cbz	r7, 800bace <_dtoa_r+0x4b6>
 800bac2:	42af      	cmp	r7, r5
 800bac4:	d003      	beq.n	800bace <_dtoa_r+0x4b6>
 800bac6:	4639      	mov	r1, r7
 800bac8:	4648      	mov	r0, r9
 800baca:	f000 fcb5 	bl	800c438 <_Bfree>
 800bace:	4629      	mov	r1, r5
 800bad0:	4648      	mov	r0, r9
 800bad2:	f000 fcb1 	bl	800c438 <_Bfree>
 800bad6:	e0b0      	b.n	800bc3a <_dtoa_r+0x622>
 800bad8:	07e2      	lsls	r2, r4, #31
 800bada:	d505      	bpl.n	800bae8 <_dtoa_r+0x4d0>
 800badc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bae0:	f7f4 fd8a 	bl	80005f8 <__aeabi_dmul>
 800bae4:	3601      	adds	r6, #1
 800bae6:	2301      	movs	r3, #1
 800bae8:	1064      	asrs	r4, r4, #1
 800baea:	3508      	adds	r5, #8
 800baec:	e762      	b.n	800b9b4 <_dtoa_r+0x39c>
 800baee:	2602      	movs	r6, #2
 800baf0:	e765      	b.n	800b9be <_dtoa_r+0x3a6>
 800baf2:	9c03      	ldr	r4, [sp, #12]
 800baf4:	46b8      	mov	r8, r7
 800baf6:	e784      	b.n	800ba02 <_dtoa_r+0x3ea>
 800baf8:	4b27      	ldr	r3, [pc, #156]	@ (800bb98 <_dtoa_r+0x580>)
 800bafa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bafc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb04:	4454      	add	r4, sl
 800bb06:	2900      	cmp	r1, #0
 800bb08:	d054      	beq.n	800bbb4 <_dtoa_r+0x59c>
 800bb0a:	4929      	ldr	r1, [pc, #164]	@ (800bbb0 <_dtoa_r+0x598>)
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	f7f4 fe9d 	bl	800084c <__aeabi_ddiv>
 800bb12:	4633      	mov	r3, r6
 800bb14:	462a      	mov	r2, r5
 800bb16:	f7f4 fbb7 	bl	8000288 <__aeabi_dsub>
 800bb1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bb1e:	4656      	mov	r6, sl
 800bb20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb24:	f7f5 f818 	bl	8000b58 <__aeabi_d2iz>
 800bb28:	4605      	mov	r5, r0
 800bb2a:	f7f4 fcfb 	bl	8000524 <__aeabi_i2d>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	460b      	mov	r3, r1
 800bb32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb36:	f7f4 fba7 	bl	8000288 <__aeabi_dsub>
 800bb3a:	3530      	adds	r5, #48	@ 0x30
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb44:	f806 5b01 	strb.w	r5, [r6], #1
 800bb48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bb4c:	f7f4 ffc6 	bl	8000adc <__aeabi_dcmplt>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d172      	bne.n	800bc3a <_dtoa_r+0x622>
 800bb54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb58:	4911      	ldr	r1, [pc, #68]	@ (800bba0 <_dtoa_r+0x588>)
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	f7f4 fb94 	bl	8000288 <__aeabi_dsub>
 800bb60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bb64:	f7f4 ffba 	bl	8000adc <__aeabi_dcmplt>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	f040 80b4 	bne.w	800bcd6 <_dtoa_r+0x6be>
 800bb6e:	42a6      	cmp	r6, r4
 800bb70:	f43f af70 	beq.w	800ba54 <_dtoa_r+0x43c>
 800bb74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bb78:	4b0a      	ldr	r3, [pc, #40]	@ (800bba4 <_dtoa_r+0x58c>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	4b08      	ldr	r3, [pc, #32]	@ (800bba4 <_dtoa_r+0x58c>)
 800bb82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bb86:	2200      	movs	r2, #0
 800bb88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb8c:	f7f4 fd34 	bl	80005f8 <__aeabi_dmul>
 800bb90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb94:	e7c4      	b.n	800bb20 <_dtoa_r+0x508>
 800bb96:	bf00      	nop
 800bb98:	0800e710 	.word	0x0800e710
 800bb9c:	0800e6e8 	.word	0x0800e6e8
 800bba0:	3ff00000 	.word	0x3ff00000
 800bba4:	40240000 	.word	0x40240000
 800bba8:	401c0000 	.word	0x401c0000
 800bbac:	40140000 	.word	0x40140000
 800bbb0:	3fe00000 	.word	0x3fe00000
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f7f4 fd1e 	bl	80005f8 <__aeabi_dmul>
 800bbbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bbc0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bbc2:	4656      	mov	r6, sl
 800bbc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbc8:	f7f4 ffc6 	bl	8000b58 <__aeabi_d2iz>
 800bbcc:	4605      	mov	r5, r0
 800bbce:	f7f4 fca9 	bl	8000524 <__aeabi_i2d>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbda:	f7f4 fb55 	bl	8000288 <__aeabi_dsub>
 800bbde:	3530      	adds	r5, #48	@ 0x30
 800bbe0:	f806 5b01 	strb.w	r5, [r6], #1
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	42a6      	cmp	r6, r4
 800bbea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bbee:	f04f 0200 	mov.w	r2, #0
 800bbf2:	d124      	bne.n	800bc3e <_dtoa_r+0x626>
 800bbf4:	4baf      	ldr	r3, [pc, #700]	@ (800beb4 <_dtoa_r+0x89c>)
 800bbf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bbfa:	f7f4 fb47 	bl	800028c <__adddf3>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc06:	f7f4 ff87 	bl	8000b18 <__aeabi_dcmpgt>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d163      	bne.n	800bcd6 <_dtoa_r+0x6be>
 800bc0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc12:	49a8      	ldr	r1, [pc, #672]	@ (800beb4 <_dtoa_r+0x89c>)
 800bc14:	2000      	movs	r0, #0
 800bc16:	f7f4 fb37 	bl	8000288 <__aeabi_dsub>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc22:	f7f4 ff5b 	bl	8000adc <__aeabi_dcmplt>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f43f af14 	beq.w	800ba54 <_dtoa_r+0x43c>
 800bc2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bc2e:	1e73      	subs	r3, r6, #1
 800bc30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc36:	2b30      	cmp	r3, #48	@ 0x30
 800bc38:	d0f8      	beq.n	800bc2c <_dtoa_r+0x614>
 800bc3a:	4647      	mov	r7, r8
 800bc3c:	e03b      	b.n	800bcb6 <_dtoa_r+0x69e>
 800bc3e:	4b9e      	ldr	r3, [pc, #632]	@ (800beb8 <_dtoa_r+0x8a0>)
 800bc40:	f7f4 fcda 	bl	80005f8 <__aeabi_dmul>
 800bc44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc48:	e7bc      	b.n	800bbc4 <_dtoa_r+0x5ac>
 800bc4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bc4e:	4656      	mov	r6, sl
 800bc50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc54:	4620      	mov	r0, r4
 800bc56:	4629      	mov	r1, r5
 800bc58:	f7f4 fdf8 	bl	800084c <__aeabi_ddiv>
 800bc5c:	f7f4 ff7c 	bl	8000b58 <__aeabi_d2iz>
 800bc60:	4680      	mov	r8, r0
 800bc62:	f7f4 fc5f 	bl	8000524 <__aeabi_i2d>
 800bc66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4620      	mov	r0, r4
 800bc74:	4629      	mov	r1, r5
 800bc76:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bc7a:	f7f4 fb05 	bl	8000288 <__aeabi_dsub>
 800bc7e:	f806 4b01 	strb.w	r4, [r6], #1
 800bc82:	9d03      	ldr	r5, [sp, #12]
 800bc84:	eba6 040a 	sub.w	r4, r6, sl
 800bc88:	42a5      	cmp	r5, r4
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	d133      	bne.n	800bcf8 <_dtoa_r+0x6e0>
 800bc90:	f7f4 fafc 	bl	800028c <__adddf3>
 800bc94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc98:	4604      	mov	r4, r0
 800bc9a:	460d      	mov	r5, r1
 800bc9c:	f7f4 ff3c 	bl	8000b18 <__aeabi_dcmpgt>
 800bca0:	b9c0      	cbnz	r0, 800bcd4 <_dtoa_r+0x6bc>
 800bca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bca6:	4620      	mov	r0, r4
 800bca8:	4629      	mov	r1, r5
 800bcaa:	f7f4 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcae:	b110      	cbz	r0, 800bcb6 <_dtoa_r+0x69e>
 800bcb0:	f018 0f01 	tst.w	r8, #1
 800bcb4:	d10e      	bne.n	800bcd4 <_dtoa_r+0x6bc>
 800bcb6:	9902      	ldr	r1, [sp, #8]
 800bcb8:	4648      	mov	r0, r9
 800bcba:	f000 fbbd 	bl	800c438 <_Bfree>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	7033      	strb	r3, [r6, #0]
 800bcc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bcc4:	3701      	adds	r7, #1
 800bcc6:	601f      	str	r7, [r3, #0]
 800bcc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 824b 	beq.w	800c166 <_dtoa_r+0xb4e>
 800bcd0:	601e      	str	r6, [r3, #0]
 800bcd2:	e248      	b.n	800c166 <_dtoa_r+0xb4e>
 800bcd4:	46b8      	mov	r8, r7
 800bcd6:	4633      	mov	r3, r6
 800bcd8:	461e      	mov	r6, r3
 800bcda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcde:	2a39      	cmp	r2, #57	@ 0x39
 800bce0:	d106      	bne.n	800bcf0 <_dtoa_r+0x6d8>
 800bce2:	459a      	cmp	sl, r3
 800bce4:	d1f8      	bne.n	800bcd8 <_dtoa_r+0x6c0>
 800bce6:	2230      	movs	r2, #48	@ 0x30
 800bce8:	f108 0801 	add.w	r8, r8, #1
 800bcec:	f88a 2000 	strb.w	r2, [sl]
 800bcf0:	781a      	ldrb	r2, [r3, #0]
 800bcf2:	3201      	adds	r2, #1
 800bcf4:	701a      	strb	r2, [r3, #0]
 800bcf6:	e7a0      	b.n	800bc3a <_dtoa_r+0x622>
 800bcf8:	4b6f      	ldr	r3, [pc, #444]	@ (800beb8 <_dtoa_r+0x8a0>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f7f4 fc7c 	bl	80005f8 <__aeabi_dmul>
 800bd00:	2200      	movs	r2, #0
 800bd02:	2300      	movs	r3, #0
 800bd04:	4604      	mov	r4, r0
 800bd06:	460d      	mov	r5, r1
 800bd08:	f7f4 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d09f      	beq.n	800bc50 <_dtoa_r+0x638>
 800bd10:	e7d1      	b.n	800bcb6 <_dtoa_r+0x69e>
 800bd12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd14:	2a00      	cmp	r2, #0
 800bd16:	f000 80ea 	beq.w	800beee <_dtoa_r+0x8d6>
 800bd1a:	9a07      	ldr	r2, [sp, #28]
 800bd1c:	2a01      	cmp	r2, #1
 800bd1e:	f300 80cd 	bgt.w	800bebc <_dtoa_r+0x8a4>
 800bd22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd24:	2a00      	cmp	r2, #0
 800bd26:	f000 80c1 	beq.w	800beac <_dtoa_r+0x894>
 800bd2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bd2e:	9c08      	ldr	r4, [sp, #32]
 800bd30:	9e00      	ldr	r6, [sp, #0]
 800bd32:	9a00      	ldr	r2, [sp, #0]
 800bd34:	441a      	add	r2, r3
 800bd36:	9200      	str	r2, [sp, #0]
 800bd38:	9a06      	ldr	r2, [sp, #24]
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	441a      	add	r2, r3
 800bd3e:	4648      	mov	r0, r9
 800bd40:	9206      	str	r2, [sp, #24]
 800bd42:	f000 fc2d 	bl	800c5a0 <__i2b>
 800bd46:	4605      	mov	r5, r0
 800bd48:	b166      	cbz	r6, 800bd64 <_dtoa_r+0x74c>
 800bd4a:	9b06      	ldr	r3, [sp, #24]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	dd09      	ble.n	800bd64 <_dtoa_r+0x74c>
 800bd50:	42b3      	cmp	r3, r6
 800bd52:	9a00      	ldr	r2, [sp, #0]
 800bd54:	bfa8      	it	ge
 800bd56:	4633      	movge	r3, r6
 800bd58:	1ad2      	subs	r2, r2, r3
 800bd5a:	9200      	str	r2, [sp, #0]
 800bd5c:	9a06      	ldr	r2, [sp, #24]
 800bd5e:	1af6      	subs	r6, r6, r3
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	9306      	str	r3, [sp, #24]
 800bd64:	9b08      	ldr	r3, [sp, #32]
 800bd66:	b30b      	cbz	r3, 800bdac <_dtoa_r+0x794>
 800bd68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 80c6 	beq.w	800befc <_dtoa_r+0x8e4>
 800bd70:	2c00      	cmp	r4, #0
 800bd72:	f000 80c0 	beq.w	800bef6 <_dtoa_r+0x8de>
 800bd76:	4629      	mov	r1, r5
 800bd78:	4622      	mov	r2, r4
 800bd7a:	4648      	mov	r0, r9
 800bd7c:	f000 fcc8 	bl	800c710 <__pow5mult>
 800bd80:	9a02      	ldr	r2, [sp, #8]
 800bd82:	4601      	mov	r1, r0
 800bd84:	4605      	mov	r5, r0
 800bd86:	4648      	mov	r0, r9
 800bd88:	f000 fc20 	bl	800c5cc <__multiply>
 800bd8c:	9902      	ldr	r1, [sp, #8]
 800bd8e:	4680      	mov	r8, r0
 800bd90:	4648      	mov	r0, r9
 800bd92:	f000 fb51 	bl	800c438 <_Bfree>
 800bd96:	9b08      	ldr	r3, [sp, #32]
 800bd98:	1b1b      	subs	r3, r3, r4
 800bd9a:	9308      	str	r3, [sp, #32]
 800bd9c:	f000 80b1 	beq.w	800bf02 <_dtoa_r+0x8ea>
 800bda0:	9a08      	ldr	r2, [sp, #32]
 800bda2:	4641      	mov	r1, r8
 800bda4:	4648      	mov	r0, r9
 800bda6:	f000 fcb3 	bl	800c710 <__pow5mult>
 800bdaa:	9002      	str	r0, [sp, #8]
 800bdac:	2101      	movs	r1, #1
 800bdae:	4648      	mov	r0, r9
 800bdb0:	f000 fbf6 	bl	800c5a0 <__i2b>
 800bdb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 81d8 	beq.w	800c16e <_dtoa_r+0xb56>
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	4601      	mov	r1, r0
 800bdc2:	4648      	mov	r0, r9
 800bdc4:	f000 fca4 	bl	800c710 <__pow5mult>
 800bdc8:	9b07      	ldr	r3, [sp, #28]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	4604      	mov	r4, r0
 800bdce:	f300 809f 	bgt.w	800bf10 <_dtoa_r+0x8f8>
 800bdd2:	9b04      	ldr	r3, [sp, #16]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f040 8097 	bne.w	800bf08 <_dtoa_r+0x8f0>
 800bdda:	9b05      	ldr	r3, [sp, #20]
 800bddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f040 8093 	bne.w	800bf0c <_dtoa_r+0x8f4>
 800bde6:	9b05      	ldr	r3, [sp, #20]
 800bde8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bdec:	0d1b      	lsrs	r3, r3, #20
 800bdee:	051b      	lsls	r3, r3, #20
 800bdf0:	b133      	cbz	r3, 800be00 <_dtoa_r+0x7e8>
 800bdf2:	9b00      	ldr	r3, [sp, #0]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	9b06      	ldr	r3, [sp, #24]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	9306      	str	r3, [sp, #24]
 800bdfe:	2301      	movs	r3, #1
 800be00:	9308      	str	r3, [sp, #32]
 800be02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 81b8 	beq.w	800c17a <_dtoa_r+0xb62>
 800be0a:	6923      	ldr	r3, [r4, #16]
 800be0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be10:	6918      	ldr	r0, [r3, #16]
 800be12:	f000 fb79 	bl	800c508 <__hi0bits>
 800be16:	f1c0 0020 	rsb	r0, r0, #32
 800be1a:	9b06      	ldr	r3, [sp, #24]
 800be1c:	4418      	add	r0, r3
 800be1e:	f010 001f 	ands.w	r0, r0, #31
 800be22:	f000 8082 	beq.w	800bf2a <_dtoa_r+0x912>
 800be26:	f1c0 0320 	rsb	r3, r0, #32
 800be2a:	2b04      	cmp	r3, #4
 800be2c:	dd73      	ble.n	800bf16 <_dtoa_r+0x8fe>
 800be2e:	9b00      	ldr	r3, [sp, #0]
 800be30:	f1c0 001c 	rsb	r0, r0, #28
 800be34:	4403      	add	r3, r0
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	9b06      	ldr	r3, [sp, #24]
 800be3a:	4403      	add	r3, r0
 800be3c:	4406      	add	r6, r0
 800be3e:	9306      	str	r3, [sp, #24]
 800be40:	9b00      	ldr	r3, [sp, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	dd05      	ble.n	800be52 <_dtoa_r+0x83a>
 800be46:	9902      	ldr	r1, [sp, #8]
 800be48:	461a      	mov	r2, r3
 800be4a:	4648      	mov	r0, r9
 800be4c:	f000 fcba 	bl	800c7c4 <__lshift>
 800be50:	9002      	str	r0, [sp, #8]
 800be52:	9b06      	ldr	r3, [sp, #24]
 800be54:	2b00      	cmp	r3, #0
 800be56:	dd05      	ble.n	800be64 <_dtoa_r+0x84c>
 800be58:	4621      	mov	r1, r4
 800be5a:	461a      	mov	r2, r3
 800be5c:	4648      	mov	r0, r9
 800be5e:	f000 fcb1 	bl	800c7c4 <__lshift>
 800be62:	4604      	mov	r4, r0
 800be64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800be66:	2b00      	cmp	r3, #0
 800be68:	d061      	beq.n	800bf2e <_dtoa_r+0x916>
 800be6a:	9802      	ldr	r0, [sp, #8]
 800be6c:	4621      	mov	r1, r4
 800be6e:	f000 fd15 	bl	800c89c <__mcmp>
 800be72:	2800      	cmp	r0, #0
 800be74:	da5b      	bge.n	800bf2e <_dtoa_r+0x916>
 800be76:	2300      	movs	r3, #0
 800be78:	9902      	ldr	r1, [sp, #8]
 800be7a:	220a      	movs	r2, #10
 800be7c:	4648      	mov	r0, r9
 800be7e:	f000 fafd 	bl	800c47c <__multadd>
 800be82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be84:	9002      	str	r0, [sp, #8]
 800be86:	f107 38ff 	add.w	r8, r7, #4294967295
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 8177 	beq.w	800c17e <_dtoa_r+0xb66>
 800be90:	4629      	mov	r1, r5
 800be92:	2300      	movs	r3, #0
 800be94:	220a      	movs	r2, #10
 800be96:	4648      	mov	r0, r9
 800be98:	f000 faf0 	bl	800c47c <__multadd>
 800be9c:	f1bb 0f00 	cmp.w	fp, #0
 800bea0:	4605      	mov	r5, r0
 800bea2:	dc6f      	bgt.n	800bf84 <_dtoa_r+0x96c>
 800bea4:	9b07      	ldr	r3, [sp, #28]
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	dc49      	bgt.n	800bf3e <_dtoa_r+0x926>
 800beaa:	e06b      	b.n	800bf84 <_dtoa_r+0x96c>
 800beac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800beae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800beb2:	e73c      	b.n	800bd2e <_dtoa_r+0x716>
 800beb4:	3fe00000 	.word	0x3fe00000
 800beb8:	40240000 	.word	0x40240000
 800bebc:	9b03      	ldr	r3, [sp, #12]
 800bebe:	1e5c      	subs	r4, r3, #1
 800bec0:	9b08      	ldr	r3, [sp, #32]
 800bec2:	42a3      	cmp	r3, r4
 800bec4:	db09      	blt.n	800beda <_dtoa_r+0x8c2>
 800bec6:	1b1c      	subs	r4, r3, r4
 800bec8:	9b03      	ldr	r3, [sp, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	f6bf af30 	bge.w	800bd30 <_dtoa_r+0x718>
 800bed0:	9b00      	ldr	r3, [sp, #0]
 800bed2:	9a03      	ldr	r2, [sp, #12]
 800bed4:	1a9e      	subs	r6, r3, r2
 800bed6:	2300      	movs	r3, #0
 800bed8:	e72b      	b.n	800bd32 <_dtoa_r+0x71a>
 800beda:	9b08      	ldr	r3, [sp, #32]
 800bedc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bede:	9408      	str	r4, [sp, #32]
 800bee0:	1ae3      	subs	r3, r4, r3
 800bee2:	441a      	add	r2, r3
 800bee4:	9e00      	ldr	r6, [sp, #0]
 800bee6:	9b03      	ldr	r3, [sp, #12]
 800bee8:	920d      	str	r2, [sp, #52]	@ 0x34
 800beea:	2400      	movs	r4, #0
 800beec:	e721      	b.n	800bd32 <_dtoa_r+0x71a>
 800beee:	9c08      	ldr	r4, [sp, #32]
 800bef0:	9e00      	ldr	r6, [sp, #0]
 800bef2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bef4:	e728      	b.n	800bd48 <_dtoa_r+0x730>
 800bef6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800befa:	e751      	b.n	800bda0 <_dtoa_r+0x788>
 800befc:	9a08      	ldr	r2, [sp, #32]
 800befe:	9902      	ldr	r1, [sp, #8]
 800bf00:	e750      	b.n	800bda4 <_dtoa_r+0x78c>
 800bf02:	f8cd 8008 	str.w	r8, [sp, #8]
 800bf06:	e751      	b.n	800bdac <_dtoa_r+0x794>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	e779      	b.n	800be00 <_dtoa_r+0x7e8>
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	e777      	b.n	800be00 <_dtoa_r+0x7e8>
 800bf10:	2300      	movs	r3, #0
 800bf12:	9308      	str	r3, [sp, #32]
 800bf14:	e779      	b.n	800be0a <_dtoa_r+0x7f2>
 800bf16:	d093      	beq.n	800be40 <_dtoa_r+0x828>
 800bf18:	9a00      	ldr	r2, [sp, #0]
 800bf1a:	331c      	adds	r3, #28
 800bf1c:	441a      	add	r2, r3
 800bf1e:	9200      	str	r2, [sp, #0]
 800bf20:	9a06      	ldr	r2, [sp, #24]
 800bf22:	441a      	add	r2, r3
 800bf24:	441e      	add	r6, r3
 800bf26:	9206      	str	r2, [sp, #24]
 800bf28:	e78a      	b.n	800be40 <_dtoa_r+0x828>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	e7f4      	b.n	800bf18 <_dtoa_r+0x900>
 800bf2e:	9b03      	ldr	r3, [sp, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	46b8      	mov	r8, r7
 800bf34:	dc20      	bgt.n	800bf78 <_dtoa_r+0x960>
 800bf36:	469b      	mov	fp, r3
 800bf38:	9b07      	ldr	r3, [sp, #28]
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	dd1e      	ble.n	800bf7c <_dtoa_r+0x964>
 800bf3e:	f1bb 0f00 	cmp.w	fp, #0
 800bf42:	f47f adb1 	bne.w	800baa8 <_dtoa_r+0x490>
 800bf46:	4621      	mov	r1, r4
 800bf48:	465b      	mov	r3, fp
 800bf4a:	2205      	movs	r2, #5
 800bf4c:	4648      	mov	r0, r9
 800bf4e:	f000 fa95 	bl	800c47c <__multadd>
 800bf52:	4601      	mov	r1, r0
 800bf54:	4604      	mov	r4, r0
 800bf56:	9802      	ldr	r0, [sp, #8]
 800bf58:	f000 fca0 	bl	800c89c <__mcmp>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	f77f ada3 	ble.w	800baa8 <_dtoa_r+0x490>
 800bf62:	4656      	mov	r6, sl
 800bf64:	2331      	movs	r3, #49	@ 0x31
 800bf66:	f806 3b01 	strb.w	r3, [r6], #1
 800bf6a:	f108 0801 	add.w	r8, r8, #1
 800bf6e:	e59f      	b.n	800bab0 <_dtoa_r+0x498>
 800bf70:	9c03      	ldr	r4, [sp, #12]
 800bf72:	46b8      	mov	r8, r7
 800bf74:	4625      	mov	r5, r4
 800bf76:	e7f4      	b.n	800bf62 <_dtoa_r+0x94a>
 800bf78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bf7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	f000 8101 	beq.w	800c186 <_dtoa_r+0xb6e>
 800bf84:	2e00      	cmp	r6, #0
 800bf86:	dd05      	ble.n	800bf94 <_dtoa_r+0x97c>
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4632      	mov	r2, r6
 800bf8c:	4648      	mov	r0, r9
 800bf8e:	f000 fc19 	bl	800c7c4 <__lshift>
 800bf92:	4605      	mov	r5, r0
 800bf94:	9b08      	ldr	r3, [sp, #32]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d05c      	beq.n	800c054 <_dtoa_r+0xa3c>
 800bf9a:	6869      	ldr	r1, [r5, #4]
 800bf9c:	4648      	mov	r0, r9
 800bf9e:	f000 fa0b 	bl	800c3b8 <_Balloc>
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	b928      	cbnz	r0, 800bfb2 <_dtoa_r+0x99a>
 800bfa6:	4b82      	ldr	r3, [pc, #520]	@ (800c1b0 <_dtoa_r+0xb98>)
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bfae:	f7ff bb4a 	b.w	800b646 <_dtoa_r+0x2e>
 800bfb2:	692a      	ldr	r2, [r5, #16]
 800bfb4:	3202      	adds	r2, #2
 800bfb6:	0092      	lsls	r2, r2, #2
 800bfb8:	f105 010c 	add.w	r1, r5, #12
 800bfbc:	300c      	adds	r0, #12
 800bfbe:	f7ff fa94 	bl	800b4ea <memcpy>
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	4648      	mov	r0, r9
 800bfc8:	f000 fbfc 	bl	800c7c4 <__lshift>
 800bfcc:	f10a 0301 	add.w	r3, sl, #1
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	eb0a 030b 	add.w	r3, sl, fp
 800bfd6:	9308      	str	r3, [sp, #32]
 800bfd8:	9b04      	ldr	r3, [sp, #16]
 800bfda:	f003 0301 	and.w	r3, r3, #1
 800bfde:	462f      	mov	r7, r5
 800bfe0:	9306      	str	r3, [sp, #24]
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	9b00      	ldr	r3, [sp, #0]
 800bfe6:	9802      	ldr	r0, [sp, #8]
 800bfe8:	4621      	mov	r1, r4
 800bfea:	f103 3bff 	add.w	fp, r3, #4294967295
 800bfee:	f7ff fa8a 	bl	800b506 <quorem>
 800bff2:	4603      	mov	r3, r0
 800bff4:	3330      	adds	r3, #48	@ 0x30
 800bff6:	9003      	str	r0, [sp, #12]
 800bff8:	4639      	mov	r1, r7
 800bffa:	9802      	ldr	r0, [sp, #8]
 800bffc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bffe:	f000 fc4d 	bl	800c89c <__mcmp>
 800c002:	462a      	mov	r2, r5
 800c004:	9004      	str	r0, [sp, #16]
 800c006:	4621      	mov	r1, r4
 800c008:	4648      	mov	r0, r9
 800c00a:	f000 fc63 	bl	800c8d4 <__mdiff>
 800c00e:	68c2      	ldr	r2, [r0, #12]
 800c010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c012:	4606      	mov	r6, r0
 800c014:	bb02      	cbnz	r2, 800c058 <_dtoa_r+0xa40>
 800c016:	4601      	mov	r1, r0
 800c018:	9802      	ldr	r0, [sp, #8]
 800c01a:	f000 fc3f 	bl	800c89c <__mcmp>
 800c01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c020:	4602      	mov	r2, r0
 800c022:	4631      	mov	r1, r6
 800c024:	4648      	mov	r0, r9
 800c026:	920c      	str	r2, [sp, #48]	@ 0x30
 800c028:	9309      	str	r3, [sp, #36]	@ 0x24
 800c02a:	f000 fa05 	bl	800c438 <_Bfree>
 800c02e:	9b07      	ldr	r3, [sp, #28]
 800c030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c032:	9e00      	ldr	r6, [sp, #0]
 800c034:	ea42 0103 	orr.w	r1, r2, r3
 800c038:	9b06      	ldr	r3, [sp, #24]
 800c03a:	4319      	orrs	r1, r3
 800c03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c03e:	d10d      	bne.n	800c05c <_dtoa_r+0xa44>
 800c040:	2b39      	cmp	r3, #57	@ 0x39
 800c042:	d027      	beq.n	800c094 <_dtoa_r+0xa7c>
 800c044:	9a04      	ldr	r2, [sp, #16]
 800c046:	2a00      	cmp	r2, #0
 800c048:	dd01      	ble.n	800c04e <_dtoa_r+0xa36>
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	3331      	adds	r3, #49	@ 0x31
 800c04e:	f88b 3000 	strb.w	r3, [fp]
 800c052:	e52e      	b.n	800bab2 <_dtoa_r+0x49a>
 800c054:	4628      	mov	r0, r5
 800c056:	e7b9      	b.n	800bfcc <_dtoa_r+0x9b4>
 800c058:	2201      	movs	r2, #1
 800c05a:	e7e2      	b.n	800c022 <_dtoa_r+0xa0a>
 800c05c:	9904      	ldr	r1, [sp, #16]
 800c05e:	2900      	cmp	r1, #0
 800c060:	db04      	blt.n	800c06c <_dtoa_r+0xa54>
 800c062:	9807      	ldr	r0, [sp, #28]
 800c064:	4301      	orrs	r1, r0
 800c066:	9806      	ldr	r0, [sp, #24]
 800c068:	4301      	orrs	r1, r0
 800c06a:	d120      	bne.n	800c0ae <_dtoa_r+0xa96>
 800c06c:	2a00      	cmp	r2, #0
 800c06e:	ddee      	ble.n	800c04e <_dtoa_r+0xa36>
 800c070:	9902      	ldr	r1, [sp, #8]
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	2201      	movs	r2, #1
 800c076:	4648      	mov	r0, r9
 800c078:	f000 fba4 	bl	800c7c4 <__lshift>
 800c07c:	4621      	mov	r1, r4
 800c07e:	9002      	str	r0, [sp, #8]
 800c080:	f000 fc0c 	bl	800c89c <__mcmp>
 800c084:	2800      	cmp	r0, #0
 800c086:	9b00      	ldr	r3, [sp, #0]
 800c088:	dc02      	bgt.n	800c090 <_dtoa_r+0xa78>
 800c08a:	d1e0      	bne.n	800c04e <_dtoa_r+0xa36>
 800c08c:	07da      	lsls	r2, r3, #31
 800c08e:	d5de      	bpl.n	800c04e <_dtoa_r+0xa36>
 800c090:	2b39      	cmp	r3, #57	@ 0x39
 800c092:	d1da      	bne.n	800c04a <_dtoa_r+0xa32>
 800c094:	2339      	movs	r3, #57	@ 0x39
 800c096:	f88b 3000 	strb.w	r3, [fp]
 800c09a:	4633      	mov	r3, r6
 800c09c:	461e      	mov	r6, r3
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c0a4:	2a39      	cmp	r2, #57	@ 0x39
 800c0a6:	d04e      	beq.n	800c146 <_dtoa_r+0xb2e>
 800c0a8:	3201      	adds	r2, #1
 800c0aa:	701a      	strb	r2, [r3, #0]
 800c0ac:	e501      	b.n	800bab2 <_dtoa_r+0x49a>
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	dd03      	ble.n	800c0ba <_dtoa_r+0xaa2>
 800c0b2:	2b39      	cmp	r3, #57	@ 0x39
 800c0b4:	d0ee      	beq.n	800c094 <_dtoa_r+0xa7c>
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	e7c9      	b.n	800c04e <_dtoa_r+0xa36>
 800c0ba:	9a00      	ldr	r2, [sp, #0]
 800c0bc:	9908      	ldr	r1, [sp, #32]
 800c0be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c0c2:	428a      	cmp	r2, r1
 800c0c4:	d028      	beq.n	800c118 <_dtoa_r+0xb00>
 800c0c6:	9902      	ldr	r1, [sp, #8]
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	220a      	movs	r2, #10
 800c0cc:	4648      	mov	r0, r9
 800c0ce:	f000 f9d5 	bl	800c47c <__multadd>
 800c0d2:	42af      	cmp	r7, r5
 800c0d4:	9002      	str	r0, [sp, #8]
 800c0d6:	f04f 0300 	mov.w	r3, #0
 800c0da:	f04f 020a 	mov.w	r2, #10
 800c0de:	4639      	mov	r1, r7
 800c0e0:	4648      	mov	r0, r9
 800c0e2:	d107      	bne.n	800c0f4 <_dtoa_r+0xadc>
 800c0e4:	f000 f9ca 	bl	800c47c <__multadd>
 800c0e8:	4607      	mov	r7, r0
 800c0ea:	4605      	mov	r5, r0
 800c0ec:	9b00      	ldr	r3, [sp, #0]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	9300      	str	r3, [sp, #0]
 800c0f2:	e777      	b.n	800bfe4 <_dtoa_r+0x9cc>
 800c0f4:	f000 f9c2 	bl	800c47c <__multadd>
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4607      	mov	r7, r0
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	220a      	movs	r2, #10
 800c100:	4648      	mov	r0, r9
 800c102:	f000 f9bb 	bl	800c47c <__multadd>
 800c106:	4605      	mov	r5, r0
 800c108:	e7f0      	b.n	800c0ec <_dtoa_r+0xad4>
 800c10a:	f1bb 0f00 	cmp.w	fp, #0
 800c10e:	bfcc      	ite	gt
 800c110:	465e      	movgt	r6, fp
 800c112:	2601      	movle	r6, #1
 800c114:	4456      	add	r6, sl
 800c116:	2700      	movs	r7, #0
 800c118:	9902      	ldr	r1, [sp, #8]
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	2201      	movs	r2, #1
 800c11e:	4648      	mov	r0, r9
 800c120:	f000 fb50 	bl	800c7c4 <__lshift>
 800c124:	4621      	mov	r1, r4
 800c126:	9002      	str	r0, [sp, #8]
 800c128:	f000 fbb8 	bl	800c89c <__mcmp>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	dcb4      	bgt.n	800c09a <_dtoa_r+0xa82>
 800c130:	d102      	bne.n	800c138 <_dtoa_r+0xb20>
 800c132:	9b00      	ldr	r3, [sp, #0]
 800c134:	07db      	lsls	r3, r3, #31
 800c136:	d4b0      	bmi.n	800c09a <_dtoa_r+0xa82>
 800c138:	4633      	mov	r3, r6
 800c13a:	461e      	mov	r6, r3
 800c13c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c140:	2a30      	cmp	r2, #48	@ 0x30
 800c142:	d0fa      	beq.n	800c13a <_dtoa_r+0xb22>
 800c144:	e4b5      	b.n	800bab2 <_dtoa_r+0x49a>
 800c146:	459a      	cmp	sl, r3
 800c148:	d1a8      	bne.n	800c09c <_dtoa_r+0xa84>
 800c14a:	2331      	movs	r3, #49	@ 0x31
 800c14c:	f108 0801 	add.w	r8, r8, #1
 800c150:	f88a 3000 	strb.w	r3, [sl]
 800c154:	e4ad      	b.n	800bab2 <_dtoa_r+0x49a>
 800c156:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c158:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c1b4 <_dtoa_r+0xb9c>
 800c15c:	b11b      	cbz	r3, 800c166 <_dtoa_r+0xb4e>
 800c15e:	f10a 0308 	add.w	r3, sl, #8
 800c162:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c164:	6013      	str	r3, [r2, #0]
 800c166:	4650      	mov	r0, sl
 800c168:	b017      	add	sp, #92	@ 0x5c
 800c16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16e:	9b07      	ldr	r3, [sp, #28]
 800c170:	2b01      	cmp	r3, #1
 800c172:	f77f ae2e 	ble.w	800bdd2 <_dtoa_r+0x7ba>
 800c176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c178:	9308      	str	r3, [sp, #32]
 800c17a:	2001      	movs	r0, #1
 800c17c:	e64d      	b.n	800be1a <_dtoa_r+0x802>
 800c17e:	f1bb 0f00 	cmp.w	fp, #0
 800c182:	f77f aed9 	ble.w	800bf38 <_dtoa_r+0x920>
 800c186:	4656      	mov	r6, sl
 800c188:	9802      	ldr	r0, [sp, #8]
 800c18a:	4621      	mov	r1, r4
 800c18c:	f7ff f9bb 	bl	800b506 <quorem>
 800c190:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c194:	f806 3b01 	strb.w	r3, [r6], #1
 800c198:	eba6 020a 	sub.w	r2, r6, sl
 800c19c:	4593      	cmp	fp, r2
 800c19e:	ddb4      	ble.n	800c10a <_dtoa_r+0xaf2>
 800c1a0:	9902      	ldr	r1, [sp, #8]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	220a      	movs	r2, #10
 800c1a6:	4648      	mov	r0, r9
 800c1a8:	f000 f968 	bl	800c47c <__multadd>
 800c1ac:	9002      	str	r0, [sp, #8]
 800c1ae:	e7eb      	b.n	800c188 <_dtoa_r+0xb70>
 800c1b0:	0800e615 	.word	0x0800e615
 800c1b4:	0800e599 	.word	0x0800e599

0800c1b8 <_free_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	2900      	cmp	r1, #0
 800c1be:	d041      	beq.n	800c244 <_free_r+0x8c>
 800c1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c4:	1f0c      	subs	r4, r1, #4
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bfb8      	it	lt
 800c1ca:	18e4      	addlt	r4, r4, r3
 800c1cc:	f000 f8e8 	bl	800c3a0 <__malloc_lock>
 800c1d0:	4a1d      	ldr	r2, [pc, #116]	@ (800c248 <_free_r+0x90>)
 800c1d2:	6813      	ldr	r3, [r2, #0]
 800c1d4:	b933      	cbnz	r3, 800c1e4 <_free_r+0x2c>
 800c1d6:	6063      	str	r3, [r4, #4]
 800c1d8:	6014      	str	r4, [r2, #0]
 800c1da:	4628      	mov	r0, r5
 800c1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1e0:	f000 b8e4 	b.w	800c3ac <__malloc_unlock>
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	d908      	bls.n	800c1fa <_free_r+0x42>
 800c1e8:	6820      	ldr	r0, [r4, #0]
 800c1ea:	1821      	adds	r1, r4, r0
 800c1ec:	428b      	cmp	r3, r1
 800c1ee:	bf01      	itttt	eq
 800c1f0:	6819      	ldreq	r1, [r3, #0]
 800c1f2:	685b      	ldreq	r3, [r3, #4]
 800c1f4:	1809      	addeq	r1, r1, r0
 800c1f6:	6021      	streq	r1, [r4, #0]
 800c1f8:	e7ed      	b.n	800c1d6 <_free_r+0x1e>
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	b10b      	cbz	r3, 800c204 <_free_r+0x4c>
 800c200:	42a3      	cmp	r3, r4
 800c202:	d9fa      	bls.n	800c1fa <_free_r+0x42>
 800c204:	6811      	ldr	r1, [r2, #0]
 800c206:	1850      	adds	r0, r2, r1
 800c208:	42a0      	cmp	r0, r4
 800c20a:	d10b      	bne.n	800c224 <_free_r+0x6c>
 800c20c:	6820      	ldr	r0, [r4, #0]
 800c20e:	4401      	add	r1, r0
 800c210:	1850      	adds	r0, r2, r1
 800c212:	4283      	cmp	r3, r0
 800c214:	6011      	str	r1, [r2, #0]
 800c216:	d1e0      	bne.n	800c1da <_free_r+0x22>
 800c218:	6818      	ldr	r0, [r3, #0]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	6053      	str	r3, [r2, #4]
 800c21e:	4408      	add	r0, r1
 800c220:	6010      	str	r0, [r2, #0]
 800c222:	e7da      	b.n	800c1da <_free_r+0x22>
 800c224:	d902      	bls.n	800c22c <_free_r+0x74>
 800c226:	230c      	movs	r3, #12
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	e7d6      	b.n	800c1da <_free_r+0x22>
 800c22c:	6820      	ldr	r0, [r4, #0]
 800c22e:	1821      	adds	r1, r4, r0
 800c230:	428b      	cmp	r3, r1
 800c232:	bf04      	itt	eq
 800c234:	6819      	ldreq	r1, [r3, #0]
 800c236:	685b      	ldreq	r3, [r3, #4]
 800c238:	6063      	str	r3, [r4, #4]
 800c23a:	bf04      	itt	eq
 800c23c:	1809      	addeq	r1, r1, r0
 800c23e:	6021      	streq	r1, [r4, #0]
 800c240:	6054      	str	r4, [r2, #4]
 800c242:	e7ca      	b.n	800c1da <_free_r+0x22>
 800c244:	bd38      	pop	{r3, r4, r5, pc}
 800c246:	bf00      	nop
 800c248:	20004ea4 	.word	0x20004ea4

0800c24c <malloc>:
 800c24c:	4b02      	ldr	r3, [pc, #8]	@ (800c258 <malloc+0xc>)
 800c24e:	4601      	mov	r1, r0
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f000 b825 	b.w	800c2a0 <_malloc_r>
 800c256:	bf00      	nop
 800c258:	20000038 	.word	0x20000038

0800c25c <sbrk_aligned>:
 800c25c:	b570      	push	{r4, r5, r6, lr}
 800c25e:	4e0f      	ldr	r6, [pc, #60]	@ (800c29c <sbrk_aligned+0x40>)
 800c260:	460c      	mov	r4, r1
 800c262:	6831      	ldr	r1, [r6, #0]
 800c264:	4605      	mov	r5, r0
 800c266:	b911      	cbnz	r1, 800c26e <sbrk_aligned+0x12>
 800c268:	f000 fe3e 	bl	800cee8 <_sbrk_r>
 800c26c:	6030      	str	r0, [r6, #0]
 800c26e:	4621      	mov	r1, r4
 800c270:	4628      	mov	r0, r5
 800c272:	f000 fe39 	bl	800cee8 <_sbrk_r>
 800c276:	1c43      	adds	r3, r0, #1
 800c278:	d103      	bne.n	800c282 <sbrk_aligned+0x26>
 800c27a:	f04f 34ff 	mov.w	r4, #4294967295
 800c27e:	4620      	mov	r0, r4
 800c280:	bd70      	pop	{r4, r5, r6, pc}
 800c282:	1cc4      	adds	r4, r0, #3
 800c284:	f024 0403 	bic.w	r4, r4, #3
 800c288:	42a0      	cmp	r0, r4
 800c28a:	d0f8      	beq.n	800c27e <sbrk_aligned+0x22>
 800c28c:	1a21      	subs	r1, r4, r0
 800c28e:	4628      	mov	r0, r5
 800c290:	f000 fe2a 	bl	800cee8 <_sbrk_r>
 800c294:	3001      	adds	r0, #1
 800c296:	d1f2      	bne.n	800c27e <sbrk_aligned+0x22>
 800c298:	e7ef      	b.n	800c27a <sbrk_aligned+0x1e>
 800c29a:	bf00      	nop
 800c29c:	20004ea0 	.word	0x20004ea0

0800c2a0 <_malloc_r>:
 800c2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a4:	1ccd      	adds	r5, r1, #3
 800c2a6:	f025 0503 	bic.w	r5, r5, #3
 800c2aa:	3508      	adds	r5, #8
 800c2ac:	2d0c      	cmp	r5, #12
 800c2ae:	bf38      	it	cc
 800c2b0:	250c      	movcc	r5, #12
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	db01      	blt.n	800c2bc <_malloc_r+0x1c>
 800c2b8:	42a9      	cmp	r1, r5
 800c2ba:	d904      	bls.n	800c2c6 <_malloc_r+0x26>
 800c2bc:	230c      	movs	r3, #12
 800c2be:	6033      	str	r3, [r6, #0]
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c39c <_malloc_r+0xfc>
 800c2ca:	f000 f869 	bl	800c3a0 <__malloc_lock>
 800c2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d2:	461c      	mov	r4, r3
 800c2d4:	bb44      	cbnz	r4, 800c328 <_malloc_r+0x88>
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f7ff ffbf 	bl	800c25c <sbrk_aligned>
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	d158      	bne.n	800c396 <_malloc_r+0xf6>
 800c2e4:	f8d8 4000 	ldr.w	r4, [r8]
 800c2e8:	4627      	mov	r7, r4
 800c2ea:	2f00      	cmp	r7, #0
 800c2ec:	d143      	bne.n	800c376 <_malloc_r+0xd6>
 800c2ee:	2c00      	cmp	r4, #0
 800c2f0:	d04b      	beq.n	800c38a <_malloc_r+0xea>
 800c2f2:	6823      	ldr	r3, [r4, #0]
 800c2f4:	4639      	mov	r1, r7
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	eb04 0903 	add.w	r9, r4, r3
 800c2fc:	f000 fdf4 	bl	800cee8 <_sbrk_r>
 800c300:	4581      	cmp	r9, r0
 800c302:	d142      	bne.n	800c38a <_malloc_r+0xea>
 800c304:	6821      	ldr	r1, [r4, #0]
 800c306:	1a6d      	subs	r5, r5, r1
 800c308:	4629      	mov	r1, r5
 800c30a:	4630      	mov	r0, r6
 800c30c:	f7ff ffa6 	bl	800c25c <sbrk_aligned>
 800c310:	3001      	adds	r0, #1
 800c312:	d03a      	beq.n	800c38a <_malloc_r+0xea>
 800c314:	6823      	ldr	r3, [r4, #0]
 800c316:	442b      	add	r3, r5
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	f8d8 3000 	ldr.w	r3, [r8]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	bb62      	cbnz	r2, 800c37c <_malloc_r+0xdc>
 800c322:	f8c8 7000 	str.w	r7, [r8]
 800c326:	e00f      	b.n	800c348 <_malloc_r+0xa8>
 800c328:	6822      	ldr	r2, [r4, #0]
 800c32a:	1b52      	subs	r2, r2, r5
 800c32c:	d420      	bmi.n	800c370 <_malloc_r+0xd0>
 800c32e:	2a0b      	cmp	r2, #11
 800c330:	d917      	bls.n	800c362 <_malloc_r+0xc2>
 800c332:	1961      	adds	r1, r4, r5
 800c334:	42a3      	cmp	r3, r4
 800c336:	6025      	str	r5, [r4, #0]
 800c338:	bf18      	it	ne
 800c33a:	6059      	strne	r1, [r3, #4]
 800c33c:	6863      	ldr	r3, [r4, #4]
 800c33e:	bf08      	it	eq
 800c340:	f8c8 1000 	streq.w	r1, [r8]
 800c344:	5162      	str	r2, [r4, r5]
 800c346:	604b      	str	r3, [r1, #4]
 800c348:	4630      	mov	r0, r6
 800c34a:	f000 f82f 	bl	800c3ac <__malloc_unlock>
 800c34e:	f104 000b 	add.w	r0, r4, #11
 800c352:	1d23      	adds	r3, r4, #4
 800c354:	f020 0007 	bic.w	r0, r0, #7
 800c358:	1ac2      	subs	r2, r0, r3
 800c35a:	bf1c      	itt	ne
 800c35c:	1a1b      	subne	r3, r3, r0
 800c35e:	50a3      	strne	r3, [r4, r2]
 800c360:	e7af      	b.n	800c2c2 <_malloc_r+0x22>
 800c362:	6862      	ldr	r2, [r4, #4]
 800c364:	42a3      	cmp	r3, r4
 800c366:	bf0c      	ite	eq
 800c368:	f8c8 2000 	streq.w	r2, [r8]
 800c36c:	605a      	strne	r2, [r3, #4]
 800c36e:	e7eb      	b.n	800c348 <_malloc_r+0xa8>
 800c370:	4623      	mov	r3, r4
 800c372:	6864      	ldr	r4, [r4, #4]
 800c374:	e7ae      	b.n	800c2d4 <_malloc_r+0x34>
 800c376:	463c      	mov	r4, r7
 800c378:	687f      	ldr	r7, [r7, #4]
 800c37a:	e7b6      	b.n	800c2ea <_malloc_r+0x4a>
 800c37c:	461a      	mov	r2, r3
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	42a3      	cmp	r3, r4
 800c382:	d1fb      	bne.n	800c37c <_malloc_r+0xdc>
 800c384:	2300      	movs	r3, #0
 800c386:	6053      	str	r3, [r2, #4]
 800c388:	e7de      	b.n	800c348 <_malloc_r+0xa8>
 800c38a:	230c      	movs	r3, #12
 800c38c:	6033      	str	r3, [r6, #0]
 800c38e:	4630      	mov	r0, r6
 800c390:	f000 f80c 	bl	800c3ac <__malloc_unlock>
 800c394:	e794      	b.n	800c2c0 <_malloc_r+0x20>
 800c396:	6005      	str	r5, [r0, #0]
 800c398:	e7d6      	b.n	800c348 <_malloc_r+0xa8>
 800c39a:	bf00      	nop
 800c39c:	20004ea4 	.word	0x20004ea4

0800c3a0 <__malloc_lock>:
 800c3a0:	4801      	ldr	r0, [pc, #4]	@ (800c3a8 <__malloc_lock+0x8>)
 800c3a2:	f7ff b8a0 	b.w	800b4e6 <__retarget_lock_acquire_recursive>
 800c3a6:	bf00      	nop
 800c3a8:	20004e9c 	.word	0x20004e9c

0800c3ac <__malloc_unlock>:
 800c3ac:	4801      	ldr	r0, [pc, #4]	@ (800c3b4 <__malloc_unlock+0x8>)
 800c3ae:	f7ff b89b 	b.w	800b4e8 <__retarget_lock_release_recursive>
 800c3b2:	bf00      	nop
 800c3b4:	20004e9c 	.word	0x20004e9c

0800c3b8 <_Balloc>:
 800c3b8:	b570      	push	{r4, r5, r6, lr}
 800c3ba:	69c6      	ldr	r6, [r0, #28]
 800c3bc:	4604      	mov	r4, r0
 800c3be:	460d      	mov	r5, r1
 800c3c0:	b976      	cbnz	r6, 800c3e0 <_Balloc+0x28>
 800c3c2:	2010      	movs	r0, #16
 800c3c4:	f7ff ff42 	bl	800c24c <malloc>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	61e0      	str	r0, [r4, #28]
 800c3cc:	b920      	cbnz	r0, 800c3d8 <_Balloc+0x20>
 800c3ce:	4b18      	ldr	r3, [pc, #96]	@ (800c430 <_Balloc+0x78>)
 800c3d0:	4818      	ldr	r0, [pc, #96]	@ (800c434 <_Balloc+0x7c>)
 800c3d2:	216b      	movs	r1, #107	@ 0x6b
 800c3d4:	f000 fd98 	bl	800cf08 <__assert_func>
 800c3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3dc:	6006      	str	r6, [r0, #0]
 800c3de:	60c6      	str	r6, [r0, #12]
 800c3e0:	69e6      	ldr	r6, [r4, #28]
 800c3e2:	68f3      	ldr	r3, [r6, #12]
 800c3e4:	b183      	cbz	r3, 800c408 <_Balloc+0x50>
 800c3e6:	69e3      	ldr	r3, [r4, #28]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3ee:	b9b8      	cbnz	r0, 800c420 <_Balloc+0x68>
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c3f6:	1d72      	adds	r2, r6, #5
 800c3f8:	0092      	lsls	r2, r2, #2
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 fda2 	bl	800cf44 <_calloc_r>
 800c400:	b160      	cbz	r0, 800c41c <_Balloc+0x64>
 800c402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c406:	e00e      	b.n	800c426 <_Balloc+0x6e>
 800c408:	2221      	movs	r2, #33	@ 0x21
 800c40a:	2104      	movs	r1, #4
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 fd99 	bl	800cf44 <_calloc_r>
 800c412:	69e3      	ldr	r3, [r4, #28]
 800c414:	60f0      	str	r0, [r6, #12]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1e4      	bne.n	800c3e6 <_Balloc+0x2e>
 800c41c:	2000      	movs	r0, #0
 800c41e:	bd70      	pop	{r4, r5, r6, pc}
 800c420:	6802      	ldr	r2, [r0, #0]
 800c422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c426:	2300      	movs	r3, #0
 800c428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c42c:	e7f7      	b.n	800c41e <_Balloc+0x66>
 800c42e:	bf00      	nop
 800c430:	0800e5a6 	.word	0x0800e5a6
 800c434:	0800e626 	.word	0x0800e626

0800c438 <_Bfree>:
 800c438:	b570      	push	{r4, r5, r6, lr}
 800c43a:	69c6      	ldr	r6, [r0, #28]
 800c43c:	4605      	mov	r5, r0
 800c43e:	460c      	mov	r4, r1
 800c440:	b976      	cbnz	r6, 800c460 <_Bfree+0x28>
 800c442:	2010      	movs	r0, #16
 800c444:	f7ff ff02 	bl	800c24c <malloc>
 800c448:	4602      	mov	r2, r0
 800c44a:	61e8      	str	r0, [r5, #28]
 800c44c:	b920      	cbnz	r0, 800c458 <_Bfree+0x20>
 800c44e:	4b09      	ldr	r3, [pc, #36]	@ (800c474 <_Bfree+0x3c>)
 800c450:	4809      	ldr	r0, [pc, #36]	@ (800c478 <_Bfree+0x40>)
 800c452:	218f      	movs	r1, #143	@ 0x8f
 800c454:	f000 fd58 	bl	800cf08 <__assert_func>
 800c458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c45c:	6006      	str	r6, [r0, #0]
 800c45e:	60c6      	str	r6, [r0, #12]
 800c460:	b13c      	cbz	r4, 800c472 <_Bfree+0x3a>
 800c462:	69eb      	ldr	r3, [r5, #28]
 800c464:	6862      	ldr	r2, [r4, #4]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c46c:	6021      	str	r1, [r4, #0]
 800c46e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c472:	bd70      	pop	{r4, r5, r6, pc}
 800c474:	0800e5a6 	.word	0x0800e5a6
 800c478:	0800e626 	.word	0x0800e626

0800c47c <__multadd>:
 800c47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c480:	690d      	ldr	r5, [r1, #16]
 800c482:	4607      	mov	r7, r0
 800c484:	460c      	mov	r4, r1
 800c486:	461e      	mov	r6, r3
 800c488:	f101 0c14 	add.w	ip, r1, #20
 800c48c:	2000      	movs	r0, #0
 800c48e:	f8dc 3000 	ldr.w	r3, [ip]
 800c492:	b299      	uxth	r1, r3
 800c494:	fb02 6101 	mla	r1, r2, r1, r6
 800c498:	0c1e      	lsrs	r6, r3, #16
 800c49a:	0c0b      	lsrs	r3, r1, #16
 800c49c:	fb02 3306 	mla	r3, r2, r6, r3
 800c4a0:	b289      	uxth	r1, r1
 800c4a2:	3001      	adds	r0, #1
 800c4a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4a8:	4285      	cmp	r5, r0
 800c4aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c4ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4b2:	dcec      	bgt.n	800c48e <__multadd+0x12>
 800c4b4:	b30e      	cbz	r6, 800c4fa <__multadd+0x7e>
 800c4b6:	68a3      	ldr	r3, [r4, #8]
 800c4b8:	42ab      	cmp	r3, r5
 800c4ba:	dc19      	bgt.n	800c4f0 <__multadd+0x74>
 800c4bc:	6861      	ldr	r1, [r4, #4]
 800c4be:	4638      	mov	r0, r7
 800c4c0:	3101      	adds	r1, #1
 800c4c2:	f7ff ff79 	bl	800c3b8 <_Balloc>
 800c4c6:	4680      	mov	r8, r0
 800c4c8:	b928      	cbnz	r0, 800c4d6 <__multadd+0x5a>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c500 <__multadd+0x84>)
 800c4ce:	480d      	ldr	r0, [pc, #52]	@ (800c504 <__multadd+0x88>)
 800c4d0:	21ba      	movs	r1, #186	@ 0xba
 800c4d2:	f000 fd19 	bl	800cf08 <__assert_func>
 800c4d6:	6922      	ldr	r2, [r4, #16]
 800c4d8:	3202      	adds	r2, #2
 800c4da:	f104 010c 	add.w	r1, r4, #12
 800c4de:	0092      	lsls	r2, r2, #2
 800c4e0:	300c      	adds	r0, #12
 800c4e2:	f7ff f802 	bl	800b4ea <memcpy>
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	f7ff ffa5 	bl	800c438 <_Bfree>
 800c4ee:	4644      	mov	r4, r8
 800c4f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4f4:	3501      	adds	r5, #1
 800c4f6:	615e      	str	r6, [r3, #20]
 800c4f8:	6125      	str	r5, [r4, #16]
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c500:	0800e615 	.word	0x0800e615
 800c504:	0800e626 	.word	0x0800e626

0800c508 <__hi0bits>:
 800c508:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c50c:	4603      	mov	r3, r0
 800c50e:	bf36      	itet	cc
 800c510:	0403      	lslcc	r3, r0, #16
 800c512:	2000      	movcs	r0, #0
 800c514:	2010      	movcc	r0, #16
 800c516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c51a:	bf3c      	itt	cc
 800c51c:	021b      	lslcc	r3, r3, #8
 800c51e:	3008      	addcc	r0, #8
 800c520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c524:	bf3c      	itt	cc
 800c526:	011b      	lslcc	r3, r3, #4
 800c528:	3004      	addcc	r0, #4
 800c52a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c52e:	bf3c      	itt	cc
 800c530:	009b      	lslcc	r3, r3, #2
 800c532:	3002      	addcc	r0, #2
 800c534:	2b00      	cmp	r3, #0
 800c536:	db05      	blt.n	800c544 <__hi0bits+0x3c>
 800c538:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c53c:	f100 0001 	add.w	r0, r0, #1
 800c540:	bf08      	it	eq
 800c542:	2020      	moveq	r0, #32
 800c544:	4770      	bx	lr

0800c546 <__lo0bits>:
 800c546:	6803      	ldr	r3, [r0, #0]
 800c548:	4602      	mov	r2, r0
 800c54a:	f013 0007 	ands.w	r0, r3, #7
 800c54e:	d00b      	beq.n	800c568 <__lo0bits+0x22>
 800c550:	07d9      	lsls	r1, r3, #31
 800c552:	d421      	bmi.n	800c598 <__lo0bits+0x52>
 800c554:	0798      	lsls	r0, r3, #30
 800c556:	bf49      	itett	mi
 800c558:	085b      	lsrmi	r3, r3, #1
 800c55a:	089b      	lsrpl	r3, r3, #2
 800c55c:	2001      	movmi	r0, #1
 800c55e:	6013      	strmi	r3, [r2, #0]
 800c560:	bf5c      	itt	pl
 800c562:	6013      	strpl	r3, [r2, #0]
 800c564:	2002      	movpl	r0, #2
 800c566:	4770      	bx	lr
 800c568:	b299      	uxth	r1, r3
 800c56a:	b909      	cbnz	r1, 800c570 <__lo0bits+0x2a>
 800c56c:	0c1b      	lsrs	r3, r3, #16
 800c56e:	2010      	movs	r0, #16
 800c570:	b2d9      	uxtb	r1, r3
 800c572:	b909      	cbnz	r1, 800c578 <__lo0bits+0x32>
 800c574:	3008      	adds	r0, #8
 800c576:	0a1b      	lsrs	r3, r3, #8
 800c578:	0719      	lsls	r1, r3, #28
 800c57a:	bf04      	itt	eq
 800c57c:	091b      	lsreq	r3, r3, #4
 800c57e:	3004      	addeq	r0, #4
 800c580:	0799      	lsls	r1, r3, #30
 800c582:	bf04      	itt	eq
 800c584:	089b      	lsreq	r3, r3, #2
 800c586:	3002      	addeq	r0, #2
 800c588:	07d9      	lsls	r1, r3, #31
 800c58a:	d403      	bmi.n	800c594 <__lo0bits+0x4e>
 800c58c:	085b      	lsrs	r3, r3, #1
 800c58e:	f100 0001 	add.w	r0, r0, #1
 800c592:	d003      	beq.n	800c59c <__lo0bits+0x56>
 800c594:	6013      	str	r3, [r2, #0]
 800c596:	4770      	bx	lr
 800c598:	2000      	movs	r0, #0
 800c59a:	4770      	bx	lr
 800c59c:	2020      	movs	r0, #32
 800c59e:	4770      	bx	lr

0800c5a0 <__i2b>:
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	f7ff ff07 	bl	800c3b8 <_Balloc>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	b928      	cbnz	r0, 800c5ba <__i2b+0x1a>
 800c5ae:	4b05      	ldr	r3, [pc, #20]	@ (800c5c4 <__i2b+0x24>)
 800c5b0:	4805      	ldr	r0, [pc, #20]	@ (800c5c8 <__i2b+0x28>)
 800c5b2:	f240 1145 	movw	r1, #325	@ 0x145
 800c5b6:	f000 fca7 	bl	800cf08 <__assert_func>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	6144      	str	r4, [r0, #20]
 800c5be:	6103      	str	r3, [r0, #16]
 800c5c0:	bd10      	pop	{r4, pc}
 800c5c2:	bf00      	nop
 800c5c4:	0800e615 	.word	0x0800e615
 800c5c8:	0800e626 	.word	0x0800e626

0800c5cc <__multiply>:
 800c5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d0:	4617      	mov	r7, r2
 800c5d2:	690a      	ldr	r2, [r1, #16]
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	bfa8      	it	ge
 800c5da:	463b      	movge	r3, r7
 800c5dc:	4689      	mov	r9, r1
 800c5de:	bfa4      	itt	ge
 800c5e0:	460f      	movge	r7, r1
 800c5e2:	4699      	movge	r9, r3
 800c5e4:	693d      	ldr	r5, [r7, #16]
 800c5e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	6879      	ldr	r1, [r7, #4]
 800c5ee:	eb05 060a 	add.w	r6, r5, sl
 800c5f2:	42b3      	cmp	r3, r6
 800c5f4:	b085      	sub	sp, #20
 800c5f6:	bfb8      	it	lt
 800c5f8:	3101      	addlt	r1, #1
 800c5fa:	f7ff fedd 	bl	800c3b8 <_Balloc>
 800c5fe:	b930      	cbnz	r0, 800c60e <__multiply+0x42>
 800c600:	4602      	mov	r2, r0
 800c602:	4b41      	ldr	r3, [pc, #260]	@ (800c708 <__multiply+0x13c>)
 800c604:	4841      	ldr	r0, [pc, #260]	@ (800c70c <__multiply+0x140>)
 800c606:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c60a:	f000 fc7d 	bl	800cf08 <__assert_func>
 800c60e:	f100 0414 	add.w	r4, r0, #20
 800c612:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c616:	4623      	mov	r3, r4
 800c618:	2200      	movs	r2, #0
 800c61a:	4573      	cmp	r3, lr
 800c61c:	d320      	bcc.n	800c660 <__multiply+0x94>
 800c61e:	f107 0814 	add.w	r8, r7, #20
 800c622:	f109 0114 	add.w	r1, r9, #20
 800c626:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c62a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c62e:	9302      	str	r3, [sp, #8]
 800c630:	1beb      	subs	r3, r5, r7
 800c632:	3b15      	subs	r3, #21
 800c634:	f023 0303 	bic.w	r3, r3, #3
 800c638:	3304      	adds	r3, #4
 800c63a:	3715      	adds	r7, #21
 800c63c:	42bd      	cmp	r5, r7
 800c63e:	bf38      	it	cc
 800c640:	2304      	movcc	r3, #4
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	9b02      	ldr	r3, [sp, #8]
 800c646:	9103      	str	r1, [sp, #12]
 800c648:	428b      	cmp	r3, r1
 800c64a:	d80c      	bhi.n	800c666 <__multiply+0x9a>
 800c64c:	2e00      	cmp	r6, #0
 800c64e:	dd03      	ble.n	800c658 <__multiply+0x8c>
 800c650:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c654:	2b00      	cmp	r3, #0
 800c656:	d055      	beq.n	800c704 <__multiply+0x138>
 800c658:	6106      	str	r6, [r0, #16]
 800c65a:	b005      	add	sp, #20
 800c65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c660:	f843 2b04 	str.w	r2, [r3], #4
 800c664:	e7d9      	b.n	800c61a <__multiply+0x4e>
 800c666:	f8b1 a000 	ldrh.w	sl, [r1]
 800c66a:	f1ba 0f00 	cmp.w	sl, #0
 800c66e:	d01f      	beq.n	800c6b0 <__multiply+0xe4>
 800c670:	46c4      	mov	ip, r8
 800c672:	46a1      	mov	r9, r4
 800c674:	2700      	movs	r7, #0
 800c676:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c67a:	f8d9 3000 	ldr.w	r3, [r9]
 800c67e:	fa1f fb82 	uxth.w	fp, r2
 800c682:	b29b      	uxth	r3, r3
 800c684:	fb0a 330b 	mla	r3, sl, fp, r3
 800c688:	443b      	add	r3, r7
 800c68a:	f8d9 7000 	ldr.w	r7, [r9]
 800c68e:	0c12      	lsrs	r2, r2, #16
 800c690:	0c3f      	lsrs	r7, r7, #16
 800c692:	fb0a 7202 	mla	r2, sl, r2, r7
 800c696:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6a0:	4565      	cmp	r5, ip
 800c6a2:	f849 3b04 	str.w	r3, [r9], #4
 800c6a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c6aa:	d8e4      	bhi.n	800c676 <__multiply+0xaa>
 800c6ac:	9b01      	ldr	r3, [sp, #4]
 800c6ae:	50e7      	str	r7, [r4, r3]
 800c6b0:	9b03      	ldr	r3, [sp, #12]
 800c6b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c6b6:	3104      	adds	r1, #4
 800c6b8:	f1b9 0f00 	cmp.w	r9, #0
 800c6bc:	d020      	beq.n	800c700 <__multiply+0x134>
 800c6be:	6823      	ldr	r3, [r4, #0]
 800c6c0:	4647      	mov	r7, r8
 800c6c2:	46a4      	mov	ip, r4
 800c6c4:	f04f 0a00 	mov.w	sl, #0
 800c6c8:	f8b7 b000 	ldrh.w	fp, [r7]
 800c6cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c6d0:	fb09 220b 	mla	r2, r9, fp, r2
 800c6d4:	4452      	add	r2, sl
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6dc:	f84c 3b04 	str.w	r3, [ip], #4
 800c6e0:	f857 3b04 	ldr.w	r3, [r7], #4
 800c6e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6e8:	f8bc 3000 	ldrh.w	r3, [ip]
 800c6ec:	fb09 330a 	mla	r3, r9, sl, r3
 800c6f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c6f4:	42bd      	cmp	r5, r7
 800c6f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6fa:	d8e5      	bhi.n	800c6c8 <__multiply+0xfc>
 800c6fc:	9a01      	ldr	r2, [sp, #4]
 800c6fe:	50a3      	str	r3, [r4, r2]
 800c700:	3404      	adds	r4, #4
 800c702:	e79f      	b.n	800c644 <__multiply+0x78>
 800c704:	3e01      	subs	r6, #1
 800c706:	e7a1      	b.n	800c64c <__multiply+0x80>
 800c708:	0800e615 	.word	0x0800e615
 800c70c:	0800e626 	.word	0x0800e626

0800c710 <__pow5mult>:
 800c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c714:	4615      	mov	r5, r2
 800c716:	f012 0203 	ands.w	r2, r2, #3
 800c71a:	4607      	mov	r7, r0
 800c71c:	460e      	mov	r6, r1
 800c71e:	d007      	beq.n	800c730 <__pow5mult+0x20>
 800c720:	4c25      	ldr	r4, [pc, #148]	@ (800c7b8 <__pow5mult+0xa8>)
 800c722:	3a01      	subs	r2, #1
 800c724:	2300      	movs	r3, #0
 800c726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c72a:	f7ff fea7 	bl	800c47c <__multadd>
 800c72e:	4606      	mov	r6, r0
 800c730:	10ad      	asrs	r5, r5, #2
 800c732:	d03d      	beq.n	800c7b0 <__pow5mult+0xa0>
 800c734:	69fc      	ldr	r4, [r7, #28]
 800c736:	b97c      	cbnz	r4, 800c758 <__pow5mult+0x48>
 800c738:	2010      	movs	r0, #16
 800c73a:	f7ff fd87 	bl	800c24c <malloc>
 800c73e:	4602      	mov	r2, r0
 800c740:	61f8      	str	r0, [r7, #28]
 800c742:	b928      	cbnz	r0, 800c750 <__pow5mult+0x40>
 800c744:	4b1d      	ldr	r3, [pc, #116]	@ (800c7bc <__pow5mult+0xac>)
 800c746:	481e      	ldr	r0, [pc, #120]	@ (800c7c0 <__pow5mult+0xb0>)
 800c748:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c74c:	f000 fbdc 	bl	800cf08 <__assert_func>
 800c750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c754:	6004      	str	r4, [r0, #0]
 800c756:	60c4      	str	r4, [r0, #12]
 800c758:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c75c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c760:	b94c      	cbnz	r4, 800c776 <__pow5mult+0x66>
 800c762:	f240 2171 	movw	r1, #625	@ 0x271
 800c766:	4638      	mov	r0, r7
 800c768:	f7ff ff1a 	bl	800c5a0 <__i2b>
 800c76c:	2300      	movs	r3, #0
 800c76e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c772:	4604      	mov	r4, r0
 800c774:	6003      	str	r3, [r0, #0]
 800c776:	f04f 0900 	mov.w	r9, #0
 800c77a:	07eb      	lsls	r3, r5, #31
 800c77c:	d50a      	bpl.n	800c794 <__pow5mult+0x84>
 800c77e:	4631      	mov	r1, r6
 800c780:	4622      	mov	r2, r4
 800c782:	4638      	mov	r0, r7
 800c784:	f7ff ff22 	bl	800c5cc <__multiply>
 800c788:	4631      	mov	r1, r6
 800c78a:	4680      	mov	r8, r0
 800c78c:	4638      	mov	r0, r7
 800c78e:	f7ff fe53 	bl	800c438 <_Bfree>
 800c792:	4646      	mov	r6, r8
 800c794:	106d      	asrs	r5, r5, #1
 800c796:	d00b      	beq.n	800c7b0 <__pow5mult+0xa0>
 800c798:	6820      	ldr	r0, [r4, #0]
 800c79a:	b938      	cbnz	r0, 800c7ac <__pow5mult+0x9c>
 800c79c:	4622      	mov	r2, r4
 800c79e:	4621      	mov	r1, r4
 800c7a0:	4638      	mov	r0, r7
 800c7a2:	f7ff ff13 	bl	800c5cc <__multiply>
 800c7a6:	6020      	str	r0, [r4, #0]
 800c7a8:	f8c0 9000 	str.w	r9, [r0]
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	e7e4      	b.n	800c77a <__pow5mult+0x6a>
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b6:	bf00      	nop
 800c7b8:	0800e6d8 	.word	0x0800e6d8
 800c7bc:	0800e5a6 	.word	0x0800e5a6
 800c7c0:	0800e626 	.word	0x0800e626

0800c7c4 <__lshift>:
 800c7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	6849      	ldr	r1, [r1, #4]
 800c7cc:	6923      	ldr	r3, [r4, #16]
 800c7ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7d2:	68a3      	ldr	r3, [r4, #8]
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	4691      	mov	r9, r2
 800c7d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7dc:	f108 0601 	add.w	r6, r8, #1
 800c7e0:	42b3      	cmp	r3, r6
 800c7e2:	db0b      	blt.n	800c7fc <__lshift+0x38>
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	f7ff fde7 	bl	800c3b8 <_Balloc>
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	b948      	cbnz	r0, 800c802 <__lshift+0x3e>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	4b28      	ldr	r3, [pc, #160]	@ (800c894 <__lshift+0xd0>)
 800c7f2:	4829      	ldr	r0, [pc, #164]	@ (800c898 <__lshift+0xd4>)
 800c7f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c7f8:	f000 fb86 	bl	800cf08 <__assert_func>
 800c7fc:	3101      	adds	r1, #1
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	e7ee      	b.n	800c7e0 <__lshift+0x1c>
 800c802:	2300      	movs	r3, #0
 800c804:	f100 0114 	add.w	r1, r0, #20
 800c808:	f100 0210 	add.w	r2, r0, #16
 800c80c:	4618      	mov	r0, r3
 800c80e:	4553      	cmp	r3, sl
 800c810:	db33      	blt.n	800c87a <__lshift+0xb6>
 800c812:	6920      	ldr	r0, [r4, #16]
 800c814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c818:	f104 0314 	add.w	r3, r4, #20
 800c81c:	f019 091f 	ands.w	r9, r9, #31
 800c820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c828:	d02b      	beq.n	800c882 <__lshift+0xbe>
 800c82a:	f1c9 0e20 	rsb	lr, r9, #32
 800c82e:	468a      	mov	sl, r1
 800c830:	2200      	movs	r2, #0
 800c832:	6818      	ldr	r0, [r3, #0]
 800c834:	fa00 f009 	lsl.w	r0, r0, r9
 800c838:	4310      	orrs	r0, r2
 800c83a:	f84a 0b04 	str.w	r0, [sl], #4
 800c83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c842:	459c      	cmp	ip, r3
 800c844:	fa22 f20e 	lsr.w	r2, r2, lr
 800c848:	d8f3      	bhi.n	800c832 <__lshift+0x6e>
 800c84a:	ebac 0304 	sub.w	r3, ip, r4
 800c84e:	3b15      	subs	r3, #21
 800c850:	f023 0303 	bic.w	r3, r3, #3
 800c854:	3304      	adds	r3, #4
 800c856:	f104 0015 	add.w	r0, r4, #21
 800c85a:	4560      	cmp	r0, ip
 800c85c:	bf88      	it	hi
 800c85e:	2304      	movhi	r3, #4
 800c860:	50ca      	str	r2, [r1, r3]
 800c862:	b10a      	cbz	r2, 800c868 <__lshift+0xa4>
 800c864:	f108 0602 	add.w	r6, r8, #2
 800c868:	3e01      	subs	r6, #1
 800c86a:	4638      	mov	r0, r7
 800c86c:	612e      	str	r6, [r5, #16]
 800c86e:	4621      	mov	r1, r4
 800c870:	f7ff fde2 	bl	800c438 <_Bfree>
 800c874:	4628      	mov	r0, r5
 800c876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c87e:	3301      	adds	r3, #1
 800c880:	e7c5      	b.n	800c80e <__lshift+0x4a>
 800c882:	3904      	subs	r1, #4
 800c884:	f853 2b04 	ldr.w	r2, [r3], #4
 800c888:	f841 2f04 	str.w	r2, [r1, #4]!
 800c88c:	459c      	cmp	ip, r3
 800c88e:	d8f9      	bhi.n	800c884 <__lshift+0xc0>
 800c890:	e7ea      	b.n	800c868 <__lshift+0xa4>
 800c892:	bf00      	nop
 800c894:	0800e615 	.word	0x0800e615
 800c898:	0800e626 	.word	0x0800e626

0800c89c <__mcmp>:
 800c89c:	690a      	ldr	r2, [r1, #16]
 800c89e:	4603      	mov	r3, r0
 800c8a0:	6900      	ldr	r0, [r0, #16]
 800c8a2:	1a80      	subs	r0, r0, r2
 800c8a4:	b530      	push	{r4, r5, lr}
 800c8a6:	d10e      	bne.n	800c8c6 <__mcmp+0x2a>
 800c8a8:	3314      	adds	r3, #20
 800c8aa:	3114      	adds	r1, #20
 800c8ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c8b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c8b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c8b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c8bc:	4295      	cmp	r5, r2
 800c8be:	d003      	beq.n	800c8c8 <__mcmp+0x2c>
 800c8c0:	d205      	bcs.n	800c8ce <__mcmp+0x32>
 800c8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c6:	bd30      	pop	{r4, r5, pc}
 800c8c8:	42a3      	cmp	r3, r4
 800c8ca:	d3f3      	bcc.n	800c8b4 <__mcmp+0x18>
 800c8cc:	e7fb      	b.n	800c8c6 <__mcmp+0x2a>
 800c8ce:	2001      	movs	r0, #1
 800c8d0:	e7f9      	b.n	800c8c6 <__mcmp+0x2a>
	...

0800c8d4 <__mdiff>:
 800c8d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	4689      	mov	r9, r1
 800c8da:	4606      	mov	r6, r0
 800c8dc:	4611      	mov	r1, r2
 800c8de:	4648      	mov	r0, r9
 800c8e0:	4614      	mov	r4, r2
 800c8e2:	f7ff ffdb 	bl	800c89c <__mcmp>
 800c8e6:	1e05      	subs	r5, r0, #0
 800c8e8:	d112      	bne.n	800c910 <__mdiff+0x3c>
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f7ff fd63 	bl	800c3b8 <_Balloc>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	b928      	cbnz	r0, 800c902 <__mdiff+0x2e>
 800c8f6:	4b3f      	ldr	r3, [pc, #252]	@ (800c9f4 <__mdiff+0x120>)
 800c8f8:	f240 2137 	movw	r1, #567	@ 0x237
 800c8fc:	483e      	ldr	r0, [pc, #248]	@ (800c9f8 <__mdiff+0x124>)
 800c8fe:	f000 fb03 	bl	800cf08 <__assert_func>
 800c902:	2301      	movs	r3, #1
 800c904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c908:	4610      	mov	r0, r2
 800c90a:	b003      	add	sp, #12
 800c90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c910:	bfbc      	itt	lt
 800c912:	464b      	movlt	r3, r9
 800c914:	46a1      	movlt	r9, r4
 800c916:	4630      	mov	r0, r6
 800c918:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c91c:	bfba      	itte	lt
 800c91e:	461c      	movlt	r4, r3
 800c920:	2501      	movlt	r5, #1
 800c922:	2500      	movge	r5, #0
 800c924:	f7ff fd48 	bl	800c3b8 <_Balloc>
 800c928:	4602      	mov	r2, r0
 800c92a:	b918      	cbnz	r0, 800c934 <__mdiff+0x60>
 800c92c:	4b31      	ldr	r3, [pc, #196]	@ (800c9f4 <__mdiff+0x120>)
 800c92e:	f240 2145 	movw	r1, #581	@ 0x245
 800c932:	e7e3      	b.n	800c8fc <__mdiff+0x28>
 800c934:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c938:	6926      	ldr	r6, [r4, #16]
 800c93a:	60c5      	str	r5, [r0, #12]
 800c93c:	f109 0310 	add.w	r3, r9, #16
 800c940:	f109 0514 	add.w	r5, r9, #20
 800c944:	f104 0e14 	add.w	lr, r4, #20
 800c948:	f100 0b14 	add.w	fp, r0, #20
 800c94c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c950:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	46d9      	mov	r9, fp
 800c958:	f04f 0c00 	mov.w	ip, #0
 800c95c:	9b01      	ldr	r3, [sp, #4]
 800c95e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c962:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c966:	9301      	str	r3, [sp, #4]
 800c968:	fa1f f38a 	uxth.w	r3, sl
 800c96c:	4619      	mov	r1, r3
 800c96e:	b283      	uxth	r3, r0
 800c970:	1acb      	subs	r3, r1, r3
 800c972:	0c00      	lsrs	r0, r0, #16
 800c974:	4463      	add	r3, ip
 800c976:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c97a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c97e:	b29b      	uxth	r3, r3
 800c980:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c984:	4576      	cmp	r6, lr
 800c986:	f849 3b04 	str.w	r3, [r9], #4
 800c98a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c98e:	d8e5      	bhi.n	800c95c <__mdiff+0x88>
 800c990:	1b33      	subs	r3, r6, r4
 800c992:	3b15      	subs	r3, #21
 800c994:	f023 0303 	bic.w	r3, r3, #3
 800c998:	3415      	adds	r4, #21
 800c99a:	3304      	adds	r3, #4
 800c99c:	42a6      	cmp	r6, r4
 800c99e:	bf38      	it	cc
 800c9a0:	2304      	movcc	r3, #4
 800c9a2:	441d      	add	r5, r3
 800c9a4:	445b      	add	r3, fp
 800c9a6:	461e      	mov	r6, r3
 800c9a8:	462c      	mov	r4, r5
 800c9aa:	4544      	cmp	r4, r8
 800c9ac:	d30e      	bcc.n	800c9cc <__mdiff+0xf8>
 800c9ae:	f108 0103 	add.w	r1, r8, #3
 800c9b2:	1b49      	subs	r1, r1, r5
 800c9b4:	f021 0103 	bic.w	r1, r1, #3
 800c9b8:	3d03      	subs	r5, #3
 800c9ba:	45a8      	cmp	r8, r5
 800c9bc:	bf38      	it	cc
 800c9be:	2100      	movcc	r1, #0
 800c9c0:	440b      	add	r3, r1
 800c9c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9c6:	b191      	cbz	r1, 800c9ee <__mdiff+0x11a>
 800c9c8:	6117      	str	r7, [r2, #16]
 800c9ca:	e79d      	b.n	800c908 <__mdiff+0x34>
 800c9cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800c9d0:	46e6      	mov	lr, ip
 800c9d2:	0c08      	lsrs	r0, r1, #16
 800c9d4:	fa1c fc81 	uxtah	ip, ip, r1
 800c9d8:	4471      	add	r1, lr
 800c9da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c9de:	b289      	uxth	r1, r1
 800c9e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c9e4:	f846 1b04 	str.w	r1, [r6], #4
 800c9e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9ec:	e7dd      	b.n	800c9aa <__mdiff+0xd6>
 800c9ee:	3f01      	subs	r7, #1
 800c9f0:	e7e7      	b.n	800c9c2 <__mdiff+0xee>
 800c9f2:	bf00      	nop
 800c9f4:	0800e615 	.word	0x0800e615
 800c9f8:	0800e626 	.word	0x0800e626

0800c9fc <__d2b>:
 800c9fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca00:	460f      	mov	r7, r1
 800ca02:	2101      	movs	r1, #1
 800ca04:	ec59 8b10 	vmov	r8, r9, d0
 800ca08:	4616      	mov	r6, r2
 800ca0a:	f7ff fcd5 	bl	800c3b8 <_Balloc>
 800ca0e:	4604      	mov	r4, r0
 800ca10:	b930      	cbnz	r0, 800ca20 <__d2b+0x24>
 800ca12:	4602      	mov	r2, r0
 800ca14:	4b23      	ldr	r3, [pc, #140]	@ (800caa4 <__d2b+0xa8>)
 800ca16:	4824      	ldr	r0, [pc, #144]	@ (800caa8 <__d2b+0xac>)
 800ca18:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca1c:	f000 fa74 	bl	800cf08 <__assert_func>
 800ca20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca28:	b10d      	cbz	r5, 800ca2e <__d2b+0x32>
 800ca2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca2e:	9301      	str	r3, [sp, #4]
 800ca30:	f1b8 0300 	subs.w	r3, r8, #0
 800ca34:	d023      	beq.n	800ca7e <__d2b+0x82>
 800ca36:	4668      	mov	r0, sp
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	f7ff fd84 	bl	800c546 <__lo0bits>
 800ca3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca42:	b1d0      	cbz	r0, 800ca7a <__d2b+0x7e>
 800ca44:	f1c0 0320 	rsb	r3, r0, #32
 800ca48:	fa02 f303 	lsl.w	r3, r2, r3
 800ca4c:	430b      	orrs	r3, r1
 800ca4e:	40c2      	lsrs	r2, r0
 800ca50:	6163      	str	r3, [r4, #20]
 800ca52:	9201      	str	r2, [sp, #4]
 800ca54:	9b01      	ldr	r3, [sp, #4]
 800ca56:	61a3      	str	r3, [r4, #24]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	bf0c      	ite	eq
 800ca5c:	2201      	moveq	r2, #1
 800ca5e:	2202      	movne	r2, #2
 800ca60:	6122      	str	r2, [r4, #16]
 800ca62:	b1a5      	cbz	r5, 800ca8e <__d2b+0x92>
 800ca64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca68:	4405      	add	r5, r0
 800ca6a:	603d      	str	r5, [r7, #0]
 800ca6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca70:	6030      	str	r0, [r6, #0]
 800ca72:	4620      	mov	r0, r4
 800ca74:	b003      	add	sp, #12
 800ca76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca7a:	6161      	str	r1, [r4, #20]
 800ca7c:	e7ea      	b.n	800ca54 <__d2b+0x58>
 800ca7e:	a801      	add	r0, sp, #4
 800ca80:	f7ff fd61 	bl	800c546 <__lo0bits>
 800ca84:	9b01      	ldr	r3, [sp, #4]
 800ca86:	6163      	str	r3, [r4, #20]
 800ca88:	3020      	adds	r0, #32
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	e7e8      	b.n	800ca60 <__d2b+0x64>
 800ca8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ca96:	6038      	str	r0, [r7, #0]
 800ca98:	6918      	ldr	r0, [r3, #16]
 800ca9a:	f7ff fd35 	bl	800c508 <__hi0bits>
 800ca9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800caa2:	e7e5      	b.n	800ca70 <__d2b+0x74>
 800caa4:	0800e615 	.word	0x0800e615
 800caa8:	0800e626 	.word	0x0800e626

0800caac <__ssputs_r>:
 800caac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab0:	688e      	ldr	r6, [r1, #8]
 800cab2:	461f      	mov	r7, r3
 800cab4:	42be      	cmp	r6, r7
 800cab6:	680b      	ldr	r3, [r1, #0]
 800cab8:	4682      	mov	sl, r0
 800caba:	460c      	mov	r4, r1
 800cabc:	4690      	mov	r8, r2
 800cabe:	d82d      	bhi.n	800cb1c <__ssputs_r+0x70>
 800cac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cac4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cac8:	d026      	beq.n	800cb18 <__ssputs_r+0x6c>
 800caca:	6965      	ldr	r5, [r4, #20]
 800cacc:	6909      	ldr	r1, [r1, #16]
 800cace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cad2:	eba3 0901 	sub.w	r9, r3, r1
 800cad6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cada:	1c7b      	adds	r3, r7, #1
 800cadc:	444b      	add	r3, r9
 800cade:	106d      	asrs	r5, r5, #1
 800cae0:	429d      	cmp	r5, r3
 800cae2:	bf38      	it	cc
 800cae4:	461d      	movcc	r5, r3
 800cae6:	0553      	lsls	r3, r2, #21
 800cae8:	d527      	bpl.n	800cb3a <__ssputs_r+0x8e>
 800caea:	4629      	mov	r1, r5
 800caec:	f7ff fbd8 	bl	800c2a0 <_malloc_r>
 800caf0:	4606      	mov	r6, r0
 800caf2:	b360      	cbz	r0, 800cb4e <__ssputs_r+0xa2>
 800caf4:	6921      	ldr	r1, [r4, #16]
 800caf6:	464a      	mov	r2, r9
 800caf8:	f7fe fcf7 	bl	800b4ea <memcpy>
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb06:	81a3      	strh	r3, [r4, #12]
 800cb08:	6126      	str	r6, [r4, #16]
 800cb0a:	6165      	str	r5, [r4, #20]
 800cb0c:	444e      	add	r6, r9
 800cb0e:	eba5 0509 	sub.w	r5, r5, r9
 800cb12:	6026      	str	r6, [r4, #0]
 800cb14:	60a5      	str	r5, [r4, #8]
 800cb16:	463e      	mov	r6, r7
 800cb18:	42be      	cmp	r6, r7
 800cb1a:	d900      	bls.n	800cb1e <__ssputs_r+0x72>
 800cb1c:	463e      	mov	r6, r7
 800cb1e:	6820      	ldr	r0, [r4, #0]
 800cb20:	4632      	mov	r2, r6
 800cb22:	4641      	mov	r1, r8
 800cb24:	f000 f9c6 	bl	800ceb4 <memmove>
 800cb28:	68a3      	ldr	r3, [r4, #8]
 800cb2a:	1b9b      	subs	r3, r3, r6
 800cb2c:	60a3      	str	r3, [r4, #8]
 800cb2e:	6823      	ldr	r3, [r4, #0]
 800cb30:	4433      	add	r3, r6
 800cb32:	6023      	str	r3, [r4, #0]
 800cb34:	2000      	movs	r0, #0
 800cb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3a:	462a      	mov	r2, r5
 800cb3c:	f000 fa28 	bl	800cf90 <_realloc_r>
 800cb40:	4606      	mov	r6, r0
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d1e0      	bne.n	800cb08 <__ssputs_r+0x5c>
 800cb46:	6921      	ldr	r1, [r4, #16]
 800cb48:	4650      	mov	r0, sl
 800cb4a:	f7ff fb35 	bl	800c1b8 <_free_r>
 800cb4e:	230c      	movs	r3, #12
 800cb50:	f8ca 3000 	str.w	r3, [sl]
 800cb54:	89a3      	ldrh	r3, [r4, #12]
 800cb56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb5a:	81a3      	strh	r3, [r4, #12]
 800cb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb60:	e7e9      	b.n	800cb36 <__ssputs_r+0x8a>
	...

0800cb64 <_svfiprintf_r>:
 800cb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb68:	4698      	mov	r8, r3
 800cb6a:	898b      	ldrh	r3, [r1, #12]
 800cb6c:	061b      	lsls	r3, r3, #24
 800cb6e:	b09d      	sub	sp, #116	@ 0x74
 800cb70:	4607      	mov	r7, r0
 800cb72:	460d      	mov	r5, r1
 800cb74:	4614      	mov	r4, r2
 800cb76:	d510      	bpl.n	800cb9a <_svfiprintf_r+0x36>
 800cb78:	690b      	ldr	r3, [r1, #16]
 800cb7a:	b973      	cbnz	r3, 800cb9a <_svfiprintf_r+0x36>
 800cb7c:	2140      	movs	r1, #64	@ 0x40
 800cb7e:	f7ff fb8f 	bl	800c2a0 <_malloc_r>
 800cb82:	6028      	str	r0, [r5, #0]
 800cb84:	6128      	str	r0, [r5, #16]
 800cb86:	b930      	cbnz	r0, 800cb96 <_svfiprintf_r+0x32>
 800cb88:	230c      	movs	r3, #12
 800cb8a:	603b      	str	r3, [r7, #0]
 800cb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb90:	b01d      	add	sp, #116	@ 0x74
 800cb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb96:	2340      	movs	r3, #64	@ 0x40
 800cb98:	616b      	str	r3, [r5, #20]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb9e:	2320      	movs	r3, #32
 800cba0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cba4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cba8:	2330      	movs	r3, #48	@ 0x30
 800cbaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cd48 <_svfiprintf_r+0x1e4>
 800cbae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cbb2:	f04f 0901 	mov.w	r9, #1
 800cbb6:	4623      	mov	r3, r4
 800cbb8:	469a      	mov	sl, r3
 800cbba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbbe:	b10a      	cbz	r2, 800cbc4 <_svfiprintf_r+0x60>
 800cbc0:	2a25      	cmp	r2, #37	@ 0x25
 800cbc2:	d1f9      	bne.n	800cbb8 <_svfiprintf_r+0x54>
 800cbc4:	ebba 0b04 	subs.w	fp, sl, r4
 800cbc8:	d00b      	beq.n	800cbe2 <_svfiprintf_r+0x7e>
 800cbca:	465b      	mov	r3, fp
 800cbcc:	4622      	mov	r2, r4
 800cbce:	4629      	mov	r1, r5
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	f7ff ff6b 	bl	800caac <__ssputs_r>
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	f000 80a7 	beq.w	800cd2a <_svfiprintf_r+0x1c6>
 800cbdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbde:	445a      	add	r2, fp
 800cbe0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f000 809f 	beq.w	800cd2a <_svfiprintf_r+0x1c6>
 800cbec:	2300      	movs	r3, #0
 800cbee:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbf6:	f10a 0a01 	add.w	sl, sl, #1
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	9307      	str	r3, [sp, #28]
 800cbfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc02:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc04:	4654      	mov	r4, sl
 800cc06:	2205      	movs	r2, #5
 800cc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc0c:	484e      	ldr	r0, [pc, #312]	@ (800cd48 <_svfiprintf_r+0x1e4>)
 800cc0e:	f7f3 fadf 	bl	80001d0 <memchr>
 800cc12:	9a04      	ldr	r2, [sp, #16]
 800cc14:	b9d8      	cbnz	r0, 800cc4e <_svfiprintf_r+0xea>
 800cc16:	06d0      	lsls	r0, r2, #27
 800cc18:	bf44      	itt	mi
 800cc1a:	2320      	movmi	r3, #32
 800cc1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc20:	0711      	lsls	r1, r2, #28
 800cc22:	bf44      	itt	mi
 800cc24:	232b      	movmi	r3, #43	@ 0x2b
 800cc26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc30:	d015      	beq.n	800cc5e <_svfiprintf_r+0xfa>
 800cc32:	9a07      	ldr	r2, [sp, #28]
 800cc34:	4654      	mov	r4, sl
 800cc36:	2000      	movs	r0, #0
 800cc38:	f04f 0c0a 	mov.w	ip, #10
 800cc3c:	4621      	mov	r1, r4
 800cc3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc42:	3b30      	subs	r3, #48	@ 0x30
 800cc44:	2b09      	cmp	r3, #9
 800cc46:	d94b      	bls.n	800cce0 <_svfiprintf_r+0x17c>
 800cc48:	b1b0      	cbz	r0, 800cc78 <_svfiprintf_r+0x114>
 800cc4a:	9207      	str	r2, [sp, #28]
 800cc4c:	e014      	b.n	800cc78 <_svfiprintf_r+0x114>
 800cc4e:	eba0 0308 	sub.w	r3, r0, r8
 800cc52:	fa09 f303 	lsl.w	r3, r9, r3
 800cc56:	4313      	orrs	r3, r2
 800cc58:	9304      	str	r3, [sp, #16]
 800cc5a:	46a2      	mov	sl, r4
 800cc5c:	e7d2      	b.n	800cc04 <_svfiprintf_r+0xa0>
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	1d19      	adds	r1, r3, #4
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	9103      	str	r1, [sp, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	bfbb      	ittet	lt
 800cc6a:	425b      	neglt	r3, r3
 800cc6c:	f042 0202 	orrlt.w	r2, r2, #2
 800cc70:	9307      	strge	r3, [sp, #28]
 800cc72:	9307      	strlt	r3, [sp, #28]
 800cc74:	bfb8      	it	lt
 800cc76:	9204      	strlt	r2, [sp, #16]
 800cc78:	7823      	ldrb	r3, [r4, #0]
 800cc7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc7c:	d10a      	bne.n	800cc94 <_svfiprintf_r+0x130>
 800cc7e:	7863      	ldrb	r3, [r4, #1]
 800cc80:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc82:	d132      	bne.n	800ccea <_svfiprintf_r+0x186>
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	1d1a      	adds	r2, r3, #4
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	9203      	str	r2, [sp, #12]
 800cc8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc90:	3402      	adds	r4, #2
 800cc92:	9305      	str	r3, [sp, #20]
 800cc94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cd58 <_svfiprintf_r+0x1f4>
 800cc98:	7821      	ldrb	r1, [r4, #0]
 800cc9a:	2203      	movs	r2, #3
 800cc9c:	4650      	mov	r0, sl
 800cc9e:	f7f3 fa97 	bl	80001d0 <memchr>
 800cca2:	b138      	cbz	r0, 800ccb4 <_svfiprintf_r+0x150>
 800cca4:	9b04      	ldr	r3, [sp, #16]
 800cca6:	eba0 000a 	sub.w	r0, r0, sl
 800ccaa:	2240      	movs	r2, #64	@ 0x40
 800ccac:	4082      	lsls	r2, r0
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	3401      	adds	r4, #1
 800ccb2:	9304      	str	r3, [sp, #16]
 800ccb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb8:	4824      	ldr	r0, [pc, #144]	@ (800cd4c <_svfiprintf_r+0x1e8>)
 800ccba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ccbe:	2206      	movs	r2, #6
 800ccc0:	f7f3 fa86 	bl	80001d0 <memchr>
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d036      	beq.n	800cd36 <_svfiprintf_r+0x1d2>
 800ccc8:	4b21      	ldr	r3, [pc, #132]	@ (800cd50 <_svfiprintf_r+0x1ec>)
 800ccca:	bb1b      	cbnz	r3, 800cd14 <_svfiprintf_r+0x1b0>
 800cccc:	9b03      	ldr	r3, [sp, #12]
 800ccce:	3307      	adds	r3, #7
 800ccd0:	f023 0307 	bic.w	r3, r3, #7
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	9303      	str	r3, [sp, #12]
 800ccd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccda:	4433      	add	r3, r6
 800ccdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccde:	e76a      	b.n	800cbb6 <_svfiprintf_r+0x52>
 800cce0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cce4:	460c      	mov	r4, r1
 800cce6:	2001      	movs	r0, #1
 800cce8:	e7a8      	b.n	800cc3c <_svfiprintf_r+0xd8>
 800ccea:	2300      	movs	r3, #0
 800ccec:	3401      	adds	r4, #1
 800ccee:	9305      	str	r3, [sp, #20]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	f04f 0c0a 	mov.w	ip, #10
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccfc:	3a30      	subs	r2, #48	@ 0x30
 800ccfe:	2a09      	cmp	r2, #9
 800cd00:	d903      	bls.n	800cd0a <_svfiprintf_r+0x1a6>
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0c6      	beq.n	800cc94 <_svfiprintf_r+0x130>
 800cd06:	9105      	str	r1, [sp, #20]
 800cd08:	e7c4      	b.n	800cc94 <_svfiprintf_r+0x130>
 800cd0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd0e:	4604      	mov	r4, r0
 800cd10:	2301      	movs	r3, #1
 800cd12:	e7f0      	b.n	800ccf6 <_svfiprintf_r+0x192>
 800cd14:	ab03      	add	r3, sp, #12
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	462a      	mov	r2, r5
 800cd1a:	4b0e      	ldr	r3, [pc, #56]	@ (800cd54 <_svfiprintf_r+0x1f0>)
 800cd1c:	a904      	add	r1, sp, #16
 800cd1e:	4638      	mov	r0, r7
 800cd20:	f7fd fe72 	bl	800aa08 <_printf_float>
 800cd24:	1c42      	adds	r2, r0, #1
 800cd26:	4606      	mov	r6, r0
 800cd28:	d1d6      	bne.n	800ccd8 <_svfiprintf_r+0x174>
 800cd2a:	89ab      	ldrh	r3, [r5, #12]
 800cd2c:	065b      	lsls	r3, r3, #25
 800cd2e:	f53f af2d 	bmi.w	800cb8c <_svfiprintf_r+0x28>
 800cd32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd34:	e72c      	b.n	800cb90 <_svfiprintf_r+0x2c>
 800cd36:	ab03      	add	r3, sp, #12
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	462a      	mov	r2, r5
 800cd3c:	4b05      	ldr	r3, [pc, #20]	@ (800cd54 <_svfiprintf_r+0x1f0>)
 800cd3e:	a904      	add	r1, sp, #16
 800cd40:	4638      	mov	r0, r7
 800cd42:	f7fe f8f9 	bl	800af38 <_printf_i>
 800cd46:	e7ed      	b.n	800cd24 <_svfiprintf_r+0x1c0>
 800cd48:	0800e67f 	.word	0x0800e67f
 800cd4c:	0800e689 	.word	0x0800e689
 800cd50:	0800aa09 	.word	0x0800aa09
 800cd54:	0800caad 	.word	0x0800caad
 800cd58:	0800e685 	.word	0x0800e685

0800cd5c <__sflush_r>:
 800cd5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd64:	0716      	lsls	r6, r2, #28
 800cd66:	4605      	mov	r5, r0
 800cd68:	460c      	mov	r4, r1
 800cd6a:	d454      	bmi.n	800ce16 <__sflush_r+0xba>
 800cd6c:	684b      	ldr	r3, [r1, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	dc02      	bgt.n	800cd78 <__sflush_r+0x1c>
 800cd72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dd48      	ble.n	800ce0a <__sflush_r+0xae>
 800cd78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd7a:	2e00      	cmp	r6, #0
 800cd7c:	d045      	beq.n	800ce0a <__sflush_r+0xae>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd84:	682f      	ldr	r7, [r5, #0]
 800cd86:	6a21      	ldr	r1, [r4, #32]
 800cd88:	602b      	str	r3, [r5, #0]
 800cd8a:	d030      	beq.n	800cdee <__sflush_r+0x92>
 800cd8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	0759      	lsls	r1, r3, #29
 800cd92:	d505      	bpl.n	800cda0 <__sflush_r+0x44>
 800cd94:	6863      	ldr	r3, [r4, #4]
 800cd96:	1ad2      	subs	r2, r2, r3
 800cd98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd9a:	b10b      	cbz	r3, 800cda0 <__sflush_r+0x44>
 800cd9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd9e:	1ad2      	subs	r2, r2, r3
 800cda0:	2300      	movs	r3, #0
 800cda2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cda4:	6a21      	ldr	r1, [r4, #32]
 800cda6:	4628      	mov	r0, r5
 800cda8:	47b0      	blx	r6
 800cdaa:	1c43      	adds	r3, r0, #1
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	d106      	bne.n	800cdbe <__sflush_r+0x62>
 800cdb0:	6829      	ldr	r1, [r5, #0]
 800cdb2:	291d      	cmp	r1, #29
 800cdb4:	d82b      	bhi.n	800ce0e <__sflush_r+0xb2>
 800cdb6:	4a2a      	ldr	r2, [pc, #168]	@ (800ce60 <__sflush_r+0x104>)
 800cdb8:	40ca      	lsrs	r2, r1
 800cdba:	07d6      	lsls	r6, r2, #31
 800cdbc:	d527      	bpl.n	800ce0e <__sflush_r+0xb2>
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	6062      	str	r2, [r4, #4]
 800cdc2:	04d9      	lsls	r1, r3, #19
 800cdc4:	6922      	ldr	r2, [r4, #16]
 800cdc6:	6022      	str	r2, [r4, #0]
 800cdc8:	d504      	bpl.n	800cdd4 <__sflush_r+0x78>
 800cdca:	1c42      	adds	r2, r0, #1
 800cdcc:	d101      	bne.n	800cdd2 <__sflush_r+0x76>
 800cdce:	682b      	ldr	r3, [r5, #0]
 800cdd0:	b903      	cbnz	r3, 800cdd4 <__sflush_r+0x78>
 800cdd2:	6560      	str	r0, [r4, #84]	@ 0x54
 800cdd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdd6:	602f      	str	r7, [r5, #0]
 800cdd8:	b1b9      	cbz	r1, 800ce0a <__sflush_r+0xae>
 800cdda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdde:	4299      	cmp	r1, r3
 800cde0:	d002      	beq.n	800cde8 <__sflush_r+0x8c>
 800cde2:	4628      	mov	r0, r5
 800cde4:	f7ff f9e8 	bl	800c1b8 <_free_r>
 800cde8:	2300      	movs	r3, #0
 800cdea:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdec:	e00d      	b.n	800ce0a <__sflush_r+0xae>
 800cdee:	2301      	movs	r3, #1
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	47b0      	blx	r6
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	1c50      	adds	r0, r2, #1
 800cdf8:	d1c9      	bne.n	800cd8e <__sflush_r+0x32>
 800cdfa:	682b      	ldr	r3, [r5, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d0c6      	beq.n	800cd8e <__sflush_r+0x32>
 800ce00:	2b1d      	cmp	r3, #29
 800ce02:	d001      	beq.n	800ce08 <__sflush_r+0xac>
 800ce04:	2b16      	cmp	r3, #22
 800ce06:	d11e      	bne.n	800ce46 <__sflush_r+0xea>
 800ce08:	602f      	str	r7, [r5, #0]
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	e022      	b.n	800ce54 <__sflush_r+0xf8>
 800ce0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce12:	b21b      	sxth	r3, r3
 800ce14:	e01b      	b.n	800ce4e <__sflush_r+0xf2>
 800ce16:	690f      	ldr	r7, [r1, #16]
 800ce18:	2f00      	cmp	r7, #0
 800ce1a:	d0f6      	beq.n	800ce0a <__sflush_r+0xae>
 800ce1c:	0793      	lsls	r3, r2, #30
 800ce1e:	680e      	ldr	r6, [r1, #0]
 800ce20:	bf08      	it	eq
 800ce22:	694b      	ldreq	r3, [r1, #20]
 800ce24:	600f      	str	r7, [r1, #0]
 800ce26:	bf18      	it	ne
 800ce28:	2300      	movne	r3, #0
 800ce2a:	eba6 0807 	sub.w	r8, r6, r7
 800ce2e:	608b      	str	r3, [r1, #8]
 800ce30:	f1b8 0f00 	cmp.w	r8, #0
 800ce34:	dde9      	ble.n	800ce0a <__sflush_r+0xae>
 800ce36:	6a21      	ldr	r1, [r4, #32]
 800ce38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce3a:	4643      	mov	r3, r8
 800ce3c:	463a      	mov	r2, r7
 800ce3e:	4628      	mov	r0, r5
 800ce40:	47b0      	blx	r6
 800ce42:	2800      	cmp	r0, #0
 800ce44:	dc08      	bgt.n	800ce58 <__sflush_r+0xfc>
 800ce46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce4e:	81a3      	strh	r3, [r4, #12]
 800ce50:	f04f 30ff 	mov.w	r0, #4294967295
 800ce54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce58:	4407      	add	r7, r0
 800ce5a:	eba8 0800 	sub.w	r8, r8, r0
 800ce5e:	e7e7      	b.n	800ce30 <__sflush_r+0xd4>
 800ce60:	20400001 	.word	0x20400001

0800ce64 <_fflush_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	690b      	ldr	r3, [r1, #16]
 800ce68:	4605      	mov	r5, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	b913      	cbnz	r3, 800ce74 <_fflush_r+0x10>
 800ce6e:	2500      	movs	r5, #0
 800ce70:	4628      	mov	r0, r5
 800ce72:	bd38      	pop	{r3, r4, r5, pc}
 800ce74:	b118      	cbz	r0, 800ce7e <_fflush_r+0x1a>
 800ce76:	6a03      	ldr	r3, [r0, #32]
 800ce78:	b90b      	cbnz	r3, 800ce7e <_fflush_r+0x1a>
 800ce7a:	f7fe fa07 	bl	800b28c <__sinit>
 800ce7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0f3      	beq.n	800ce6e <_fflush_r+0xa>
 800ce86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce88:	07d0      	lsls	r0, r2, #31
 800ce8a:	d404      	bmi.n	800ce96 <_fflush_r+0x32>
 800ce8c:	0599      	lsls	r1, r3, #22
 800ce8e:	d402      	bmi.n	800ce96 <_fflush_r+0x32>
 800ce90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce92:	f7fe fb28 	bl	800b4e6 <__retarget_lock_acquire_recursive>
 800ce96:	4628      	mov	r0, r5
 800ce98:	4621      	mov	r1, r4
 800ce9a:	f7ff ff5f 	bl	800cd5c <__sflush_r>
 800ce9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cea0:	07da      	lsls	r2, r3, #31
 800cea2:	4605      	mov	r5, r0
 800cea4:	d4e4      	bmi.n	800ce70 <_fflush_r+0xc>
 800cea6:	89a3      	ldrh	r3, [r4, #12]
 800cea8:	059b      	lsls	r3, r3, #22
 800ceaa:	d4e1      	bmi.n	800ce70 <_fflush_r+0xc>
 800ceac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceae:	f7fe fb1b 	bl	800b4e8 <__retarget_lock_release_recursive>
 800ceb2:	e7dd      	b.n	800ce70 <_fflush_r+0xc>

0800ceb4 <memmove>:
 800ceb4:	4288      	cmp	r0, r1
 800ceb6:	b510      	push	{r4, lr}
 800ceb8:	eb01 0402 	add.w	r4, r1, r2
 800cebc:	d902      	bls.n	800cec4 <memmove+0x10>
 800cebe:	4284      	cmp	r4, r0
 800cec0:	4623      	mov	r3, r4
 800cec2:	d807      	bhi.n	800ced4 <memmove+0x20>
 800cec4:	1e43      	subs	r3, r0, #1
 800cec6:	42a1      	cmp	r1, r4
 800cec8:	d008      	beq.n	800cedc <memmove+0x28>
 800ceca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cece:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ced2:	e7f8      	b.n	800cec6 <memmove+0x12>
 800ced4:	4402      	add	r2, r0
 800ced6:	4601      	mov	r1, r0
 800ced8:	428a      	cmp	r2, r1
 800ceda:	d100      	bne.n	800cede <memmove+0x2a>
 800cedc:	bd10      	pop	{r4, pc}
 800cede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cee6:	e7f7      	b.n	800ced8 <memmove+0x24>

0800cee8 <_sbrk_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4d06      	ldr	r5, [pc, #24]	@ (800cf04 <_sbrk_r+0x1c>)
 800ceec:	2300      	movs	r3, #0
 800ceee:	4604      	mov	r4, r0
 800cef0:	4608      	mov	r0, r1
 800cef2:	602b      	str	r3, [r5, #0]
 800cef4:	f7f6 fca0 	bl	8003838 <_sbrk>
 800cef8:	1c43      	adds	r3, r0, #1
 800cefa:	d102      	bne.n	800cf02 <_sbrk_r+0x1a>
 800cefc:	682b      	ldr	r3, [r5, #0]
 800cefe:	b103      	cbz	r3, 800cf02 <_sbrk_r+0x1a>
 800cf00:	6023      	str	r3, [r4, #0]
 800cf02:	bd38      	pop	{r3, r4, r5, pc}
 800cf04:	20004e98 	.word	0x20004e98

0800cf08 <__assert_func>:
 800cf08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf0a:	4614      	mov	r4, r2
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	4b09      	ldr	r3, [pc, #36]	@ (800cf34 <__assert_func+0x2c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4605      	mov	r5, r0
 800cf14:	68d8      	ldr	r0, [r3, #12]
 800cf16:	b14c      	cbz	r4, 800cf2c <__assert_func+0x24>
 800cf18:	4b07      	ldr	r3, [pc, #28]	@ (800cf38 <__assert_func+0x30>)
 800cf1a:	9100      	str	r1, [sp, #0]
 800cf1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf20:	4906      	ldr	r1, [pc, #24]	@ (800cf3c <__assert_func+0x34>)
 800cf22:	462b      	mov	r3, r5
 800cf24:	f000 f870 	bl	800d008 <fiprintf>
 800cf28:	f000 f880 	bl	800d02c <abort>
 800cf2c:	4b04      	ldr	r3, [pc, #16]	@ (800cf40 <__assert_func+0x38>)
 800cf2e:	461c      	mov	r4, r3
 800cf30:	e7f3      	b.n	800cf1a <__assert_func+0x12>
 800cf32:	bf00      	nop
 800cf34:	20000038 	.word	0x20000038
 800cf38:	0800e69a 	.word	0x0800e69a
 800cf3c:	0800e6a7 	.word	0x0800e6a7
 800cf40:	0800e6d5 	.word	0x0800e6d5

0800cf44 <_calloc_r>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	fba1 5402 	umull	r5, r4, r1, r2
 800cf4a:	b934      	cbnz	r4, 800cf5a <_calloc_r+0x16>
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	f7ff f9a7 	bl	800c2a0 <_malloc_r>
 800cf52:	4606      	mov	r6, r0
 800cf54:	b928      	cbnz	r0, 800cf62 <_calloc_r+0x1e>
 800cf56:	4630      	mov	r0, r6
 800cf58:	bd70      	pop	{r4, r5, r6, pc}
 800cf5a:	220c      	movs	r2, #12
 800cf5c:	6002      	str	r2, [r0, #0]
 800cf5e:	2600      	movs	r6, #0
 800cf60:	e7f9      	b.n	800cf56 <_calloc_r+0x12>
 800cf62:	462a      	mov	r2, r5
 800cf64:	4621      	mov	r1, r4
 800cf66:	f7fe fa40 	bl	800b3ea <memset>
 800cf6a:	e7f4      	b.n	800cf56 <_calloc_r+0x12>

0800cf6c <__ascii_mbtowc>:
 800cf6c:	b082      	sub	sp, #8
 800cf6e:	b901      	cbnz	r1, 800cf72 <__ascii_mbtowc+0x6>
 800cf70:	a901      	add	r1, sp, #4
 800cf72:	b142      	cbz	r2, 800cf86 <__ascii_mbtowc+0x1a>
 800cf74:	b14b      	cbz	r3, 800cf8a <__ascii_mbtowc+0x1e>
 800cf76:	7813      	ldrb	r3, [r2, #0]
 800cf78:	600b      	str	r3, [r1, #0]
 800cf7a:	7812      	ldrb	r2, [r2, #0]
 800cf7c:	1e10      	subs	r0, r2, #0
 800cf7e:	bf18      	it	ne
 800cf80:	2001      	movne	r0, #1
 800cf82:	b002      	add	sp, #8
 800cf84:	4770      	bx	lr
 800cf86:	4610      	mov	r0, r2
 800cf88:	e7fb      	b.n	800cf82 <__ascii_mbtowc+0x16>
 800cf8a:	f06f 0001 	mvn.w	r0, #1
 800cf8e:	e7f8      	b.n	800cf82 <__ascii_mbtowc+0x16>

0800cf90 <_realloc_r>:
 800cf90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf94:	4607      	mov	r7, r0
 800cf96:	4614      	mov	r4, r2
 800cf98:	460d      	mov	r5, r1
 800cf9a:	b921      	cbnz	r1, 800cfa6 <_realloc_r+0x16>
 800cf9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	f7ff b97d 	b.w	800c2a0 <_malloc_r>
 800cfa6:	b92a      	cbnz	r2, 800cfb4 <_realloc_r+0x24>
 800cfa8:	f7ff f906 	bl	800c1b8 <_free_r>
 800cfac:	4625      	mov	r5, r4
 800cfae:	4628      	mov	r0, r5
 800cfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb4:	f000 f841 	bl	800d03a <_malloc_usable_size_r>
 800cfb8:	4284      	cmp	r4, r0
 800cfba:	4606      	mov	r6, r0
 800cfbc:	d802      	bhi.n	800cfc4 <_realloc_r+0x34>
 800cfbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfc2:	d8f4      	bhi.n	800cfae <_realloc_r+0x1e>
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	f7ff f96a 	bl	800c2a0 <_malloc_r>
 800cfcc:	4680      	mov	r8, r0
 800cfce:	b908      	cbnz	r0, 800cfd4 <_realloc_r+0x44>
 800cfd0:	4645      	mov	r5, r8
 800cfd2:	e7ec      	b.n	800cfae <_realloc_r+0x1e>
 800cfd4:	42b4      	cmp	r4, r6
 800cfd6:	4622      	mov	r2, r4
 800cfd8:	4629      	mov	r1, r5
 800cfda:	bf28      	it	cs
 800cfdc:	4632      	movcs	r2, r6
 800cfde:	f7fe fa84 	bl	800b4ea <memcpy>
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	4638      	mov	r0, r7
 800cfe6:	f7ff f8e7 	bl	800c1b8 <_free_r>
 800cfea:	e7f1      	b.n	800cfd0 <_realloc_r+0x40>

0800cfec <__ascii_wctomb>:
 800cfec:	4603      	mov	r3, r0
 800cfee:	4608      	mov	r0, r1
 800cff0:	b141      	cbz	r1, 800d004 <__ascii_wctomb+0x18>
 800cff2:	2aff      	cmp	r2, #255	@ 0xff
 800cff4:	d904      	bls.n	800d000 <__ascii_wctomb+0x14>
 800cff6:	228a      	movs	r2, #138	@ 0x8a
 800cff8:	601a      	str	r2, [r3, #0]
 800cffa:	f04f 30ff 	mov.w	r0, #4294967295
 800cffe:	4770      	bx	lr
 800d000:	700a      	strb	r2, [r1, #0]
 800d002:	2001      	movs	r0, #1
 800d004:	4770      	bx	lr
	...

0800d008 <fiprintf>:
 800d008:	b40e      	push	{r1, r2, r3}
 800d00a:	b503      	push	{r0, r1, lr}
 800d00c:	4601      	mov	r1, r0
 800d00e:	ab03      	add	r3, sp, #12
 800d010:	4805      	ldr	r0, [pc, #20]	@ (800d028 <fiprintf+0x20>)
 800d012:	f853 2b04 	ldr.w	r2, [r3], #4
 800d016:	6800      	ldr	r0, [r0, #0]
 800d018:	9301      	str	r3, [sp, #4]
 800d01a:	f000 f83f 	bl	800d09c <_vfiprintf_r>
 800d01e:	b002      	add	sp, #8
 800d020:	f85d eb04 	ldr.w	lr, [sp], #4
 800d024:	b003      	add	sp, #12
 800d026:	4770      	bx	lr
 800d028:	20000038 	.word	0x20000038

0800d02c <abort>:
 800d02c:	b508      	push	{r3, lr}
 800d02e:	2006      	movs	r0, #6
 800d030:	f000 fa08 	bl	800d444 <raise>
 800d034:	2001      	movs	r0, #1
 800d036:	f7f6 fb87 	bl	8003748 <_exit>

0800d03a <_malloc_usable_size_r>:
 800d03a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d03e:	1f18      	subs	r0, r3, #4
 800d040:	2b00      	cmp	r3, #0
 800d042:	bfbc      	itt	lt
 800d044:	580b      	ldrlt	r3, [r1, r0]
 800d046:	18c0      	addlt	r0, r0, r3
 800d048:	4770      	bx	lr

0800d04a <__sfputc_r>:
 800d04a:	6893      	ldr	r3, [r2, #8]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	2b00      	cmp	r3, #0
 800d050:	b410      	push	{r4}
 800d052:	6093      	str	r3, [r2, #8]
 800d054:	da08      	bge.n	800d068 <__sfputc_r+0x1e>
 800d056:	6994      	ldr	r4, [r2, #24]
 800d058:	42a3      	cmp	r3, r4
 800d05a:	db01      	blt.n	800d060 <__sfputc_r+0x16>
 800d05c:	290a      	cmp	r1, #10
 800d05e:	d103      	bne.n	800d068 <__sfputc_r+0x1e>
 800d060:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d064:	f000 b932 	b.w	800d2cc <__swbuf_r>
 800d068:	6813      	ldr	r3, [r2, #0]
 800d06a:	1c58      	adds	r0, r3, #1
 800d06c:	6010      	str	r0, [r2, #0]
 800d06e:	7019      	strb	r1, [r3, #0]
 800d070:	4608      	mov	r0, r1
 800d072:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <__sfputs_r>:
 800d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07a:	4606      	mov	r6, r0
 800d07c:	460f      	mov	r7, r1
 800d07e:	4614      	mov	r4, r2
 800d080:	18d5      	adds	r5, r2, r3
 800d082:	42ac      	cmp	r4, r5
 800d084:	d101      	bne.n	800d08a <__sfputs_r+0x12>
 800d086:	2000      	movs	r0, #0
 800d088:	e007      	b.n	800d09a <__sfputs_r+0x22>
 800d08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d08e:	463a      	mov	r2, r7
 800d090:	4630      	mov	r0, r6
 800d092:	f7ff ffda 	bl	800d04a <__sfputc_r>
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	d1f3      	bne.n	800d082 <__sfputs_r+0xa>
 800d09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d09c <_vfiprintf_r>:
 800d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a0:	460d      	mov	r5, r1
 800d0a2:	b09d      	sub	sp, #116	@ 0x74
 800d0a4:	4614      	mov	r4, r2
 800d0a6:	4698      	mov	r8, r3
 800d0a8:	4606      	mov	r6, r0
 800d0aa:	b118      	cbz	r0, 800d0b4 <_vfiprintf_r+0x18>
 800d0ac:	6a03      	ldr	r3, [r0, #32]
 800d0ae:	b90b      	cbnz	r3, 800d0b4 <_vfiprintf_r+0x18>
 800d0b0:	f7fe f8ec 	bl	800b28c <__sinit>
 800d0b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0b6:	07d9      	lsls	r1, r3, #31
 800d0b8:	d405      	bmi.n	800d0c6 <_vfiprintf_r+0x2a>
 800d0ba:	89ab      	ldrh	r3, [r5, #12]
 800d0bc:	059a      	lsls	r2, r3, #22
 800d0be:	d402      	bmi.n	800d0c6 <_vfiprintf_r+0x2a>
 800d0c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0c2:	f7fe fa10 	bl	800b4e6 <__retarget_lock_acquire_recursive>
 800d0c6:	89ab      	ldrh	r3, [r5, #12]
 800d0c8:	071b      	lsls	r3, r3, #28
 800d0ca:	d501      	bpl.n	800d0d0 <_vfiprintf_r+0x34>
 800d0cc:	692b      	ldr	r3, [r5, #16]
 800d0ce:	b99b      	cbnz	r3, 800d0f8 <_vfiprintf_r+0x5c>
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f000 f938 	bl	800d348 <__swsetup_r>
 800d0d8:	b170      	cbz	r0, 800d0f8 <_vfiprintf_r+0x5c>
 800d0da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0dc:	07dc      	lsls	r4, r3, #31
 800d0de:	d504      	bpl.n	800d0ea <_vfiprintf_r+0x4e>
 800d0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e4:	b01d      	add	sp, #116	@ 0x74
 800d0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ea:	89ab      	ldrh	r3, [r5, #12]
 800d0ec:	0598      	lsls	r0, r3, #22
 800d0ee:	d4f7      	bmi.n	800d0e0 <_vfiprintf_r+0x44>
 800d0f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0f2:	f7fe f9f9 	bl	800b4e8 <__retarget_lock_release_recursive>
 800d0f6:	e7f3      	b.n	800d0e0 <_vfiprintf_r+0x44>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0fc:	2320      	movs	r3, #32
 800d0fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d102:	f8cd 800c 	str.w	r8, [sp, #12]
 800d106:	2330      	movs	r3, #48	@ 0x30
 800d108:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d2b8 <_vfiprintf_r+0x21c>
 800d10c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d110:	f04f 0901 	mov.w	r9, #1
 800d114:	4623      	mov	r3, r4
 800d116:	469a      	mov	sl, r3
 800d118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d11c:	b10a      	cbz	r2, 800d122 <_vfiprintf_r+0x86>
 800d11e:	2a25      	cmp	r2, #37	@ 0x25
 800d120:	d1f9      	bne.n	800d116 <_vfiprintf_r+0x7a>
 800d122:	ebba 0b04 	subs.w	fp, sl, r4
 800d126:	d00b      	beq.n	800d140 <_vfiprintf_r+0xa4>
 800d128:	465b      	mov	r3, fp
 800d12a:	4622      	mov	r2, r4
 800d12c:	4629      	mov	r1, r5
 800d12e:	4630      	mov	r0, r6
 800d130:	f7ff ffa2 	bl	800d078 <__sfputs_r>
 800d134:	3001      	adds	r0, #1
 800d136:	f000 80a7 	beq.w	800d288 <_vfiprintf_r+0x1ec>
 800d13a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d13c:	445a      	add	r2, fp
 800d13e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d140:	f89a 3000 	ldrb.w	r3, [sl]
 800d144:	2b00      	cmp	r3, #0
 800d146:	f000 809f 	beq.w	800d288 <_vfiprintf_r+0x1ec>
 800d14a:	2300      	movs	r3, #0
 800d14c:	f04f 32ff 	mov.w	r2, #4294967295
 800d150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d154:	f10a 0a01 	add.w	sl, sl, #1
 800d158:	9304      	str	r3, [sp, #16]
 800d15a:	9307      	str	r3, [sp, #28]
 800d15c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d160:	931a      	str	r3, [sp, #104]	@ 0x68
 800d162:	4654      	mov	r4, sl
 800d164:	2205      	movs	r2, #5
 800d166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d16a:	4853      	ldr	r0, [pc, #332]	@ (800d2b8 <_vfiprintf_r+0x21c>)
 800d16c:	f7f3 f830 	bl	80001d0 <memchr>
 800d170:	9a04      	ldr	r2, [sp, #16]
 800d172:	b9d8      	cbnz	r0, 800d1ac <_vfiprintf_r+0x110>
 800d174:	06d1      	lsls	r1, r2, #27
 800d176:	bf44      	itt	mi
 800d178:	2320      	movmi	r3, #32
 800d17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d17e:	0713      	lsls	r3, r2, #28
 800d180:	bf44      	itt	mi
 800d182:	232b      	movmi	r3, #43	@ 0x2b
 800d184:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d188:	f89a 3000 	ldrb.w	r3, [sl]
 800d18c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d18e:	d015      	beq.n	800d1bc <_vfiprintf_r+0x120>
 800d190:	9a07      	ldr	r2, [sp, #28]
 800d192:	4654      	mov	r4, sl
 800d194:	2000      	movs	r0, #0
 800d196:	f04f 0c0a 	mov.w	ip, #10
 800d19a:	4621      	mov	r1, r4
 800d19c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1a0:	3b30      	subs	r3, #48	@ 0x30
 800d1a2:	2b09      	cmp	r3, #9
 800d1a4:	d94b      	bls.n	800d23e <_vfiprintf_r+0x1a2>
 800d1a6:	b1b0      	cbz	r0, 800d1d6 <_vfiprintf_r+0x13a>
 800d1a8:	9207      	str	r2, [sp, #28]
 800d1aa:	e014      	b.n	800d1d6 <_vfiprintf_r+0x13a>
 800d1ac:	eba0 0308 	sub.w	r3, r0, r8
 800d1b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	9304      	str	r3, [sp, #16]
 800d1b8:	46a2      	mov	sl, r4
 800d1ba:	e7d2      	b.n	800d162 <_vfiprintf_r+0xc6>
 800d1bc:	9b03      	ldr	r3, [sp, #12]
 800d1be:	1d19      	adds	r1, r3, #4
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	9103      	str	r1, [sp, #12]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	bfbb      	ittet	lt
 800d1c8:	425b      	neglt	r3, r3
 800d1ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d1ce:	9307      	strge	r3, [sp, #28]
 800d1d0:	9307      	strlt	r3, [sp, #28]
 800d1d2:	bfb8      	it	lt
 800d1d4:	9204      	strlt	r2, [sp, #16]
 800d1d6:	7823      	ldrb	r3, [r4, #0]
 800d1d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1da:	d10a      	bne.n	800d1f2 <_vfiprintf_r+0x156>
 800d1dc:	7863      	ldrb	r3, [r4, #1]
 800d1de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1e0:	d132      	bne.n	800d248 <_vfiprintf_r+0x1ac>
 800d1e2:	9b03      	ldr	r3, [sp, #12]
 800d1e4:	1d1a      	adds	r2, r3, #4
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	9203      	str	r2, [sp, #12]
 800d1ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d1ee:	3402      	adds	r4, #2
 800d1f0:	9305      	str	r3, [sp, #20]
 800d1f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d2c8 <_vfiprintf_r+0x22c>
 800d1f6:	7821      	ldrb	r1, [r4, #0]
 800d1f8:	2203      	movs	r2, #3
 800d1fa:	4650      	mov	r0, sl
 800d1fc:	f7f2 ffe8 	bl	80001d0 <memchr>
 800d200:	b138      	cbz	r0, 800d212 <_vfiprintf_r+0x176>
 800d202:	9b04      	ldr	r3, [sp, #16]
 800d204:	eba0 000a 	sub.w	r0, r0, sl
 800d208:	2240      	movs	r2, #64	@ 0x40
 800d20a:	4082      	lsls	r2, r0
 800d20c:	4313      	orrs	r3, r2
 800d20e:	3401      	adds	r4, #1
 800d210:	9304      	str	r3, [sp, #16]
 800d212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d216:	4829      	ldr	r0, [pc, #164]	@ (800d2bc <_vfiprintf_r+0x220>)
 800d218:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d21c:	2206      	movs	r2, #6
 800d21e:	f7f2 ffd7 	bl	80001d0 <memchr>
 800d222:	2800      	cmp	r0, #0
 800d224:	d03f      	beq.n	800d2a6 <_vfiprintf_r+0x20a>
 800d226:	4b26      	ldr	r3, [pc, #152]	@ (800d2c0 <_vfiprintf_r+0x224>)
 800d228:	bb1b      	cbnz	r3, 800d272 <_vfiprintf_r+0x1d6>
 800d22a:	9b03      	ldr	r3, [sp, #12]
 800d22c:	3307      	adds	r3, #7
 800d22e:	f023 0307 	bic.w	r3, r3, #7
 800d232:	3308      	adds	r3, #8
 800d234:	9303      	str	r3, [sp, #12]
 800d236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d238:	443b      	add	r3, r7
 800d23a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d23c:	e76a      	b.n	800d114 <_vfiprintf_r+0x78>
 800d23e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d242:	460c      	mov	r4, r1
 800d244:	2001      	movs	r0, #1
 800d246:	e7a8      	b.n	800d19a <_vfiprintf_r+0xfe>
 800d248:	2300      	movs	r3, #0
 800d24a:	3401      	adds	r4, #1
 800d24c:	9305      	str	r3, [sp, #20]
 800d24e:	4619      	mov	r1, r3
 800d250:	f04f 0c0a 	mov.w	ip, #10
 800d254:	4620      	mov	r0, r4
 800d256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d25a:	3a30      	subs	r2, #48	@ 0x30
 800d25c:	2a09      	cmp	r2, #9
 800d25e:	d903      	bls.n	800d268 <_vfiprintf_r+0x1cc>
 800d260:	2b00      	cmp	r3, #0
 800d262:	d0c6      	beq.n	800d1f2 <_vfiprintf_r+0x156>
 800d264:	9105      	str	r1, [sp, #20]
 800d266:	e7c4      	b.n	800d1f2 <_vfiprintf_r+0x156>
 800d268:	fb0c 2101 	mla	r1, ip, r1, r2
 800d26c:	4604      	mov	r4, r0
 800d26e:	2301      	movs	r3, #1
 800d270:	e7f0      	b.n	800d254 <_vfiprintf_r+0x1b8>
 800d272:	ab03      	add	r3, sp, #12
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	462a      	mov	r2, r5
 800d278:	4b12      	ldr	r3, [pc, #72]	@ (800d2c4 <_vfiprintf_r+0x228>)
 800d27a:	a904      	add	r1, sp, #16
 800d27c:	4630      	mov	r0, r6
 800d27e:	f7fd fbc3 	bl	800aa08 <_printf_float>
 800d282:	4607      	mov	r7, r0
 800d284:	1c78      	adds	r0, r7, #1
 800d286:	d1d6      	bne.n	800d236 <_vfiprintf_r+0x19a>
 800d288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d28a:	07d9      	lsls	r1, r3, #31
 800d28c:	d405      	bmi.n	800d29a <_vfiprintf_r+0x1fe>
 800d28e:	89ab      	ldrh	r3, [r5, #12]
 800d290:	059a      	lsls	r2, r3, #22
 800d292:	d402      	bmi.n	800d29a <_vfiprintf_r+0x1fe>
 800d294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d296:	f7fe f927 	bl	800b4e8 <__retarget_lock_release_recursive>
 800d29a:	89ab      	ldrh	r3, [r5, #12]
 800d29c:	065b      	lsls	r3, r3, #25
 800d29e:	f53f af1f 	bmi.w	800d0e0 <_vfiprintf_r+0x44>
 800d2a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2a4:	e71e      	b.n	800d0e4 <_vfiprintf_r+0x48>
 800d2a6:	ab03      	add	r3, sp, #12
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	462a      	mov	r2, r5
 800d2ac:	4b05      	ldr	r3, [pc, #20]	@ (800d2c4 <_vfiprintf_r+0x228>)
 800d2ae:	a904      	add	r1, sp, #16
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	f7fd fe41 	bl	800af38 <_printf_i>
 800d2b6:	e7e4      	b.n	800d282 <_vfiprintf_r+0x1e6>
 800d2b8:	0800e67f 	.word	0x0800e67f
 800d2bc:	0800e689 	.word	0x0800e689
 800d2c0:	0800aa09 	.word	0x0800aa09
 800d2c4:	0800d079 	.word	0x0800d079
 800d2c8:	0800e685 	.word	0x0800e685

0800d2cc <__swbuf_r>:
 800d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ce:	460e      	mov	r6, r1
 800d2d0:	4614      	mov	r4, r2
 800d2d2:	4605      	mov	r5, r0
 800d2d4:	b118      	cbz	r0, 800d2de <__swbuf_r+0x12>
 800d2d6:	6a03      	ldr	r3, [r0, #32]
 800d2d8:	b90b      	cbnz	r3, 800d2de <__swbuf_r+0x12>
 800d2da:	f7fd ffd7 	bl	800b28c <__sinit>
 800d2de:	69a3      	ldr	r3, [r4, #24]
 800d2e0:	60a3      	str	r3, [r4, #8]
 800d2e2:	89a3      	ldrh	r3, [r4, #12]
 800d2e4:	071a      	lsls	r2, r3, #28
 800d2e6:	d501      	bpl.n	800d2ec <__swbuf_r+0x20>
 800d2e8:	6923      	ldr	r3, [r4, #16]
 800d2ea:	b943      	cbnz	r3, 800d2fe <__swbuf_r+0x32>
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f000 f82a 	bl	800d348 <__swsetup_r>
 800d2f4:	b118      	cbz	r0, 800d2fe <__swbuf_r+0x32>
 800d2f6:	f04f 37ff 	mov.w	r7, #4294967295
 800d2fa:	4638      	mov	r0, r7
 800d2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	6922      	ldr	r2, [r4, #16]
 800d302:	1a98      	subs	r0, r3, r2
 800d304:	6963      	ldr	r3, [r4, #20]
 800d306:	b2f6      	uxtb	r6, r6
 800d308:	4283      	cmp	r3, r0
 800d30a:	4637      	mov	r7, r6
 800d30c:	dc05      	bgt.n	800d31a <__swbuf_r+0x4e>
 800d30e:	4621      	mov	r1, r4
 800d310:	4628      	mov	r0, r5
 800d312:	f7ff fda7 	bl	800ce64 <_fflush_r>
 800d316:	2800      	cmp	r0, #0
 800d318:	d1ed      	bne.n	800d2f6 <__swbuf_r+0x2a>
 800d31a:	68a3      	ldr	r3, [r4, #8]
 800d31c:	3b01      	subs	r3, #1
 800d31e:	60a3      	str	r3, [r4, #8]
 800d320:	6823      	ldr	r3, [r4, #0]
 800d322:	1c5a      	adds	r2, r3, #1
 800d324:	6022      	str	r2, [r4, #0]
 800d326:	701e      	strb	r6, [r3, #0]
 800d328:	6962      	ldr	r2, [r4, #20]
 800d32a:	1c43      	adds	r3, r0, #1
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d004      	beq.n	800d33a <__swbuf_r+0x6e>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	07db      	lsls	r3, r3, #31
 800d334:	d5e1      	bpl.n	800d2fa <__swbuf_r+0x2e>
 800d336:	2e0a      	cmp	r6, #10
 800d338:	d1df      	bne.n	800d2fa <__swbuf_r+0x2e>
 800d33a:	4621      	mov	r1, r4
 800d33c:	4628      	mov	r0, r5
 800d33e:	f7ff fd91 	bl	800ce64 <_fflush_r>
 800d342:	2800      	cmp	r0, #0
 800d344:	d0d9      	beq.n	800d2fa <__swbuf_r+0x2e>
 800d346:	e7d6      	b.n	800d2f6 <__swbuf_r+0x2a>

0800d348 <__swsetup_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4b29      	ldr	r3, [pc, #164]	@ (800d3f0 <__swsetup_r+0xa8>)
 800d34c:	4605      	mov	r5, r0
 800d34e:	6818      	ldr	r0, [r3, #0]
 800d350:	460c      	mov	r4, r1
 800d352:	b118      	cbz	r0, 800d35c <__swsetup_r+0x14>
 800d354:	6a03      	ldr	r3, [r0, #32]
 800d356:	b90b      	cbnz	r3, 800d35c <__swsetup_r+0x14>
 800d358:	f7fd ff98 	bl	800b28c <__sinit>
 800d35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d360:	0719      	lsls	r1, r3, #28
 800d362:	d422      	bmi.n	800d3aa <__swsetup_r+0x62>
 800d364:	06da      	lsls	r2, r3, #27
 800d366:	d407      	bmi.n	800d378 <__swsetup_r+0x30>
 800d368:	2209      	movs	r2, #9
 800d36a:	602a      	str	r2, [r5, #0]
 800d36c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d370:	81a3      	strh	r3, [r4, #12]
 800d372:	f04f 30ff 	mov.w	r0, #4294967295
 800d376:	e033      	b.n	800d3e0 <__swsetup_r+0x98>
 800d378:	0758      	lsls	r0, r3, #29
 800d37a:	d512      	bpl.n	800d3a2 <__swsetup_r+0x5a>
 800d37c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d37e:	b141      	cbz	r1, 800d392 <__swsetup_r+0x4a>
 800d380:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d384:	4299      	cmp	r1, r3
 800d386:	d002      	beq.n	800d38e <__swsetup_r+0x46>
 800d388:	4628      	mov	r0, r5
 800d38a:	f7fe ff15 	bl	800c1b8 <_free_r>
 800d38e:	2300      	movs	r3, #0
 800d390:	6363      	str	r3, [r4, #52]	@ 0x34
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d398:	81a3      	strh	r3, [r4, #12]
 800d39a:	2300      	movs	r3, #0
 800d39c:	6063      	str	r3, [r4, #4]
 800d39e:	6923      	ldr	r3, [r4, #16]
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	f043 0308 	orr.w	r3, r3, #8
 800d3a8:	81a3      	strh	r3, [r4, #12]
 800d3aa:	6923      	ldr	r3, [r4, #16]
 800d3ac:	b94b      	cbnz	r3, 800d3c2 <__swsetup_r+0x7a>
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d3b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d3b8:	d003      	beq.n	800d3c2 <__swsetup_r+0x7a>
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4628      	mov	r0, r5
 800d3be:	f000 f883 	bl	800d4c8 <__smakebuf_r>
 800d3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3c6:	f013 0201 	ands.w	r2, r3, #1
 800d3ca:	d00a      	beq.n	800d3e2 <__swsetup_r+0x9a>
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	60a2      	str	r2, [r4, #8]
 800d3d0:	6962      	ldr	r2, [r4, #20]
 800d3d2:	4252      	negs	r2, r2
 800d3d4:	61a2      	str	r2, [r4, #24]
 800d3d6:	6922      	ldr	r2, [r4, #16]
 800d3d8:	b942      	cbnz	r2, 800d3ec <__swsetup_r+0xa4>
 800d3da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d3de:	d1c5      	bne.n	800d36c <__swsetup_r+0x24>
 800d3e0:	bd38      	pop	{r3, r4, r5, pc}
 800d3e2:	0799      	lsls	r1, r3, #30
 800d3e4:	bf58      	it	pl
 800d3e6:	6962      	ldrpl	r2, [r4, #20]
 800d3e8:	60a2      	str	r2, [r4, #8]
 800d3ea:	e7f4      	b.n	800d3d6 <__swsetup_r+0x8e>
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	e7f7      	b.n	800d3e0 <__swsetup_r+0x98>
 800d3f0:	20000038 	.word	0x20000038

0800d3f4 <_raise_r>:
 800d3f4:	291f      	cmp	r1, #31
 800d3f6:	b538      	push	{r3, r4, r5, lr}
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	d904      	bls.n	800d408 <_raise_r+0x14>
 800d3fe:	2316      	movs	r3, #22
 800d400:	6003      	str	r3, [r0, #0]
 800d402:	f04f 30ff 	mov.w	r0, #4294967295
 800d406:	bd38      	pop	{r3, r4, r5, pc}
 800d408:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d40a:	b112      	cbz	r2, 800d412 <_raise_r+0x1e>
 800d40c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d410:	b94b      	cbnz	r3, 800d426 <_raise_r+0x32>
 800d412:	4628      	mov	r0, r5
 800d414:	f000 f830 	bl	800d478 <_getpid_r>
 800d418:	4622      	mov	r2, r4
 800d41a:	4601      	mov	r1, r0
 800d41c:	4628      	mov	r0, r5
 800d41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d422:	f000 b817 	b.w	800d454 <_kill_r>
 800d426:	2b01      	cmp	r3, #1
 800d428:	d00a      	beq.n	800d440 <_raise_r+0x4c>
 800d42a:	1c59      	adds	r1, r3, #1
 800d42c:	d103      	bne.n	800d436 <_raise_r+0x42>
 800d42e:	2316      	movs	r3, #22
 800d430:	6003      	str	r3, [r0, #0]
 800d432:	2001      	movs	r0, #1
 800d434:	e7e7      	b.n	800d406 <_raise_r+0x12>
 800d436:	2100      	movs	r1, #0
 800d438:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d43c:	4620      	mov	r0, r4
 800d43e:	4798      	blx	r3
 800d440:	2000      	movs	r0, #0
 800d442:	e7e0      	b.n	800d406 <_raise_r+0x12>

0800d444 <raise>:
 800d444:	4b02      	ldr	r3, [pc, #8]	@ (800d450 <raise+0xc>)
 800d446:	4601      	mov	r1, r0
 800d448:	6818      	ldr	r0, [r3, #0]
 800d44a:	f7ff bfd3 	b.w	800d3f4 <_raise_r>
 800d44e:	bf00      	nop
 800d450:	20000038 	.word	0x20000038

0800d454 <_kill_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4d07      	ldr	r5, [pc, #28]	@ (800d474 <_kill_r+0x20>)
 800d458:	2300      	movs	r3, #0
 800d45a:	4604      	mov	r4, r0
 800d45c:	4608      	mov	r0, r1
 800d45e:	4611      	mov	r1, r2
 800d460:	602b      	str	r3, [r5, #0]
 800d462:	f7f6 f961 	bl	8003728 <_kill>
 800d466:	1c43      	adds	r3, r0, #1
 800d468:	d102      	bne.n	800d470 <_kill_r+0x1c>
 800d46a:	682b      	ldr	r3, [r5, #0]
 800d46c:	b103      	cbz	r3, 800d470 <_kill_r+0x1c>
 800d46e:	6023      	str	r3, [r4, #0]
 800d470:	bd38      	pop	{r3, r4, r5, pc}
 800d472:	bf00      	nop
 800d474:	20004e98 	.word	0x20004e98

0800d478 <_getpid_r>:
 800d478:	f7f6 b94e 	b.w	8003718 <_getpid>

0800d47c <__swhatbuf_r>:
 800d47c:	b570      	push	{r4, r5, r6, lr}
 800d47e:	460c      	mov	r4, r1
 800d480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d484:	2900      	cmp	r1, #0
 800d486:	b096      	sub	sp, #88	@ 0x58
 800d488:	4615      	mov	r5, r2
 800d48a:	461e      	mov	r6, r3
 800d48c:	da0d      	bge.n	800d4aa <__swhatbuf_r+0x2e>
 800d48e:	89a3      	ldrh	r3, [r4, #12]
 800d490:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d494:	f04f 0100 	mov.w	r1, #0
 800d498:	bf14      	ite	ne
 800d49a:	2340      	movne	r3, #64	@ 0x40
 800d49c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d4a0:	2000      	movs	r0, #0
 800d4a2:	6031      	str	r1, [r6, #0]
 800d4a4:	602b      	str	r3, [r5, #0]
 800d4a6:	b016      	add	sp, #88	@ 0x58
 800d4a8:	bd70      	pop	{r4, r5, r6, pc}
 800d4aa:	466a      	mov	r2, sp
 800d4ac:	f000 f848 	bl	800d540 <_fstat_r>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	dbec      	blt.n	800d48e <__swhatbuf_r+0x12>
 800d4b4:	9901      	ldr	r1, [sp, #4]
 800d4b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d4ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d4be:	4259      	negs	r1, r3
 800d4c0:	4159      	adcs	r1, r3
 800d4c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4c6:	e7eb      	b.n	800d4a0 <__swhatbuf_r+0x24>

0800d4c8 <__smakebuf_r>:
 800d4c8:	898b      	ldrh	r3, [r1, #12]
 800d4ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4cc:	079d      	lsls	r5, r3, #30
 800d4ce:	4606      	mov	r6, r0
 800d4d0:	460c      	mov	r4, r1
 800d4d2:	d507      	bpl.n	800d4e4 <__smakebuf_r+0x1c>
 800d4d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d4d8:	6023      	str	r3, [r4, #0]
 800d4da:	6123      	str	r3, [r4, #16]
 800d4dc:	2301      	movs	r3, #1
 800d4de:	6163      	str	r3, [r4, #20]
 800d4e0:	b003      	add	sp, #12
 800d4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4e4:	ab01      	add	r3, sp, #4
 800d4e6:	466a      	mov	r2, sp
 800d4e8:	f7ff ffc8 	bl	800d47c <__swhatbuf_r>
 800d4ec:	9f00      	ldr	r7, [sp, #0]
 800d4ee:	4605      	mov	r5, r0
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f7fe fed4 	bl	800c2a0 <_malloc_r>
 800d4f8:	b948      	cbnz	r0, 800d50e <__smakebuf_r+0x46>
 800d4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4fe:	059a      	lsls	r2, r3, #22
 800d500:	d4ee      	bmi.n	800d4e0 <__smakebuf_r+0x18>
 800d502:	f023 0303 	bic.w	r3, r3, #3
 800d506:	f043 0302 	orr.w	r3, r3, #2
 800d50a:	81a3      	strh	r3, [r4, #12]
 800d50c:	e7e2      	b.n	800d4d4 <__smakebuf_r+0xc>
 800d50e:	89a3      	ldrh	r3, [r4, #12]
 800d510:	6020      	str	r0, [r4, #0]
 800d512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d516:	81a3      	strh	r3, [r4, #12]
 800d518:	9b01      	ldr	r3, [sp, #4]
 800d51a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d51e:	b15b      	cbz	r3, 800d538 <__smakebuf_r+0x70>
 800d520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d524:	4630      	mov	r0, r6
 800d526:	f000 f81d 	bl	800d564 <_isatty_r>
 800d52a:	b128      	cbz	r0, 800d538 <__smakebuf_r+0x70>
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	f023 0303 	bic.w	r3, r3, #3
 800d532:	f043 0301 	orr.w	r3, r3, #1
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	431d      	orrs	r5, r3
 800d53c:	81a5      	strh	r5, [r4, #12]
 800d53e:	e7cf      	b.n	800d4e0 <__smakebuf_r+0x18>

0800d540 <_fstat_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	4d07      	ldr	r5, [pc, #28]	@ (800d560 <_fstat_r+0x20>)
 800d544:	2300      	movs	r3, #0
 800d546:	4604      	mov	r4, r0
 800d548:	4608      	mov	r0, r1
 800d54a:	4611      	mov	r1, r2
 800d54c:	602b      	str	r3, [r5, #0]
 800d54e:	f7f6 f94b 	bl	80037e8 <_fstat>
 800d552:	1c43      	adds	r3, r0, #1
 800d554:	d102      	bne.n	800d55c <_fstat_r+0x1c>
 800d556:	682b      	ldr	r3, [r5, #0]
 800d558:	b103      	cbz	r3, 800d55c <_fstat_r+0x1c>
 800d55a:	6023      	str	r3, [r4, #0]
 800d55c:	bd38      	pop	{r3, r4, r5, pc}
 800d55e:	bf00      	nop
 800d560:	20004e98 	.word	0x20004e98

0800d564 <_isatty_r>:
 800d564:	b538      	push	{r3, r4, r5, lr}
 800d566:	4d06      	ldr	r5, [pc, #24]	@ (800d580 <_isatty_r+0x1c>)
 800d568:	2300      	movs	r3, #0
 800d56a:	4604      	mov	r4, r0
 800d56c:	4608      	mov	r0, r1
 800d56e:	602b      	str	r3, [r5, #0]
 800d570:	f7f6 f94a 	bl	8003808 <_isatty>
 800d574:	1c43      	adds	r3, r0, #1
 800d576:	d102      	bne.n	800d57e <_isatty_r+0x1a>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	b103      	cbz	r3, 800d57e <_isatty_r+0x1a>
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	bd38      	pop	{r3, r4, r5, pc}
 800d580:	20004e98 	.word	0x20004e98

0800d584 <_init>:
 800d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d586:	bf00      	nop
 800d588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d58a:	bc08      	pop	{r3}
 800d58c:	469e      	mov	lr, r3
 800d58e:	4770      	bx	lr

0800d590 <_fini>:
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d592:	bf00      	nop
 800d594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d596:	bc08      	pop	{r3}
 800d598:	469e      	mov	lr, r3
 800d59a:	4770      	bx	lr
